

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Apr 22 20:36:44 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F45K20
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    43                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    44                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    45                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    46  0000                     
    47                           	psect	smallconst
    48  000600                     __psmallconst:
    49                           	opt stack 0
    50  000600  00                 	db	0
    51  000601                     _dpowers:
    52                           	opt stack 0
    53  000601  0001               	dw	1
    54  000603  000A               	dw	10
    55  000605  0064               	dw	100
    56  000607  03E8               	dw	1000
    57  000609  2710               	dw	10000
    58  00060B                     __end_of_dpowers:
    59                           	opt stack 0
    60  0000                     _ADCON0	set	4034
    61  0000                     _ADCON0bits	set	4034
    62  0000                     _ADCON1	set	4033
    63  0000                     _ADCON2	set	4032
    64  0000                     _ADRESH	set	4036
    65  0000                     _ANSEL	set	3966
    66  0000                     _ANSELH	set	3967
    67  0000                     _CCP1CON	set	4029
    68  0000                     _CCPR1L	set	4030
    69  0000                     _INTCON2bits	set	4081
    70  0000                     _INTCON3bits	set	4080
    71  0000                     _INTCONbits	set	4082
    72  0000                     _LATBbits	set	3978
    73  0000                     _LATC	set	3979
    74  0000                     _LATD	set	3980
    75  0000                     _LATDbits	set	3980
    76  0000                     _LATEbits	set	3981
    77  0000                     _PORTB	set	3969
    78  0000                     _PORTD	set	3971
    79  0000                     _PR2	set	4043
    80  0000                     _RCONbits	set	4048
    81  0000                     _T0CON	set	4053
    82  0000                     _T0CONbits	set	4053
    83  0000                     _T2CON	set	4042
    84  0000                     _TMR0H	set	4055
    85  0000                     _TMR0L	set	4054
    86  0000                     _TRISA	set	3986
    87  0000                     _TRISAbits	set	3986
    88  0000                     _TRISB	set	3987
    89  0000                     _TRISCbits	set	3988
    90  0000                     _TRISD	set	3989
    91  0000                     _TRISEbits	set	3990
    92  0000                     _WPUBbits	set	3964
    93  00060B                     STR_1:
    94  00060B  20                 	db	32
    95  00060C  2D                 	db	45
    96  00060D  2D                 	db	45
    97  00060E  6D                 	db	109	;'m'
    98  00060F  70                 	db	112	;'p'
    99  000610  68                 	db	104	;'h'
   100  000611  20                 	db	32
   101  000612  20                 	db	32
   102  000613  20                 	db	32
   103  000614  20                 	db	32
   104  000615  2D                 	db	45
   105  000616  2D                 	db	45
   106  000617  2D                 	db	45
   107  000618  72                 	db	114	;'r'
   108  000619  70                 	db	112	;'p'
   109  00061A  6D                 	db	109	;'m'
   110  00061B  00                 	db	0
   111  00061C                     STR_2:
   112  00061C  2D                 	db	45
   113  00061D  2D                 	db	45
   114  00061E  2D                 	db	45
   115  00061F  70                 	db	112	;'p'
   116  000620  77                 	db	119	;'w'
   117  000621  72                 	db	114	;'r'
   118  000622  20                 	db	32
   119  000623  20                 	db	32
   120  000624  20                 	db	32
   121  000625  20                 	db	32
   122  000626  2D                 	db	45
   123  000627  2D                 	db	45
   124  000628  2D                 	db	45
   125  000629  70                 	db	112	;'p'
   126  00062A  77                 	db	119	;'w'
   127  00062B  6D                 	db	109	;'m'
   128  00062C  00                 	db	0
   129  00062D                     STR_5:
   130  00062D  70                 	db	112	;'p'
   131  00062E  77                 	db	119	;'w'
   132  00062F  72                 	db	114	;'r'
   133  000630  20                 	db	32
   134  000631  20                 	db	32
   135  000632  20                 	db	32
   136  000633  20                 	db	32
   137  000634  00                 	db	0
   138  000635                     STR_3:
   139  000635  6D                 	db	109	;'m'
   140  000636  70                 	db	112	;'p'
   141  000637  68                 	db	104	;'h'
   142  000638  20                 	db	32
   143  000639  20                 	db	32
   144  00063A  20                 	db	32
   145  00063B  00                 	db	0
   146  00063C                     STR_6:
   147  00063C  25                 	db	37
   148  00063D  30                 	db	48	;'0'
   149  00063E  32                 	db	50	;'2'
   150  00063F  64                 	db	100	;'d'
   151  000640  00                 	db	0
   152  000641                     STR_7:
   153  000641  25                 	db	37
   154  000642  30                 	db	48	;'0'
   155  000643  33                 	db	51	;'3'
   156  000644  64                 	db	100	;'d'
   157  000645  00                 	db	0
   158  000646                     STR_8:
   159  000646  25                 	db	37
   160  000647  30                 	db	48	;'0'
   161  000648  34                 	db	52	;'4'
   162  000649  64                 	db	100	;'d'
   163  00064A  00                 	db	0
   164  00064B                     STR_9:
   165  00064B  25                 	db	37
   166  00064C  64                 	db	100	;'d'
   167  00064D  00                 	db	0
   168  0000                     
   169                           ; #config settings
   170  00064E  00                 	db	0	; dummy byte at the end
   171  0000                     
   172                           	psect	cinit
   173  00195A                     __pcinit:
   174                           	opt stack 0
   175  00195A                     start_initialization:
   176                           	opt stack 0
   177  00195A                     __initialization:
   178                           	opt stack 0
   179                           
   180                           ; Clear objects allocated to BANK0 (5 bytes)
   181  00195A  0100               	movlb	0
   182  00195C  6B81               	clrf	(__pbssBANK0+4)& (0+255),b
   183  00195E  6B80               	clrf	(__pbssBANK0+3)& (0+255),b
   184  001960  6B7F               	clrf	(__pbssBANK0+2)& (0+255),b
   185  001962  6B7E               	clrf	(__pbssBANK0+1)& (0+255),b
   186  001964  6B7D               	clrf	__pbssBANK0& (0+255),b
   187                           
   188                           ; Clear objects allocated to COMRAM (6 bytes)
   189  001966  6A3C               	clrf	(__pbssCOMRAM+5)& (0+255),c
   190  001968  6A3B               	clrf	(__pbssCOMRAM+4)& (0+255),c
   191  00196A  6A3A               	clrf	(__pbssCOMRAM+3)& (0+255),c
   192  00196C  6A39               	clrf	(__pbssCOMRAM+2)& (0+255),c
   193  00196E  6A38               	clrf	(__pbssCOMRAM+1)& (0+255),c
   194  001970  6A37               	clrf	__pbssCOMRAM& (0+255),c
   195  001972                     end_of_initialization:
   196                           	opt stack 0
   197  001972                     __end_of__initialization:
   198                           	opt stack 0
   199  001972  0E00               	movlw	low (__Lmediumconst shr (0+16))
   200  001974  6EF8               	movwf	tblptru,c
   201  001976  0100               	movlb	0
   202  001978  EFD1  F00A         	goto	_main	;jump to C main() function
   203                           tblptru	equ	0xFF8
   204                           
   205                           	psect	bssCOMRAM
   206  000037                     __pbssCOMRAM:
   207                           	opt stack 0
   208  000037                     _TimerCounterAtOverflow:
   209                           	opt stack 0
   210  000037                     	ds	2
   211  000039                     _TimerOverflowCounter:
   212                           	opt stack 0
   213  000039                     	ds	2
   214  00003B                     _PortBValue:
   215                           	opt stack 0
   216  00003B                     	ds	1
   217  00003C                     _TimerValueAtOverflow:
   218                           	opt stack 0
   219  00003C                     	ds	1
   220                           tblptru	equ	0xFF8
   221                           
   222                           	psect	bssBANK0
   223  00007D                     __pbssBANK0:
   224                           	opt stack 0
   225  00007D                     _RPM:
   226                           	opt stack 0
   227  00007D                     	ds	2
   228  00007F                     _CanCalculateSpeed:
   229                           	opt stack 0
   230  00007F                     	ds	1
   231  000080                     _Speed:
   232                           	opt stack 0
   233  000080                     	ds	1
   234  000081                     _Throttle:
   235                           	opt stack 0
   236  000081                     	ds	1
   237                           tblptru	equ	0xFF8
   238                           
   239                           	psect	cstackBANK0
   240  000060                     __pcstackBANK0:
   241                           	opt stack 0
   242  000060                     sprintf@ap:
   243                           	opt stack 0
   244                           
   245                           ; 2 bytes @ 0x0
   246  000060                     	ds	2
   247  000062                     sprintf@prec:
   248                           	opt stack 0
   249                           
   250                           ; 1 bytes @ 0x2
   251  000062                     	ds	1
   252  000063                     sprintf@val:
   253                           	opt stack 0
   254                           
   255                           ; 2 bytes @ 0x3
   256  000063                     	ds	2
   257  000065                     sprintf@flag:
   258                           	opt stack 0
   259                           
   260                           ; 1 bytes @ 0x5
   261  000065                     	ds	1
   262  000066                     sprintf@width:
   263                           	opt stack 0
   264                           
   265                           ; 2 bytes @ 0x6
   266  000066                     	ds	2
   267  000068                     sprintf@c:
   268                           	opt stack 0
   269                           
   270                           ; 1 bytes @ 0x8
   271  000068                     	ds	1
   272  000069                     putIntLCD@n:
   273                           	opt stack 0
   274                           
   275                           ; 2 bytes @ 0x9
   276  000069                     	ds	2
   277  00006B                     putIntLCD@pad:
   278                           	opt stack 0
   279                           
   280                           ; 2 bytes @ 0xB
   281  00006B                     	ds	2
   282  00006D                     putIntLCD@result_956:
   283                           	opt stack 0
   284                           
   285                           ; 4 bytes @ 0xD
   286  00006D                     	ds	4
   287  000071                     putIntLCD@result_954:
   288                           	opt stack 0
   289                           
   290                           ; 3 bytes @ 0x11
   291  000071                     	ds	3
   292  000074                     putIntLCD@result_958:
   293                           	opt stack 0
   294                           
   295                           ; 3 bytes @ 0x14
   296  000074                     	ds	3
   297  000077                     putIntLCD@result:
   298                           	opt stack 0
   299                           
   300                           ; 2 bytes @ 0x17
   301  000077                     	ds	2
   302  000079                     LCDUpdate@RPM:
   303                           	opt stack 0
   304                           
   305                           ; 2 bytes @ 0x19
   306  000079                     	ds	2
   307  00007B                     LCDUpdate@Throttle:
   308                           	opt stack 0
   309                           
   310                           ; 1 bytes @ 0x1B
   311  00007B                     	ds	1
   312  00007C                     LCDUpdate@PWM:
   313                           	opt stack 0
   314                           
   315                           ; 1 bytes @ 0x1C
   316  00007C                     	ds	1
   317                           tblptru	equ	0xFF8
   318                           
   319                           	psect	cstackCOMRAM
   320  000001                     __pcstackCOMRAM:
   321                           	opt stack 0
   322  000001                     ??_XC8_LowISR_Handler:
   323  000001                     
   324                           ; 1 bytes @ 0x0
   325  000001                     	ds	17
   326  000012                     ??_XC8_HighISR_Handler:
   327                           
   328                           ; 0 bytes @ 0x11
   329  000012                     	ds	14
   330  000020                     ??_Delay10KTCYx:
   331  000020                     ??_isdigit:
   332  000020                     ?_ConvertTimerOverflowToWheelRPM:
   333                           	opt stack 0
   334  000020                     ?___wmul:
   335                           	opt stack 0
   336  000020                     ?___lwdiv:
   337                           	opt stack 0
   338  000020                     Delay100TCYx@unit:
   339                           	opt stack 0
   340  000020                     Delay1KTCYx@unit:
   341                           	opt stack 0
   342  000020                     Delay1TCYx@unit:
   343                           	opt stack 0
   344  000020                     ___wmul@multiplier:
   345                           	opt stack 0
   346  000020                     ___lwdiv@dividend:
   347                           	opt stack 0
   348                           
   349                           ; 2 bytes @ 0x1F
   350  000020                     	ds	1
   351  000021                     ??_SetLCDCGRamAddr:
   352  000021                     ??_SetLCDDDRamAddr:
   353  000021                     WriteCmdLCD@cmd:
   354                           	opt stack 0
   355  000021                     WriteDataLCD@data:
   356                           	opt stack 0
   357  000021                     Delay10KTCYx@unit:
   358                           	opt stack 0
   359  000021                     _isdigit$1370:
   360                           	opt stack 0
   361                           
   362                           ; 1 bytes @ 0x20
   363  000021                     	ds	1
   364  000022                     isdigit@c:
   365                           	opt stack 0
   366  000022                     putLCD@buffer:
   367                           	opt stack 0
   368  000022                     ___wmul@multiplicand:
   369                           	opt stack 0
   370  000022                     ___lwdiv@divisor:
   371                           	opt stack 0
   372                           
   373                           ; 2 bytes @ 0x21
   374  000022                     	ds	2
   375  000024                     SetLCDDDRamAddr@DDaddr:
   376                           	opt stack 0
   377  000024                     SetLCDCGRamAddr@CGaddr:
   378                           	opt stack 0
   379  000024                     ___lwdiv@counter:
   380                           	opt stack 0
   381  000024                     ___wmul@product:
   382                           	opt stack 0
   383                           
   384                           ; 2 bytes @ 0x23
   385  000024                     	ds	1
   386  000025                     OpenLCD@lcdtype:
   387                           	opt stack 0
   388  000025                     ___lwdiv@quotient:
   389                           	opt stack 0
   390                           
   391                           ; 2 bytes @ 0x24
   392  000025                     	ds	1
   393  000026                     
   394                           ; 0 bytes @ 0x25
   395  000026                     	ds	1
   396  000027                     ?___lwmod:
   397                           	opt stack 0
   398  000027                     ___lwmod@dividend:
   399                           	opt stack 0
   400                           
   401                           ; 2 bytes @ 0x26
   402  000027                     	ds	2
   403  000029                     ___lwmod@divisor:
   404                           	opt stack 0
   405                           
   406                           ; 2 bytes @ 0x28
   407  000029                     	ds	2
   408  00002B                     ___lwmod@counter:
   409                           	opt stack 0
   410                           
   411                           ; 1 bytes @ 0x2A
   412  00002B                     	ds	1
   413  00002C                     ?_sprintf:
   414                           	opt stack 0
   415  00002C                     sprintf@sp:
   416                           	opt stack 0
   417                           
   418                           ; 2 bytes @ 0x2B
   419  00002C                     	ds	2
   420  00002E                     sprintf@f:
   421                           	opt stack 0
   422                           
   423                           ; 2 bytes @ 0x2D
   424  00002E                     	ds	4
   425  000032                     ??_sprintf:
   426                           
   427                           ; 0 bytes @ 0x31
   428  000032                     	ds	4
   429  000036                     LCDUpdate@Speed:
   430                           	opt stack 0
   431                           
   432                           ; 1 bytes @ 0x35
   433  000036                     	ds	1
   434  000037                     tblptru	equ	0xFF8
   435                           
   436                           ; 0 bytes @ 0x36
   437 ;;
   438 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   439 ;;
   440 ;; *************** function _main *****************
   441 ;; Defined at:
   442 ;;		line 67 in file "main.c"
   443 ;; Parameters:    Size  Location     Type
   444 ;;		None
   445 ;; Auto vars:     Size  Location     Type
   446 ;;		None
   447 ;; Return value:  Size  Location     Type
   448 ;;		None               void
   449 ;; Registers used:
   450 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   451 ;; Tracked objects:
   452 ;;		On entry : 0/0
   453 ;;		On exit  : 0/0
   454 ;;		Unchanged: 0/0
   455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   456 ;;      Params:         0       0       0       0       0       0       0
   457 ;;      Locals:         0       0       0       0       0       0       0
   458 ;;      Temps:          0       0       0       0       0       0       0
   459 ;;      Totals:         0       0       0       0       0       0       0
   460 ;;Total ram usage:        0 bytes
   461 ;; Hardware stack levels required when called:    8
   462 ;; This function calls:
   463 ;;		_ADC_Convert
   464 ;;		_ConvertTimerOverflowToMPH
   465 ;;		_ConvertTimerOverflowToWheelRPM
   466 ;;		_Delay1KTCYx
   467 ;;		_InitAnalogueInputs
   468 ;;		_InitInterrupts
   469 ;;		_InitLCD
   470 ;;		_InitMotorPWM
   471 ;;		_InitPorts
   472 ;;		_LCDInitialDisplay
   473 ;;		_LCDUpdate
   474 ;; This function is called by:
   475 ;;		Startup code after reset
   476 ;; This function uses a non-reentrant model
   477 ;;
   478                           
   479                           	psect	text0
   480  0015A2                     __ptext0:
   481                           	opt stack 0
   482  0015A2                     _main:
   483                           	opt stack 23
   484                           
   485                           ;main.c: 69: InitPorts();
   486                           
   487                           ;incstack = 0
   488  0015A2  ECCF  F00C         	call	_InitPorts	;wreg free
   489                           
   490                           ;main.c: 70: InitInterrupts();
   491  0015A6  ECDF  F00C         	call	_InitInterrupts	;wreg free
   492                           
   493                           ;main.c: 71: InitMotorPWM();
   494  0015AA  EC16  F00D         	call	_InitMotorPWM	;wreg free
   495                           
   496                           ;main.c: 72: InitLCD();
   497  0015AE  ECCF  F00B         	call	_InitLCD	;wreg free
   498                           
   499                           ;main.c: 73: InitAnalogueInputs();
   500  0015B2  ECFA  F00C         	call	_InitAnalogueInputs	;wreg free
   501                           
   502                           ;main.c: 74: LCDInitialDisplay();
   503  0015B6  EC82  F00A         	call	_LCDInitialDisplay	;wreg free
   504                           
   505                           ;main.c: 76: CCPR1L = 16;
   506  0015BA  0E10               	movlw	16
   507  0015BC  6EBE               	movwf	4030,c	;volatile
   508                           
   509                           ;main.c: 79: LATD = 0;
   510  0015BE  0E00               	movlw	0
   511  0015C0  6E8C               	movwf	3980,c	;volatile
   512                           
   513                           ;main.c: 80: LATC = 0;
   514  0015C2  0E00               	movlw	0
   515  0015C4  6E8B               	movwf	3979,c	;volatile
   516                           
   517                           ;main.c: 85: TMR0H = 0xFF;
   518  0015C6  68D7               	setf	4055,c	;volatile
   519                           
   520                           ;main.c: 86: TMR0L = 0x83;
   521  0015C8  0E83               	movlw	131
   522  0015CA  6ED6               	movwf	4054,c	;volatile
   523                           
   524                           ;main.c: 87: T0CONbits.TMR0ON = 1;
   525  0015CC  8ED5               	bsf	4053,7,c	;volatile
   526                           
   527                           ;main.c: 89: CanCalculateSpeed = 0;
   528  0015CE  0E00               	movlw	0
   529  0015D0  0100               	movlb	0	; () banked
   530  0015D2  6F7F               	movwf	_CanCalculateSpeed& (0+255),b
   531  0015D4  D000               	goto	l4329
   532  0015D6                     l4329:
   533                           
   534                           ;main.c: 91: {
   535                           ;main.c: 93: CCPR1L = CCPR1L + 1;
   536  0015D6  28BE               	incf	4030,w,c	;volatile
   537  0015D8  6EBE               	movwf	4030,c	;volatile
   538                           
   539                           ;main.c: 94: Throttle = ADC_Convert();
   540  0015DA  EC1E  F00D         	call	_ADC_Convert	;wreg free
   541  0015DE  0100               	movlb	0	; () banked
   542  0015E0  6F81               	movwf	_Throttle& (0+255),b
   543                           
   544                           ; BSR set to: 0
   545                           ;main.c: 95: Throttle = Throttle >> 4;
   546  0015E2  0100               	movlb	0	; () banked
   547  0015E4  3981               	swapf	_Throttle& (0+255),w,b
   548  0015E6  0B0F               	andlw	15
   549  0015E8  0100               	movlb	0	; () banked
   550  0015EA  6F81               	movwf	_Throttle& (0+255),b
   551                           
   552                           ; BSR set to: 0
   553                           ;main.c: 96: if (CanCalculateSpeed) {
   554  0015EC  0100               	movlb	0	; () banked
   555  0015EE  517F               	movf	_CanCalculateSpeed& (0+255),w,b
   556  0015F0  B4D8               	btfsc	status,2,c
   557  0015F2  D00E               	goto	l4341
   558                           
   559                           ; BSR set to: 0
   560                           ;main.c: 97: RPM = ConvertTimerOverflowToWheelRPM();
   561  0015F4  EC28  F003         	call	_ConvertTimerOverflowToWheelRPM	;wreg free
   562  0015F8  C020  F07D         	movff	?_ConvertTimerOverflowToWheelRPM,_RPM
   563  0015FC  C021  F07E         	movff	?_ConvertTimerOverflowToWheelRPM+1,_RPM+1
   564                           
   565                           ;main.c: 98: Speed = ConvertTimerOverflowToMPH();
   566  001600  ECFE  F007         	call	_ConvertTimerOverflowToMPH	;wreg free
   567  001604  0100               	movlb	0	; () banked
   568  001606  6F80               	movwf	_Speed& (0+255),b
   569                           
   570                           ; BSR set to: 0
   571                           ;main.c: 99: CanCalculateSpeed = 0;
   572  001608  0E00               	movlw	0
   573  00160A  0100               	movlb	0	; () banked
   574  00160C  6F7F               	movwf	_CanCalculateSpeed& (0+255),b
   575  00160E  D000               	goto	l4341
   576  001610                     l4341:
   577                           
   578                           ; BSR set to: 0
   579                           ;main.c: 100: }
   580                           ;main.c: 103: LCDUpdate(Speed, RPM, Throttle, CCPR1L);
   581  001610  C07D  F079         	movff	_RPM,LCDUpdate@RPM
   582  001614  C07E  F07A         	movff	_RPM+1,LCDUpdate@RPM+1
   583  001618  C081  F07B         	movff	_Throttle,LCDUpdate@Throttle
   584  00161C  CFBE F07C          	movff	4030,LCDUpdate@PWM	;volatile
   585  001620  0100               	movlb	0	; () banked
   586  001622  5180               	movf	_Speed& (0+255),w,b
   587  001624  ECF1  F008         	call	_LCDUpdate
   588                           
   589                           ;main.c: 107: Delay1KTCYx(10);
   590  001628  0E0A               	movlw	10
   591  00162A  EC0D  F00D         	call	_Delay1KTCYx
   592  00162E  D7D3               	goto	l4329
   593  001630  EF60  F000         	goto	start
   594  001634                     __end_of_main:
   595                           	opt stack 0
   596                           tblptru	equ	0xFF8
   597                           status	equ	0xFD8
   598                           
   599 ;; *************** function _LCDUpdate *****************
   600 ;; Defined at:
   601 ;;		line 46 in file "lcddisplay.c"
   602 ;; Parameters:    Size  Location     Type
   603 ;;  Speed           1    wreg     unsigned char 
   604 ;;  RPM             2   25[BANK0 ] unsigned short 
   605 ;;  Throttle        1   27[BANK0 ] unsigned char 
   606 ;;  PWM             1   28[BANK0 ] unsigned char 
   607 ;; Auto vars:     Size  Location     Type
   608 ;;  Speed           1   53[COMRAM] unsigned char 
   609 ;; Return value:  Size  Location     Type
   610 ;;		None               void
   611 ;; Registers used:
   612 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   613 ;; Tracked objects:
   614 ;;		On entry : 0/0
   615 ;;		On exit  : 0/0
   616 ;;		Unchanged: 0/0
   617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   618 ;;      Params:         0       4       0       0       0       0       0
   619 ;;      Locals:         1       0       0       0       0       0       0
   620 ;;      Temps:          0       0       0       0       0       0       0
   621 ;;      Totals:         1       4       0       0       0       0       0
   622 ;;Total ram usage:        5 bytes
   623 ;; Hardware stack levels used:    1
   624 ;; Hardware stack levels required when called:    7
   625 ;; This function calls:
   626 ;;		_BusyLCD
   627 ;;		_SetLCDDDRamAddr
   628 ;;		_WriteCmdLCD
   629 ;;		_putIntLCD
   630 ;;		_putLCD
   631 ;; This function is called by:
   632 ;;		_main
   633 ;; This function uses a non-reentrant model
   634 ;;
   635                           
   636                           	psect	text1
   637  0011E2                     __ptext1:
   638                           	opt stack 0
   639  0011E2                     _LCDUpdate:
   640                           	opt stack 23
   641                           
   642                           ;incstack = 0
   643                           ;LCDUpdate@Speed stored from wreg
   644  0011E2  6E36               	movwf	LCDUpdate@Speed,c
   645                           
   646                           ;lcddisplay.c: 47: WriteCmdLCD(0x02);
   647  0011E4  0E02               	movlw	2
   648  0011E6  EC3D  F00C         	call	_WriteCmdLCD
   649                           
   650                           ;lcddisplay.c: 50: SetLCDDDRamAddr(0x00);
   651  0011EA  0E00               	movlw	0
   652  0011EC  ECA5  F00B         	call	_SetLCDDDRamAddr
   653                           
   654                           ;lcddisplay.c: 51: while(BusyLCD());
   655  0011F0  D000               	goto	l4277
   656  0011F2                     l4277:
   657  0011F2  EC7B  F00C         	call	_BusyLCD	;wreg free
   658  0011F6  0900               	iorlw	0
   659  0011F8  B4D8               	btfsc	status,2,c
   660  0011FA  D002               	goto	l4279
   661  0011FC  D7FA               	goto	l4277
   662                           
   663                           ;lcddisplay.c: 53: while(BusyLCD());
   664  0011FE  D000               	goto	l4279
   665  001200                     l4279:
   666  001200  EC7B  F00C         	call	_BusyLCD	;wreg free
   667  001204  0900               	iorlw	0
   668  001206  A4D8               	btfss	status,2,c
   669  001208  D7FB               	goto	l4279
   670                           
   671                           ;lcddisplay.c: 54: putIntLCD(Speed,3);
   672  00120A  C036  F069         	movff	LCDUpdate@Speed,putIntLCD@n
   673  00120E  0100               	movlb	0	; () banked
   674  001210  6B6A               	clrf	(putIntLCD@n+1)& (0+255),b
   675  001212  0E00               	movlw	0
   676  001214  0100               	movlb	0	; () banked
   677  001216  6F6C               	movwf	(putIntLCD@pad+1)& (0+255),b
   678  001218  0E03               	movlw	3
   679  00121A  6F6B               	movwf	putIntLCD@pad& (0+255),b
   680  00121C  EC65  F009         	call	_putIntLCD	;wreg free
   681                           
   682                           ;lcddisplay.c: 55: while(BusyLCD());
   683  001220  D000               	goto	l4283
   684  001222                     l4283:
   685  001222  EC7B  F00C         	call	_BusyLCD	;wreg free
   686  001226  0900               	iorlw	0
   687  001228  A4D8               	btfss	status,2,c
   688  00122A  D7FB               	goto	l4283
   689                           
   690                           ;lcddisplay.c: 56: putLCD("mph   ");
   691  00122C  0E35               	movlw	low STR_3
   692  00122E  6E22               	movwf	putLCD@buffer,c
   693  001230  0E06               	movlw	high STR_3
   694  001232  6E23               	movwf	putLCD@buffer+1,c
   695  001234  EC1A  F00B         	call	_putLCD	;wreg free
   696                           
   697                           ;lcddisplay.c: 57: while(BusyLCD());
   698  001238  D000               	goto	l4287
   699  00123A                     l4287:
   700  00123A  EC7B  F00C         	call	_BusyLCD	;wreg free
   701  00123E  0900               	iorlw	0
   702  001240  A4D8               	btfss	status,2,c
   703  001242  D7FB               	goto	l4287
   704                           
   705                           ;lcddisplay.c: 58: putIntLCD(RPM, 4);
   706  001244  C079  F069         	movff	LCDUpdate@RPM,putIntLCD@n
   707  001248  C07A  F06A         	movff	LCDUpdate@RPM+1,putIntLCD@n+1
   708  00124C  0E00               	movlw	0
   709  00124E  0100               	movlb	0	; () banked
   710  001250  6F6C               	movwf	(putIntLCD@pad+1)& (0+255),b
   711  001252  0E04               	movlw	4
   712  001254  6F6B               	movwf	putIntLCD@pad& (0+255),b
   713  001256  EC65  F009         	call	_putIntLCD	;wreg free
   714                           
   715                           ;lcddisplay.c: 59: putLCD("rpm");
   716  00125A  0E18               	movlw	low (STR_1+13)
   717  00125C  6E22               	movwf	putLCD@buffer,c
   718  00125E  0E06               	movlw	high (STR_1+13)
   719  001260  6E23               	movwf	putLCD@buffer+1,c
   720  001262  EC1A  F00B         	call	_putLCD	;wreg free
   721                           
   722                           ;lcddisplay.c: 61: SetLCDDDRamAddr(0x040);
   723  001266  0E40               	movlw	64
   724  001268  ECA5  F00B         	call	_SetLCDDDRamAddr
   725                           
   726                           ;lcddisplay.c: 64: while(BusyLCD());
   727  00126C  D000               	goto	l4295
   728  00126E                     l4295:
   729  00126E  EC7B  F00C         	call	_BusyLCD	;wreg free
   730  001272  0900               	iorlw	0
   731  001274  A4D8               	btfss	status,2,c
   732  001276  D7FB               	goto	l4295
   733                           
   734                           ;lcddisplay.c: 66: putIntLCD(Throttle,3);
   735  001278  C07B  F069         	movff	LCDUpdate@Throttle,putIntLCD@n
   736  00127C  0100               	movlb	0	; () banked
   737  00127E  6B6A               	clrf	(putIntLCD@n+1)& (0+255),b
   738  001280  0E00               	movlw	0
   739  001282  0100               	movlb	0	; () banked
   740  001284  6F6C               	movwf	(putIntLCD@pad+1)& (0+255),b
   741  001286  0E03               	movlw	3
   742  001288  6F6B               	movwf	putIntLCD@pad& (0+255),b
   743  00128A  EC65  F009         	call	_putIntLCD	;wreg free
   744                           
   745                           ;lcddisplay.c: 67: while(BusyLCD());
   746  00128E  D000               	goto	l4299
   747  001290                     l4299:
   748  001290  EC7B  F00C         	call	_BusyLCD	;wreg free
   749  001294  0900               	iorlw	0
   750  001296  A4D8               	btfss	status,2,c
   751  001298  D7FB               	goto	l4299
   752                           
   753                           ;lcddisplay.c: 68: putLCD("pwr    ");
   754  00129A  0E2D               	movlw	low STR_5
   755  00129C  6E22               	movwf	putLCD@buffer,c
   756  00129E  0E06               	movlw	high STR_5
   757  0012A0  6E23               	movwf	putLCD@buffer+1,c
   758  0012A2  EC1A  F00B         	call	_putLCD	;wreg free
   759                           
   760                           ;lcddisplay.c: 69: while(BusyLCD());
   761  0012A6  D000               	goto	l4303
   762  0012A8                     l4303:
   763  0012A8  EC7B  F00C         	call	_BusyLCD	;wreg free
   764  0012AC  0900               	iorlw	0
   765  0012AE  A4D8               	btfss	status,2,c
   766  0012B0  D7FB               	goto	l4303
   767                           
   768                           ;lcddisplay.c: 70: putIntLCD(PWM, 3);
   769  0012B2  C07C  F069         	movff	LCDUpdate@PWM,putIntLCD@n
   770  0012B6  0100               	movlb	0	; () banked
   771  0012B8  6B6A               	clrf	(putIntLCD@n+1)& (0+255),b
   772  0012BA  0E00               	movlw	0
   773  0012BC  0100               	movlb	0	; () banked
   774  0012BE  6F6C               	movwf	(putIntLCD@pad+1)& (0+255),b
   775  0012C0  0E03               	movlw	3
   776  0012C2  6F6B               	movwf	putIntLCD@pad& (0+255),b
   777  0012C4  EC65  F009         	call	_putIntLCD	;wreg free
   778  0012C8  0012               	return		;funcret
   779  0012CA                     __end_of_LCDUpdate:
   780                           	opt stack 0
   781                           tblptru	equ	0xFF8
   782                           status	equ	0xFD8
   783                           
   784 ;; *************** function _putIntLCD *****************
   785 ;; Defined at:
   786 ;;		line 408 in file "lcddisplay.c"
   787 ;; Parameters:    Size  Location     Type
   788 ;;  n               2    9[BANK0 ] short 
   789 ;;  pad             2   11[BANK0 ] short 
   790 ;; Auto vars:     Size  Location     Type
   791 ;;  result          3   20[BANK0 ] unsigned char [3]
   792 ;;  result          4   13[BANK0 ] unsigned char [4]
   793 ;;  result          3   17[BANK0 ] unsigned char [3]
   794 ;;  result          2   23[BANK0 ] unsigned char [2]
   795 ;; Return value:  Size  Location     Type
   796 ;;		None               void
   797 ;; Registers used:
   798 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   799 ;; Tracked objects:
   800 ;;		On entry : 0/0
   801 ;;		On exit  : 0/0
   802 ;;		Unchanged: 0/0
   803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   804 ;;      Params:         0       4       0       0       0       0       0
   805 ;;      Locals:         0      12       0       0       0       0       0
   806 ;;      Temps:          0       0       0       0       0       0       0
   807 ;;      Totals:         0      16       0       0       0       0       0
   808 ;;Total ram usage:       16 bytes
   809 ;; Hardware stack levels used:    1
   810 ;; Hardware stack levels required when called:    6
   811 ;; This function calls:
   812 ;;		_putLCD
   813 ;;		_sprintf
   814 ;; This function is called by:
   815 ;;		_LCDUpdate
   816 ;; This function uses a non-reentrant model
   817 ;;
   818                           
   819                           	psect	text2
   820  0012CA                     __ptext2:
   821                           	opt stack 0
   822  0012CA                     _putIntLCD:
   823                           	opt stack 23
   824                           
   825                           ;lcddisplay.c: 410: if (pad == 2) {
   826                           
   827                           ;incstack = 0
   828  0012CA  0E02               	movlw	2
   829  0012CC  0100               	movlb	0	; () banked
   830  0012CE  196B               	xorwf	putIntLCD@pad& (0+255),w,b
   831  0012D0  0100               	movlb	0	; () banked
   832  0012D2  116C               	iorwf	(putIntLCD@pad+1)& (0+255),w,b
   833  0012D4  A4D8               	btfss	status,2,c
   834  0012D6  D015               	goto	l4259
   835                           
   836                           ; BSR set to: 0
   837                           ;lcddisplay.c: 411: unsigned char result[2];
   838                           ;lcddisplay.c: 412: sprintf(result, "%02d", n);
   839  0012D8  0E77               	movlw	low putIntLCD@result
   840  0012DA  6E2C               	movwf	sprintf@sp,c
   841  0012DC  0E00               	movlw	high putIntLCD@result
   842  0012DE  6E2D               	movwf	sprintf@sp+1,c
   843  0012E0  0E3C               	movlw	low STR_6
   844  0012E2  6E2E               	movwf	sprintf@f,c
   845  0012E4  0E06               	movlw	high STR_6
   846  0012E6  6E2F               	movwf	sprintf@f+1,c
   847  0012E8  C069  F030         	movff	putIntLCD@n,?_sprintf+4
   848  0012EC  C06A  F031         	movff	putIntLCD@n+1,?_sprintf+5
   849  0012F0  EC66  F006         	call	_sprintf	;wreg free
   850                           
   851                           ;lcddisplay.c: 413: putLCD(result);
   852  0012F4  0E77               	movlw	low putIntLCD@result
   853  0012F6  6E22               	movwf	putLCD@buffer,c
   854  0012F8  0E00               	movlw	high putIntLCD@result
   855  0012FA  6E23               	movwf	putLCD@buffer+1,c
   856  0012FC  EC1A  F00B         	call	_putLCD	;wreg free
   857                           
   858                           ;lcddisplay.c: 414: } else if (pad == 3) {
   859  001300  0012               	return	
   860  001302                     l4259:
   861  001302  0E03               	movlw	3
   862  001304  0100               	movlb	0	; () banked
   863  001306  196B               	xorwf	putIntLCD@pad& (0+255),w,b
   864  001308  0100               	movlb	0	; () banked
   865  00130A  116C               	iorwf	(putIntLCD@pad+1)& (0+255),w,b
   866  00130C  A4D8               	btfss	status,2,c
   867  00130E  D015               	goto	l4265
   868                           
   869                           ; BSR set to: 0
   870                           ;lcddisplay.c: 415: unsigned char result[3];
   871                           ;lcddisplay.c: 416: sprintf(result, "%03d", n);
   872  001310  0E71               	movlw	low putIntLCD@result_954
   873  001312  6E2C               	movwf	sprintf@sp,c
   874  001314  0E00               	movlw	high putIntLCD@result_954
   875  001316  6E2D               	movwf	sprintf@sp+1,c
   876  001318  0E41               	movlw	low STR_7
   877  00131A  6E2E               	movwf	sprintf@f,c
   878  00131C  0E06               	movlw	high STR_7
   879  00131E  6E2F               	movwf	sprintf@f+1,c
   880  001320  C069  F030         	movff	putIntLCD@n,?_sprintf+4
   881  001324  C06A  F031         	movff	putIntLCD@n+1,?_sprintf+5
   882  001328  EC66  F006         	call	_sprintf	;wreg free
   883                           
   884                           ;lcddisplay.c: 417: putLCD(result);
   885  00132C  0E71               	movlw	low putIntLCD@result_954
   886  00132E  6E22               	movwf	putLCD@buffer,c
   887  001330  0E00               	movlw	high putIntLCD@result_954
   888  001332  6E23               	movwf	putLCD@buffer+1,c
   889  001334  EC1A  F00B         	call	_putLCD	;wreg free
   890                           
   891                           ;lcddisplay.c: 418: } else if (pad == 4) {
   892  001338  0012               	return	
   893  00133A                     l4265:
   894  00133A  0E04               	movlw	4
   895  00133C  0100               	movlb	0	; () banked
   896  00133E  196B               	xorwf	putIntLCD@pad& (0+255),w,b
   897  001340  0100               	movlb	0	; () banked
   898  001342  116C               	iorwf	(putIntLCD@pad+1)& (0+255),w,b
   899  001344  A4D8               	btfss	status,2,c
   900  001346  D015               	goto	l4271
   901                           
   902                           ; BSR set to: 0
   903                           ;lcddisplay.c: 419: unsigned char result[4];
   904                           ;lcddisplay.c: 420: sprintf(result, "%04d", n);
   905  001348  0E6D               	movlw	low putIntLCD@result_956
   906  00134A  6E2C               	movwf	sprintf@sp,c
   907  00134C  0E00               	movlw	high putIntLCD@result_956
   908  00134E  6E2D               	movwf	sprintf@sp+1,c
   909  001350  0E46               	movlw	low STR_8
   910  001352  6E2E               	movwf	sprintf@f,c
   911  001354  0E06               	movlw	high STR_8
   912  001356  6E2F               	movwf	sprintf@f+1,c
   913  001358  C069  F030         	movff	putIntLCD@n,?_sprintf+4
   914  00135C  C06A  F031         	movff	putIntLCD@n+1,?_sprintf+5
   915  001360  EC66  F006         	call	_sprintf	;wreg free
   916                           
   917                           ;lcddisplay.c: 421: putLCD(result);
   918  001364  0E6D               	movlw	low putIntLCD@result_956
   919  001366  6E22               	movwf	putLCD@buffer,c
   920  001368  0E00               	movlw	high putIntLCD@result_956
   921  00136A  6E23               	movwf	putLCD@buffer+1,c
   922  00136C  EC1A  F00B         	call	_putLCD	;wreg free
   923                           
   924                           ;lcddisplay.c: 422: } else {
   925  001370  0012               	return	
   926  001372                     l4271:
   927                           
   928                           ;lcddisplay.c: 423: unsigned char result[3];
   929                           ;lcddisplay.c: 424: sprintf(result, "%d", n);
   930  001372  0E74               	movlw	low putIntLCD@result_958
   931  001374  6E2C               	movwf	sprintf@sp,c
   932  001376  0E00               	movlw	high putIntLCD@result_958
   933  001378  6E2D               	movwf	sprintf@sp+1,c
   934  00137A  0E4B               	movlw	low STR_9
   935  00137C  6E2E               	movwf	sprintf@f,c
   936  00137E  0E06               	movlw	high STR_9
   937  001380  6E2F               	movwf	sprintf@f+1,c
   938  001382  C069  F030         	movff	putIntLCD@n,?_sprintf+4
   939  001386  C06A  F031         	movff	putIntLCD@n+1,?_sprintf+5
   940  00138A  EC66  F006         	call	_sprintf	;wreg free
   941                           
   942                           ;lcddisplay.c: 425: putLCD(result);
   943  00138E  0E74               	movlw	low putIntLCD@result_958
   944  001390  6E22               	movwf	putLCD@buffer,c
   945  001392  0E00               	movlw	high putIntLCD@result_958
   946  001394  6E23               	movwf	putLCD@buffer+1,c
   947  001396  EC1A  F00B         	call	_putLCD	;wreg free
   948  00139A  0012               	return	
   949  00139C  0012               	return		;funcret
   950  00139E                     __end_of_putIntLCD:
   951                           	opt stack 0
   952                           tblptru	equ	0xFF8
   953                           status	equ	0xFD8
   954                           
   955 ;; *************** function _sprintf *****************
   956 ;; Defined at:
   957 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
   958 ;; Parameters:    Size  Location     Type
   959 ;;  sp              2   43[COMRAM] PTR unsigned char 
   960 ;;		 -> putIntLCD@result_958(3), putIntLCD@result_956(4), putIntLCD@result_954(3), putIntLCD@result(2), 
   961 ;;  f               2   45[COMRAM] PTR const unsigned char 
   962 ;;		 -> STR_9(3), STR_8(5), STR_7(5), STR_6(5), 
   963 ;; Auto vars:     Size  Location     Type
   964 ;;  tmpval          4    0        struct .
   965 ;;  cp              3    0        PTR const unsigned char 
   966 ;;  width           2    6[BANK0 ] int 
   967 ;;  val             2    3[BANK0 ] unsigned int 
   968 ;;  ap              2    0[BANK0 ] PTR void [1]
   969 ;;		 -> ?_sprintf(2), 
   970 ;;  len             2    0        unsigned int 
   971 ;;  c               1    8[BANK0 ] char 
   972 ;;  flag            1    5[BANK0 ] unsigned char 
   973 ;;  prec            1    2[BANK0 ] char 
   974 ;; Return value:  Size  Location     Type
   975 ;;                  2   43[COMRAM] int 
   976 ;; Registers used:
   977 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   978 ;; Tracked objects:
   979 ;;		On entry : 0/0
   980 ;;		On exit  : 0/0
   981 ;;		Unchanged: 0/0
   982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   983 ;;      Params:         6       0       0       0       0       0       0
   984 ;;      Locals:         0       9       0       0       0       0       0
   985 ;;      Temps:          4       0       0       0       0       0       0
   986 ;;      Totals:        10       9       0       0       0       0       0
   987 ;;Total ram usage:       19 bytes
   988 ;; Hardware stack levels used:    1
   989 ;; Hardware stack levels required when called:    3
   990 ;; This function calls:
   991 ;;		___lwdiv
   992 ;;		___lwmod
   993 ;;		___wmul
   994 ;;		_isdigit
   995 ;; This function is called by:
   996 ;;		_putIntLCD
   997 ;; This function uses a non-reentrant model
   998 ;;
   999                           
  1000                           	psect	text3
  1001  000CCC                     __ptext3:
  1002                           	opt stack 0
  1003  000CCC                     _sprintf:
  1004                           	opt stack 25
  1005                           
  1006                           ;doprnt.c: 494: va_list ap;
  1007                           ;doprnt.c: 499: signed char c;
  1008                           ;doprnt.c: 501: int width;
  1009                           ;doprnt.c: 506: signed char prec;
  1010                           ;doprnt.c: 508: unsigned char flag;
  1011                           ;doprnt.c: 523: union {
  1012                           ;doprnt.c: 524: unsigned long vd;
  1013                           ;doprnt.c: 525: double integ;
  1014                           ;doprnt.c: 526: } tmpval;
  1015                           ;doprnt.c: 528: unsigned int val;
  1016                           ;doprnt.c: 529: unsigned len;
  1017                           ;doprnt.c: 530: const char * cp;
  1018                           ;doprnt.c: 533: *ap = __va_start();
  1019                           
  1020                           ;incstack = 0
  1021  000CCC  0E30               	movlw	low (?_sprintf+4)
  1022  000CCE  0100               	movlb	0	; () banked
  1023  000CD0  6F60               	movwf	sprintf@ap& (0+255),b
  1024  000CD2  0E00               	movlw	high (?_sprintf+4)
  1025  000CD4  0100               	movlb	0	; () banked
  1026  000CD6  6F61               	movwf	(sprintf@ap+1)& (0+255),b
  1027                           
  1028                           ;doprnt.c: 536: while(c = *f++) {
  1029  000CD8  D17A               	goto	l4247
  1030  000CDA                     l4141:
  1031                           
  1032                           ; BSR set to: 0
  1033                           ;doprnt.c: 538: if(c != '%')
  1034  000CDA  0E25               	movlw	37
  1035  000CDC  0100               	movlb	0	; () banked
  1036  000CDE  1968               	xorwf	sprintf@c& (0+255),w,b
  1037  000CE0  B4D8               	btfsc	status,2,c
  1038  000CE2  D009               	goto	l4147
  1039                           
  1040                           ; BSR set to: 0
  1041                           ;doprnt.c: 540: {
  1042                           ;doprnt.c: 541: ((*sp++ = (c)));
  1043  000CE4  C02C  FFD9         	movff	sprintf@sp,fsr2l
  1044  000CE8  C02D  FFDA         	movff	sprintf@sp+1,fsr2h
  1045  000CEC  C068  FFDF         	movff	sprintf@c,indf2
  1046                           
  1047                           ; BSR set to: 0
  1048  000CF0  4A2C               	infsnz	sprintf@sp,f,c
  1049  000CF2  2A2D               	incf	sprintf@sp+1,f,c
  1050                           
  1051                           ;doprnt.c: 542: continue;
  1052  000CF4  D16C               	goto	l4247
  1053  000CF6                     l4147:
  1054                           
  1055                           ; BSR set to: 0
  1056                           ;doprnt.c: 543: }
  1057                           ;doprnt.c: 546: width = 0;
  1058  000CF6  0E00               	movlw	0
  1059  000CF8  0100               	movlb	0	; () banked
  1060  000CFA  6F67               	movwf	(sprintf@width+1)& (0+255),b
  1061  000CFC  0E00               	movlw	0
  1062  000CFE  6F66               	movwf	sprintf@width& (0+255),b
  1063                           
  1064                           ;doprnt.c: 548: flag = 0;
  1065  000D00  0E00               	movlw	0
  1066  000D02  0100               	movlb	0	; () banked
  1067  000D04  6F65               	movwf	sprintf@flag& (0+255),b
  1068                           
  1069                           ; BSR set to: 0
  1070                           ;doprnt.c: 551: switch(*f) {
  1071                           
  1072                           ;doprnt.c: 550: for(;;) {
  1073  000D06  D006               	goto	l4153
  1074  000D08                     l4149:
  1075                           
  1076                           ;doprnt.c: 580: flag |= 0x04;
  1077  000D08  0100               	movlb	0	; () banked
  1078  000D0A  8565               	bsf	sprintf@flag& (0+255),2,b
  1079                           
  1080                           ;doprnt.c: 581: f++;
  1081  000D0C  4A2E               	infsnz	sprintf@f,f,c
  1082  000D0E  2A2F               	incf	sprintf@f+1,f,c
  1083                           
  1084                           ;doprnt.c: 582: continue;
  1085  000D10  D001               	goto	l4153
  1086                           
  1087                           ; BSR set to: 0
  1088                           ;doprnt.c: 584: }
  1089  000D12  D00B               	goto	l4155
  1090  000D14                     l4153:
  1091  000D14  C02E  FFF6         	movff	sprintf@f,tblptrl
  1092  000D18  C02F  FFF7         	movff	sprintf@f+1,tblptrh
  1093  000D1C                     	if	0	;tblptru may be non-zero
  1094  000D1C                     	endif
  1095  000D1C                     	if	0	;tblptru may be non-zero
  1096  000D1C                     	endif
  1097  000D1C  0008               	tblrd		*
  1098  000D1E  50F5               	movf	tablat,w,c
  1099                           
  1100                           ; Switch size 1, requested type "space"
  1101                           ; Number of cases is 1, Range of values is 48 to 48
  1102                           ; switch strategies available:
  1103                           ; Name         Instructions Cycles
  1104                           ; simple_byte            4     3 (average)
  1105                           ;	Chosen strategy is simple_byte
  1106  000D20  0A30               	xorlw	48	; case 48
  1107  000D22  B4D8               	btfsc	status,2,c
  1108  000D24  D7F1               	goto	l4149
  1109                           
  1110                           ;doprnt.c: 585: break;
  1111  000D26  D001               	goto	l4155
  1112                           
  1113                           ;doprnt.c: 586: }
  1114  000D28  D7F5               	goto	l4153
  1115  000D2A                     l4155:
  1116                           
  1117                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1118  000D2A  C02E  FFF6         	movff	sprintf@f,tblptrl
  1119  000D2E  C02F  FFF7         	movff	sprintf@f+1,tblptrh
  1120  000D32                     	if	0	;tblptru may be non-zero
  1121  000D32                     	endif
  1122  000D32                     	if	0	;tblptru may be non-zero
  1123  000D32                     	endif
  1124  000D32  0008               	tblrd		*
  1125  000D34  50F5               	movf	tablat,w,c
  1126  000D36  ECBE  F00C         	call	_isdigit
  1127  000D3A  A0D8               	btfss	status,0,c
  1128  000D3C  D03C               	goto	l4169
  1129                           
  1130                           ;doprnt.c: 598: width = 0;
  1131  000D3E  0E00               	movlw	0
  1132  000D40  0100               	movlb	0	; () banked
  1133  000D42  6F67               	movwf	(sprintf@width+1)& (0+255),b
  1134  000D44  0E00               	movlw	0
  1135  000D46  6F66               	movwf	sprintf@width& (0+255),b
  1136  000D48  D000               	goto	l4159
  1137  000D4A                     l4159:
  1138                           
  1139                           ;doprnt.c: 600: width *= 10;
  1140  000D4A  C066  F020         	movff	sprintf@width,___wmul@multiplier
  1141  000D4E  C067  F021         	movff	sprintf@width+1,___wmul@multiplier+1
  1142  000D52  0E00               	movlw	0
  1143  000D54  6E23               	movwf	___wmul@multiplicand+1,c
  1144  000D56  0E0A               	movlw	10
  1145  000D58  6E22               	movwf	___wmul@multiplicand,c
  1146  000D5A  EC99  F00C         	call	___wmul	;wreg free
  1147  000D5E  C020  F066         	movff	?___wmul,sprintf@width
  1148  000D62  C021  F067         	movff	?___wmul+1,sprintf@width+1
  1149                           
  1150                           ;doprnt.c: 601: width += *f++ - '0';
  1151  000D66  0ED0               	movlw	208
  1152  000D68  6E32               	movwf	??_sprintf& (0+255),c
  1153  000D6A  0EFF               	movlw	255
  1154  000D6C  6E33               	movwf	(??_sprintf+1)& (0+255),c
  1155  000D6E  C02E  FFF6         	movff	sprintf@f,tblptrl
  1156  000D72  C02F  FFF7         	movff	sprintf@f+1,tblptrh
  1157  000D76                     	if	0	;tblptru may be non-zero
  1158  000D76                     	endif
  1159  000D76                     	if	0	;tblptru may be non-zero
  1160  000D76                     	endif
  1161  000D76  0008               	tblrd		*
  1162  000D78  50F5               	movf	tablat,w,c
  1163  000D7A  6E34               	movwf	(??_sprintf+2)& (0+255),c
  1164  000D7C  6A35               	clrf	(??_sprintf+3)& (0+255),c
  1165  000D7E  5032               	movf	??_sprintf,w,c
  1166  000D80  2634               	addwf	??_sprintf+2,f,c
  1167  000D82  5033               	movf	??_sprintf+1,w,c
  1168  000D84  2235               	addwfc	??_sprintf+3,f,c
  1169  000D86  5034               	movf	??_sprintf+2,w,c
  1170  000D88  0100               	movlb	0	; () banked
  1171  000D8A  2766               	addwf	sprintf@width& (0+255),f,b
  1172  000D8C  5035               	movf	??_sprintf+3,w,c
  1173  000D8E  0100               	movlb	0	; () banked
  1174  000D90  2367               	addwfc	(sprintf@width+1)& (0+255),f,b
  1175                           
  1176                           ; BSR set to: 0
  1177  000D92  4A2E               	infsnz	sprintf@f,f,c
  1178  000D94  2A2F               	incf	sprintf@f+1,f,c
  1179                           
  1180                           ; BSR set to: 0
  1181                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1182  000D96  C02E  FFF6         	movff	sprintf@f,tblptrl
  1183  000D9A  C02F  FFF7         	movff	sprintf@f+1,tblptrh
  1184  000D9E                     	if	0	;tblptru may be non-zero
  1185  000D9E                     	endif
  1186  000D9E                     	if	0	;tblptru may be non-zero
  1187  000D9E                     	endif
  1188  000D9E  0008               	tblrd		*
  1189  000DA0  50F5               	movf	tablat,w,c
  1190  000DA2  ECBE  F00C         	call	_isdigit
  1191  000DA6  A0D8               	btfss	status,0,c
  1192  000DA8  D006               	goto	l4169
  1193  000DAA  D7CF               	goto	l4159
  1194                           
  1195                           ;doprnt.c: 608: }
  1196                           ;doprnt.c: 635: switch(c = *f++) {
  1197  000DAC  D004               	goto	l4169
  1198                           
  1199                           ;doprnt.c: 638: goto alldone;
  1200                           
  1201                           ;doprnt.c: 637: case 0:
  1202  000DAE  D11E               	goto	l4249
  1203                           
  1204                           ;doprnt.c: 698: case 'i':
  1205                           ;doprnt.c: 699: break;
  1206                           
  1207                           ;doprnt.c: 697: case 'd':
  1208  000DB0  D016               	goto	l4171
  1209                           
  1210                           ;doprnt.c: 813: continue;
  1211                           
  1212                           ;doprnt.c: 802: default:
  1213  000DB2  D10D               	goto	l4247
  1214                           
  1215                           ;doprnt.c: 822: }
  1216  000DB4  D014               	goto	l4171
  1217  000DB6                     l4169:
  1218  000DB6  C02E  FFF6         	movff	sprintf@f,tblptrl
  1219  000DBA  C02F  FFF7         	movff	sprintf@f+1,tblptrh
  1220  000DBE  4A2E               	infsnz	sprintf@f,f,c
  1221  000DC0  2A2F               	incf	sprintf@f+1,f,c
  1222  000DC2                     	if	0	;tblptru may be non-zero
  1223  000DC2                     	endif
  1224  000DC2                     	if	0	;tblptru may be non-zero
  1225  000DC2                     	endif
  1226  000DC2  0008               	tblrd		*
  1227  000DC4  CFF5 F068          	movff	tablat,sprintf@c
  1228  000DC8  0100               	movlb	0	; () banked
  1229  000DCA  5168               	movf	sprintf@c& (0+255),w,b
  1230                           
  1231                           ; Switch size 1, requested type "space"
  1232                           ; Number of cases is 3, Range of values is 0 to 105
  1233                           ; switch strategies available:
  1234                           ; Name         Instructions Cycles
  1235                           ; simple_byte           10     6 (average)
  1236                           ;	Chosen strategy is simple_byte
  1237  000DCC  0A00               	xorlw	0	; case 0
  1238  000DCE  B4D8               	btfsc	status,2,c
  1239  000DD0  D10D               	goto	l4249
  1240  000DD2  0A64               	xorlw	100	; case 100
  1241  000DD4  B4D8               	btfsc	status,2,c
  1242  000DD6  D003               	goto	l4171
  1243  000DD8  0A0D               	xorlw	13	; case 105
  1244  000DDA  A4D8               	btfss	status,2,c
  1245  000DDC  D0F8               	goto	l4247
  1246  000DDE                     l4171:
  1247                           
  1248                           ;doprnt.c: 1253: {
  1249                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1250  000DDE  C060  FFD9         	movff	sprintf@ap,fsr2l
  1251  000DE2  C061  FFDA         	movff	sprintf@ap+1,fsr2h
  1252  000DE6  CFDE F063          	movff	postinc2,sprintf@val
  1253  000DEA  CFDD F064          	movff	postdec2,sprintf@val+1
  1254  000DEE  0E02               	movlw	2
  1255  000DF0  0100               	movlb	0	; () banked
  1256  000DF2  2760               	addwf	sprintf@ap& (0+255),f,b
  1257  000DF4  0E00               	movlw	0
  1258  000DF6  2361               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1259                           
  1260                           ; BSR set to: 0
  1261                           ;doprnt.c: 1261: if((int)val < 0) {
  1262  000DF8  0100               	movlb	0	; () banked
  1263  000DFA  AF64               	btfss	(sprintf@val+1)& (0+255),7,b
  1264  000DFC  D009               	goto	l4181
  1265                           
  1266                           ; BSR set to: 0
  1267                           ;doprnt.c: 1262: flag |= 0x03;
  1268  000DFE  0E03               	movlw	3
  1269  000E00  0100               	movlb	0	; () banked
  1270  000E02  1365               	iorwf	sprintf@flag& (0+255),f,b
  1271                           
  1272                           ; BSR set to: 0
  1273                           ;doprnt.c: 1263: val = -val;
  1274  000E04  0100               	movlb	0	; () banked
  1275  000E06  6D63               	negf	sprintf@val& (0+255),b
  1276  000E08  1F64               	comf	(sprintf@val+1)& (0+255),f,b
  1277  000E0A  B0D8               	btfsc	status,0,c
  1278  000E0C  2B64               	incf	(sprintf@val+1)& (0+255),f,b
  1279  000E0E  D000               	goto	l4181
  1280  000E10                     l4181:
  1281                           
  1282                           ; BSR set to: 0
  1283                           ;doprnt.c: 1264: }
  1284                           ;doprnt.c: 1266: }
  1285                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1286  000E10  0E01               	movlw	1
  1287  000E12  0100               	movlb	0	; () banked
  1288  000E14  6F68               	movwf	sprintf@c& (0+255),b
  1289  000E16                     l4183:
  1290                           
  1291                           ; BSR set to: 0
  1292  000E16  0E05               	movlw	5
  1293  000E18  0100               	movlb	0	; () banked
  1294  000E1A  1968               	xorwf	sprintf@c& (0+255),w,b
  1295  000E1C  B4D8               	btfsc	status,2,c
  1296  000E1E  D01A               	goto	l4195
  1297  000E20  D001               	goto	l4187
  1298                           
  1299                           ; BSR set to: 0
  1300  000E22  D018               	goto	l4195
  1301  000E24                     l4187:
  1302                           
  1303                           ; BSR set to: 0
  1304                           ;doprnt.c: 1306: if(val < dpowers[c])
  1305  000E24  0100               	movlb	0	; () banked
  1306  000E26  5168               	movf	sprintf@c& (0+255),w,b
  1307  000E28  0D02               	mullw	2
  1308  000E2A  0E01               	movlw	low _dpowers
  1309  000E2C  24F3               	addwf	prodl,w,c
  1310  000E2E  6EF6               	movwf	tblptrl,c
  1311  000E30  0E06               	movlw	high _dpowers
  1312  000E32  20F4               	addwfc	prodh,w,c
  1313  000E34  6EF7               	movwf	tblptrh,c
  1314  000E36                     	if	0	;There are less than 3 active tblptr bytes
  1315  000E36                     	endif
  1316  000E36  0009               	tblrd		*+
  1317  000E38  50F5               	movf	tablat,w,c
  1318  000E3A  0100               	movlb	0	; () banked
  1319  000E3C  5D63               	subwf	sprintf@val& (0+255),w,b
  1320  000E3E  0009               	tblrd		*+
  1321  000E40  50F5               	movf	tablat,w,c
  1322  000E42  0100               	movlb	0	; () banked
  1323  000E44  5964               	subwfb	(sprintf@val+1)& (0+255),w,b
  1324  000E46  A0D8               	btfss	status,0,c
  1325  000E48  D005               	goto	l4195
  1326  000E4A  D001               	goto	l4191
  1327                           
  1328                           ; BSR set to: 0
  1329                           ;doprnt.c: 1307: break;
  1330  000E4C  D003               	goto	l4195
  1331  000E4E                     l4191:
  1332                           
  1333                           ; BSR set to: 0
  1334  000E4E  0100               	movlb	0	; () banked
  1335  000E50  2B68               	incf	sprintf@c& (0+255),f,b
  1336  000E52  D7E1               	goto	l4183
  1337  000E54                     l4195:
  1338                           
  1339                           ; BSR set to: 0
  1340                           ;doprnt.c: 1345: if(width && flag & 0x03)
  1341  000E54  0100               	movlb	0	; () banked
  1342  000E56  5166               	movf	sprintf@width& (0+255),w,b
  1343  000E58  0100               	movlb	0	; () banked
  1344  000E5A  1167               	iorwf	(sprintf@width+1)& (0+255),w,b
  1345  000E5C  B4D8               	btfsc	status,2,c
  1346  000E5E  D00B               	goto	l4201
  1347                           
  1348                           ; BSR set to: 0
  1349  000E60  C065  F032         	movff	sprintf@flag,??_sprintf
  1350  000E64  0E03               	movlw	3
  1351  000E66  1632               	andwf	??_sprintf,f,c
  1352  000E68  B4D8               	btfsc	status,2,c
  1353  000E6A  D005               	goto	l4201
  1354                           
  1355                           ; BSR set to: 0
  1356                           ;doprnt.c: 1346: width--;
  1357  000E6C  0100               	movlb	0	; () banked
  1358  000E6E  0766               	decf	sprintf@width& (0+255),f,b
  1359  000E70  A0D8               	btfss	status,0,c
  1360  000E72  0767               	decf	(sprintf@width+1)& (0+255),f,b
  1361  000E74  D000               	goto	l4201
  1362  000E76                     l4201:
  1363                           
  1364                           ; BSR set to: 0
  1365                           ;doprnt.c: 1381: if(width > c)
  1366  000E76  0E80               	movlw	128
  1367  000E78  0100               	movlb	0	; () banked
  1368  000E7A  BF68               	btfsc	sprintf@c& (0+255),7,b
  1369  000E7C  0E7F               	movlw	127
  1370  000E7E  6E32               	movwf	??_sprintf& (0+255),c
  1371  000E80  0100               	movlb	0	; () banked
  1372  000E82  5166               	movf	sprintf@width& (0+255),w,b
  1373  000E84  0100               	movlb	0	; () banked
  1374  000E86  5D68               	subwf	sprintf@c& (0+255),w,b
  1375  000E88  0100               	movlb	0	; () banked
  1376  000E8A  5167               	movf	(sprintf@width+1)& (0+255),w,b
  1377  000E8C  0A80               	xorlw	128
  1378  000E8E  5832               	subwfb	??_sprintf& (0+255),w,c
  1379  000E90  B0D8               	btfsc	status,0,c
  1380  000E92  D00B               	goto	l4205
  1381                           
  1382                           ; BSR set to: 0
  1383                           ;doprnt.c: 1382: width -= c;
  1384  000E94  0100               	movlb	0	; () banked
  1385  000E96  5168               	movf	sprintf@c& (0+255),w,b
  1386  000E98  0100               	movlb	0	; () banked
  1387  000E9A  5F66               	subwf	sprintf@width& (0+255),f,b
  1388  000E9C  0E00               	movlw	0
  1389  000E9E  0100               	movlb	0	; () banked
  1390  000EA0  BF68               	btfsc	sprintf@c& (0+255),7,b
  1391  000EA2  0EFF               	movlw	255
  1392  000EA4  0100               	movlb	0	; () banked
  1393  000EA6  5B67               	subwfb	(sprintf@width+1)& (0+255),f,b
  1394  000EA8  D006               	goto	l4207
  1395  000EAA                     l4205:
  1396                           
  1397                           ; BSR set to: 0
  1398                           ;doprnt.c: 1383: else
  1399                           ;doprnt.c: 1384: width = 0;
  1400  000EAA  0E00               	movlw	0
  1401  000EAC  0100               	movlb	0	; () banked
  1402  000EAE  6F67               	movwf	(sprintf@width+1)& (0+255),b
  1403  000EB0  0E00               	movlw	0
  1404  000EB2  6F66               	movwf	sprintf@width& (0+255),b
  1405  000EB4  D000               	goto	l4207
  1406  000EB6                     l4207:
  1407                           
  1408                           ; BSR set to: 0
  1409                           ;doprnt.c: 1387: if(flag & 0x04) {
  1410  000EB6  0100               	movlb	0	; () banked
  1411  000EB8  A565               	btfss	sprintf@flag& (0+255),2,b
  1412  000EBA  D029               	goto	l4223
  1413                           
  1414                           ; BSR set to: 0
  1415                           ;doprnt.c: 1392: if(flag & 0x03)
  1416  000EBC  C065  F032         	movff	sprintf@flag,??_sprintf
  1417  000EC0  0E03               	movlw	3
  1418  000EC2  1632               	andwf	??_sprintf,f,c
  1419  000EC4  B4D8               	btfsc	status,2,c
  1420  000EC6  D009               	goto	l4215
  1421                           
  1422                           ; BSR set to: 0
  1423                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  1424  000EC8  C02C  FFD9         	movff	sprintf@sp,fsr2l
  1425  000ECC  C02D  FFDA         	movff	sprintf@sp+1,fsr2h
  1426  000ED0  0E2D               	movlw	45
  1427  000ED2  6EDF               	movwf	indf2,c
  1428                           
  1429                           ; BSR set to: 0
  1430  000ED4  4A2C               	infsnz	sprintf@sp,f,c
  1431  000ED6  2A2D               	incf	sprintf@sp+1,f,c
  1432  000ED8  D000               	goto	l4215
  1433  000EDA                     l4215:
  1434                           
  1435                           ; BSR set to: 0
  1436                           ;doprnt.c: 1415: if(width)
  1437  000EDA  0100               	movlb	0	; () banked
  1438  000EDC  5166               	movf	sprintf@width& (0+255),w,b
  1439  000EDE  0100               	movlb	0	; () banked
  1440  000EE0  1167               	iorwf	(sprintf@width+1)& (0+255),w,b
  1441  000EE2  B4D8               	btfsc	status,2,c
  1442  000EE4  D03D               	goto	l4237
  1443  000EE6                     l4217:
  1444                           
  1445                           ; BSR set to: 0
  1446                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  1447  000EE6  C02C  FFD9         	movff	sprintf@sp,fsr2l
  1448  000EEA  C02D  FFDA         	movff	sprintf@sp+1,fsr2h
  1449  000EEE  0E30               	movlw	48
  1450  000EF0  6EDF               	movwf	indf2,c
  1451                           
  1452                           ; BSR set to: 0
  1453  000EF2  4A2C               	infsnz	sprintf@sp,f,c
  1454  000EF4  2A2D               	incf	sprintf@sp+1,f,c
  1455                           
  1456                           ; BSR set to: 0
  1457                           ;doprnt.c: 1418: while(--width);
  1458  000EF6  0100               	movlb	0	; () banked
  1459  000EF8  0766               	decf	sprintf@width& (0+255),f,b
  1460  000EFA  A0D8               	btfss	status,0,c
  1461  000EFC  0767               	decf	(sprintf@width+1)& (0+255),f,b
  1462  000EFE  0100               	movlb	0	; () banked
  1463  000F00  5166               	movf	sprintf@width& (0+255),w,b
  1464  000F02  0100               	movlb	0	; () banked
  1465  000F04  1167               	iorwf	(sprintf@width+1)& (0+255),w,b
  1466  000F06  B4D8               	btfsc	status,2,c
  1467  000F08  D02B               	goto	l4237
  1468  000F0A  D7ED               	goto	l4217
  1469                           
  1470                           ; BSR set to: 0
  1471                           ;doprnt.c: 1420: } else
  1472                           
  1473                           ; BSR set to: 0
  1474  000F0C  D029               	goto	l4237
  1475  000F0E                     l4223:
  1476                           
  1477                           ; BSR set to: 0
  1478                           ;doprnt.c: 1422: {
  1479                           ;doprnt.c: 1424: if(width
  1480                           ;doprnt.c: 1428: )
  1481  000F0E  0100               	movlb	0	; () banked
  1482  000F10  5166               	movf	sprintf@width& (0+255),w,b
  1483  000F12  0100               	movlb	0	; () banked
  1484  000F14  1167               	iorwf	(sprintf@width+1)& (0+255),w,b
  1485  000F16  B4D8               	btfsc	status,2,c
  1486  000F18  D014               	goto	l4231
  1487  000F1A                     l4225:
  1488                           
  1489                           ; BSR set to: 0
  1490                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  1491  000F1A  C02C  FFD9         	movff	sprintf@sp,fsr2l
  1492  000F1E  C02D  FFDA         	movff	sprintf@sp+1,fsr2h
  1493  000F22  0E20               	movlw	32
  1494  000F24  6EDF               	movwf	indf2,c
  1495                           
  1496                           ; BSR set to: 0
  1497  000F26  4A2C               	infsnz	sprintf@sp,f,c
  1498  000F28  2A2D               	incf	sprintf@sp+1,f,c
  1499                           
  1500                           ; BSR set to: 0
  1501                           ;doprnt.c: 1431: while(--width);
  1502  000F2A  0100               	movlb	0	; () banked
  1503  000F2C  0766               	decf	sprintf@width& (0+255),f,b
  1504  000F2E  A0D8               	btfss	status,0,c
  1505  000F30  0767               	decf	(sprintf@width+1)& (0+255),f,b
  1506  000F32  0100               	movlb	0	; () banked
  1507  000F34  5166               	movf	sprintf@width& (0+255),w,b
  1508  000F36  0100               	movlb	0	; () banked
  1509  000F38  1167               	iorwf	(sprintf@width+1)& (0+255),w,b
  1510  000F3A  B4D8               	btfsc	status,2,c
  1511  000F3C  D002               	goto	l4231
  1512  000F3E  D7ED               	goto	l4225
  1513                           
  1514                           ; BSR set to: 0
  1515  000F40  D000               	goto	l4231
  1516  000F42                     l4231:
  1517                           
  1518                           ; BSR set to: 0
  1519                           ;doprnt.c: 1438: if(flag & 0x03)
  1520  000F42  C065  F032         	movff	sprintf@flag,??_sprintf
  1521  000F46  0E03               	movlw	3
  1522  000F48  1632               	andwf	??_sprintf,f,c
  1523  000F4A  B4D8               	btfsc	status,2,c
  1524  000F4C  D009               	goto	l4237
  1525                           
  1526                           ; BSR set to: 0
  1527                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  1528  000F4E  C02C  FFD9         	movff	sprintf@sp,fsr2l
  1529  000F52  C02D  FFDA         	movff	sprintf@sp+1,fsr2h
  1530  000F56  0E2D               	movlw	45
  1531  000F58  6EDF               	movwf	indf2,c
  1532                           
  1533                           ; BSR set to: 0
  1534  000F5A  4A2C               	infsnz	sprintf@sp,f,c
  1535  000F5C  2A2D               	incf	sprintf@sp+1,f,c
  1536                           
  1537                           ; BSR set to: 0
  1538  000F5E  D000               	goto	l4237
  1539  000F60                     l4237:
  1540                           
  1541                           ; BSR set to: 0
  1542                           ;doprnt.c: 1469: }
  1543                           ;doprnt.c: 1472: prec = c;
  1544  000F60  C068  F062         	movff	sprintf@c,sprintf@prec
  1545                           
  1546                           ;doprnt.c: 1474: while(prec--) {
  1547  000F64  D02C               	goto	l4245
  1548  000F66                     l4239:
  1549                           
  1550                           ; BSR set to: 0
  1551                           ;doprnt.c: 1478: {
  1552                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1553  000F66  0100               	movlb	0	; () banked
  1554  000F68  5162               	movf	sprintf@prec& (0+255),w,b
  1555  000F6A  0D02               	mullw	2
  1556  000F6C  0E01               	movlw	low _dpowers
  1557  000F6E  24F3               	addwf	prodl,w,c
  1558  000F70  6EF6               	movwf	tblptrl,c
  1559  000F72  0E06               	movlw	high _dpowers
  1560  000F74  20F4               	addwfc	prodh,w,c
  1561  000F76  6EF7               	movwf	tblptrh,c
  1562  000F78                     	if	0	;There are less than 3 active tblptr bytes
  1563  000F78                     	endif
  1564  000F78  0009               	tblrd		*+
  1565  000F7A  CFF5 F022          	movff	tablat,___lwdiv@divisor
  1566  000F7E  000A               	tblrd		*-
  1567  000F80  CFF5 F023          	movff	tablat,___lwdiv@divisor+1
  1568  000F84  C063  F020         	movff	sprintf@val,___lwdiv@dividend
  1569  000F88  C064  F021         	movff	sprintf@val+1,___lwdiv@dividend+1
  1570  000F8C  EC4A  F00B         	call	___lwdiv	;wreg free
  1571  000F90  C020  F027         	movff	?___lwdiv,___lwmod@dividend
  1572  000F94  C021  F028         	movff	?___lwdiv+1,___lwmod@dividend+1
  1573  000F98  0E00               	movlw	0
  1574  000F9A  6E2A               	movwf	___lwmod@divisor+1,c
  1575  000F9C  0E0A               	movlw	10
  1576  000F9E  6E29               	movwf	___lwmod@divisor,c
  1577  000FA0  ECF7  F00B         	call	___lwmod	;wreg free
  1578  000FA4  5027               	movf	?___lwmod,w,c
  1579  000FA6  0F30               	addlw	48
  1580  000FA8  0100               	movlb	0	; () banked
  1581  000FAA  6F68               	movwf	sprintf@c& (0+255),b
  1582                           
  1583                           ; BSR set to: 0
  1584                           ;doprnt.c: 1523: }
  1585                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1586  000FAC  C02C  FFD9         	movff	sprintf@sp,fsr2l
  1587  000FB0  C02D  FFDA         	movff	sprintf@sp+1,fsr2h
  1588  000FB4  C068  FFDF         	movff	sprintf@c,indf2
  1589                           
  1590                           ; BSR set to: 0
  1591  000FB8  4A2C               	infsnz	sprintf@sp,f,c
  1592  000FBA  2A2D               	incf	sprintf@sp+1,f,c
  1593  000FBC  D000               	goto	l4245
  1594  000FBE                     l4245:
  1595                           
  1596                           ; BSR set to: 0
  1597  000FBE  0100               	movlb	0	; () banked
  1598  000FC0  0762               	decf	sprintf@prec& (0+255),f,b
  1599  000FC2  0100               	movlb	0	; () banked
  1600  000FC4  2962               	incf	sprintf@prec& (0+255),w,b
  1601  000FC6  B4D8               	btfsc	status,2,c
  1602  000FC8  D002               	goto	l4247
  1603  000FCA  D7CD               	goto	l4239
  1604                           
  1605                           ; BSR set to: 0
  1606  000FCC  D000               	goto	l4247
  1607  000FCE                     l4247:
  1608  000FCE  C02E  FFF6         	movff	sprintf@f,tblptrl
  1609  000FD2  C02F  FFF7         	movff	sprintf@f+1,tblptrh
  1610  000FD6  4A2E               	infsnz	sprintf@f,f,c
  1611  000FD8  2A2F               	incf	sprintf@f+1,f,c
  1612  000FDA                     	if	0	;tblptru may be non-zero
  1613  000FDA                     	endif
  1614  000FDA                     	if	0	;tblptru may be non-zero
  1615  000FDA                     	endif
  1616  000FDA  0008               	tblrd		*
  1617  000FDC  CFF5 F068          	movff	tablat,sprintf@c
  1618  000FE0  0100               	movlb	0	; () banked
  1619  000FE2  5168               	movf	sprintf@c& (0+255),w,b
  1620  000FE4  B4D8               	btfsc	status,2,c
  1621  000FE6  D002               	goto	l4249
  1622  000FE8  D678               	goto	l4141
  1623                           
  1624                           ; BSR set to: 0
  1625  000FEA  D000               	goto	l4249
  1626  000FEC                     l4249:
  1627                           
  1628                           ;doprnt.c: 1538: *sp = 0;
  1629  000FEC  C02C  FFD9         	movff	sprintf@sp,fsr2l
  1630  000FF0  C02D  FFDA         	movff	sprintf@sp+1,fsr2h
  1631  000FF4  0E00               	movlw	0
  1632  000FF6  6EDF               	movwf	indf2,c
  1633  000FF8  0012               	return	
  1634                           
  1635                           ;doprnt.c: 1540: return 0;
  1636                           ;	Return value of _sprintf is never used
  1637  000FFA  0012               	return		;funcret
  1638  000FFC                     __end_of_sprintf:
  1639                           	opt stack 0
  1640                           tblptru	equ	0xFF8
  1641                           tblptrh	equ	0xFF7
  1642                           tblptrl	equ	0xFF6
  1643                           tablat	equ	0xFF5
  1644                           prodh	equ	0xFF4
  1645                           prodl	equ	0xFF3
  1646                           indf2	equ	0xFDF
  1647                           postinc2	equ	0xFDE
  1648                           postdec2	equ	0xFDD
  1649                           fsr2h	equ	0xFDA
  1650                           fsr2l	equ	0xFD9
  1651                           status	equ	0xFD8
  1652                           
  1653 ;; *************** function _isdigit *****************
  1654 ;; Defined at:
  1655 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  1656 ;; Parameters:    Size  Location     Type
  1657 ;;  c               1    wreg     unsigned char 
  1658 ;; Auto vars:     Size  Location     Type
  1659 ;;  c               1   33[COMRAM] unsigned char 
  1660 ;; Return value:  Size  Location     Type
  1661 ;;		None               void
  1662 ;; Registers used:
  1663 ;;		wreg, status,2, status,0
  1664 ;; Tracked objects:
  1665 ;;		On entry : 0/0
  1666 ;;		On exit  : 0/0
  1667 ;;		Unchanged: 0/0
  1668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1669 ;;      Params:         0       0       0       0       0       0       0
  1670 ;;      Locals:         2       0       0       0       0       0       0
  1671 ;;      Temps:          1       0       0       0       0       0       0
  1672 ;;      Totals:         3       0       0       0       0       0       0
  1673 ;;Total ram usage:        3 bytes
  1674 ;; Hardware stack levels used:    1
  1675 ;; Hardware stack levels required when called:    2
  1676 ;; This function calls:
  1677 ;;		Nothing
  1678 ;; This function is called by:
  1679 ;;		_sprintf
  1680 ;; This function uses a non-reentrant model
  1681 ;;
  1682                           
  1683                           	psect	text4
  1684  00197C                     __ptext4:
  1685                           	opt stack 0
  1686  00197C                     _isdigit:
  1687                           	opt stack 25
  1688                           
  1689                           ;incstack = 0
  1690                           ;isdigit@c stored from wreg
  1691  00197C  6E22               	movwf	isdigit@c,c
  1692  00197E  0E00               	movlw	0
  1693  001980  6E21               	movwf	_isdigit$1370,c
  1694  001982  0E3A               	movlw	58
  1695  001984  6022               	cpfslt	isdigit@c,c
  1696  001986  D006               	goto	l4091
  1697  001988  0E2F               	movlw	47
  1698  00198A  6422               	cpfsgt	isdigit@c,c
  1699  00198C  D003               	goto	l4091
  1700  00198E  0E01               	movlw	1
  1701  001990  6E21               	movwf	_isdigit$1370,c
  1702  001992  D000               	goto	l4091
  1703  001994                     l4091:
  1704  001994  C021  F020         	movff	_isdigit$1370,??_isdigit
  1705  001998  3020               	rrcf	??_isdigit,w,c
  1706  00199A  0012               	return	
  1707  00199C  0012               	return		;funcret
  1708  00199E                     __end_of_isdigit:
  1709                           	opt stack 0
  1710                           tblptru	equ	0xFF8
  1711                           tblptrh	equ	0xFF7
  1712                           tblptrl	equ	0xFF6
  1713                           tablat	equ	0xFF5
  1714                           prodh	equ	0xFF4
  1715                           prodl	equ	0xFF3
  1716                           indf2	equ	0xFDF
  1717                           postinc2	equ	0xFDE
  1718                           postdec2	equ	0xFDD
  1719                           fsr2h	equ	0xFDA
  1720                           fsr2l	equ	0xFD9
  1721                           status	equ	0xFD8
  1722                           
  1723 ;; *************** function ___wmul *****************
  1724 ;; Defined at:
  1725 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  1726 ;; Parameters:    Size  Location     Type
  1727 ;;  multiplier      2   31[COMRAM] unsigned int 
  1728 ;;  multiplicand    2   33[COMRAM] unsigned int 
  1729 ;; Auto vars:     Size  Location     Type
  1730 ;;  product         2   35[COMRAM] unsigned int 
  1731 ;; Return value:  Size  Location     Type
  1732 ;;                  2   31[COMRAM] unsigned int 
  1733 ;; Registers used:
  1734 ;;		wreg, status,2, status,0, prodl, prodh
  1735 ;; Tracked objects:
  1736 ;;		On entry : 0/0
  1737 ;;		On exit  : 0/0
  1738 ;;		Unchanged: 0/0
  1739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1740 ;;      Params:         4       0       0       0       0       0       0
  1741 ;;      Locals:         2       0       0       0       0       0       0
  1742 ;;      Temps:          0       0       0       0       0       0       0
  1743 ;;      Totals:         6       0       0       0       0       0       0
  1744 ;;Total ram usage:        6 bytes
  1745 ;; Hardware stack levels used:    1
  1746 ;; Hardware stack levels required when called:    2
  1747 ;; This function calls:
  1748 ;;		Nothing
  1749 ;; This function is called by:
  1750 ;;		_sprintf
  1751 ;; This function uses a non-reentrant model
  1752 ;;
  1753                           
  1754                           	psect	text5
  1755  001932                     __ptext5:
  1756                           	opt stack 0
  1757  001932                     ___wmul:
  1758                           	opt stack 25
  1759                           
  1760                           ;incstack = 0
  1761  001932  5020               	movf	___wmul@multiplier,w,c
  1762  001934  0222               	mulwf	___wmul@multiplicand,c
  1763  001936  CFF3 F024          	movff	prodl,___wmul@product
  1764  00193A  CFF4 F025          	movff	prodh,___wmul@product+1
  1765  00193E  5020               	movf	___wmul@multiplier,w,c
  1766  001940  0223               	mulwf	___wmul@multiplicand+1,c
  1767  001942  50F3               	movf	prodl,w,c
  1768  001944  2625               	addwf	___wmul@product+1,f,c
  1769  001946  5021               	movf	___wmul@multiplier+1,w,c
  1770  001948  0222               	mulwf	___wmul@multiplicand,c
  1771  00194A  50F3               	movf	prodl,w,c
  1772  00194C  2625               	addwf	___wmul@product+1,f,c
  1773  00194E  C024  F020         	movff	___wmul@product,?___wmul
  1774  001952  C025  F021         	movff	___wmul@product+1,?___wmul+1
  1775  001956  0012               	return	
  1776  001958  0012               	return		;funcret
  1777  00195A                     __end_of___wmul:
  1778                           	opt stack 0
  1779                           tblptru	equ	0xFF8
  1780                           tblptrh	equ	0xFF7
  1781                           tblptrl	equ	0xFF6
  1782                           tablat	equ	0xFF5
  1783                           prodh	equ	0xFF4
  1784                           prodl	equ	0xFF3
  1785                           indf2	equ	0xFDF
  1786                           postinc2	equ	0xFDE
  1787                           postdec2	equ	0xFDD
  1788                           fsr2h	equ	0xFDA
  1789                           fsr2l	equ	0xFD9
  1790                           status	equ	0xFD8
  1791                           
  1792 ;; *************** function ___lwmod *****************
  1793 ;; Defined at:
  1794 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  1795 ;; Parameters:    Size  Location     Type
  1796 ;;  dividend        2   38[COMRAM] unsigned int 
  1797 ;;  divisor         2   40[COMRAM] unsigned int 
  1798 ;; Auto vars:     Size  Location     Type
  1799 ;;  counter         1   42[COMRAM] unsigned char 
  1800 ;; Return value:  Size  Location     Type
  1801 ;;                  2   38[COMRAM] unsigned int 
  1802 ;; Registers used:
  1803 ;;		wreg, status,2, status,0
  1804 ;; Tracked objects:
  1805 ;;		On entry : 0/0
  1806 ;;		On exit  : 0/0
  1807 ;;		Unchanged: 0/0
  1808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1809 ;;      Params:         4       0       0       0       0       0       0
  1810 ;;      Locals:         1       0       0       0       0       0       0
  1811 ;;      Temps:          0       0       0       0       0       0       0
  1812 ;;      Totals:         5       0       0       0       0       0       0
  1813 ;;Total ram usage:        5 bytes
  1814 ;; Hardware stack levels used:    1
  1815 ;; Hardware stack levels required when called:    2
  1816 ;; This function calls:
  1817 ;;		Nothing
  1818 ;; This function is called by:
  1819 ;;		_sprintf
  1820 ;; This function uses a non-reentrant model
  1821 ;;
  1822                           
  1823                           	psect	text6
  1824  0017EE                     __ptext6:
  1825                           	opt stack 0
  1826  0017EE                     ___lwmod:
  1827                           	opt stack 25
  1828                           
  1829                           ;incstack = 0
  1830  0017EE  5029               	movf	___lwmod@divisor,w,c
  1831  0017F0  102A               	iorwf	___lwmod@divisor+1,w,c
  1832  0017F2  B4D8               	btfsc	status,2,c
  1833  0017F4  D01D               	goto	l1122
  1834  0017F6  0E01               	movlw	1
  1835  0017F8  6E2B               	movwf	___lwmod@counter,c
  1836  0017FA  D005               	goto	l4129
  1837  0017FC                     l4127:
  1838  0017FC  90D8               	bcf	status,0,c
  1839  0017FE  3629               	rlcf	___lwmod@divisor,f,c
  1840  001800  362A               	rlcf	___lwmod@divisor+1,f,c
  1841  001802  2A2B               	incf	___lwmod@counter,f,c
  1842  001804  D000               	goto	l4129
  1843  001806                     l4129:
  1844  001806  BE2A               	btfsc	___lwmod@divisor+1,7,c
  1845  001808  D002               	goto	l4131
  1846  00180A  D7F8               	goto	l4127
  1847  00180C  D000               	goto	l4131
  1848  00180E                     l4131:
  1849  00180E  5029               	movf	___lwmod@divisor,w,c
  1850  001810  5C27               	subwf	___lwmod@dividend,w,c
  1851  001812  502A               	movf	___lwmod@divisor+1,w,c
  1852  001814  5828               	subwfb	___lwmod@dividend+1,w,c
  1853  001816  A0D8               	btfss	status,0,c
  1854  001818  D005               	goto	l4135
  1855  00181A  5029               	movf	___lwmod@divisor,w,c
  1856  00181C  5E27               	subwf	___lwmod@dividend,f,c
  1857  00181E  502A               	movf	___lwmod@divisor+1,w,c
  1858  001820  5A28               	subwfb	___lwmod@dividend+1,f,c
  1859  001822  D000               	goto	l4135
  1860  001824                     l4135:
  1861  001824  90D8               	bcf	status,0,c
  1862  001826  322A               	rrcf	___lwmod@divisor+1,f,c
  1863  001828  3229               	rrcf	___lwmod@divisor,f,c
  1864  00182A  2E2B               	decfsz	___lwmod@counter,f,c
  1865  00182C  D7F0               	goto	l4131
  1866  00182E  D000               	goto	l1122
  1867  001830                     l1122:
  1868  001830  C027  F027         	movff	___lwmod@dividend,?___lwmod
  1869  001834  C028  F028         	movff	___lwmod@dividend+1,?___lwmod+1
  1870  001838  0012               	return		;funcret
  1871  00183A                     __end_of___lwmod:
  1872                           	opt stack 0
  1873                           tblptru	equ	0xFF8
  1874                           tblptrh	equ	0xFF7
  1875                           tblptrl	equ	0xFF6
  1876                           tablat	equ	0xFF5
  1877                           prodh	equ	0xFF4
  1878                           prodl	equ	0xFF3
  1879                           indf2	equ	0xFDF
  1880                           postinc2	equ	0xFDE
  1881                           postdec2	equ	0xFDD
  1882                           fsr2h	equ	0xFDA
  1883                           fsr2l	equ	0xFD9
  1884                           status	equ	0xFD8
  1885                           
  1886 ;; *************** function ___lwdiv *****************
  1887 ;; Defined at:
  1888 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  1889 ;; Parameters:    Size  Location     Type
  1890 ;;  dividend        2   31[COMRAM] unsigned int 
  1891 ;;  divisor         2   33[COMRAM] unsigned int 
  1892 ;; Auto vars:     Size  Location     Type
  1893 ;;  quotient        2   36[COMRAM] unsigned int 
  1894 ;;  counter         1   35[COMRAM] unsigned char 
  1895 ;; Return value:  Size  Location     Type
  1896 ;;                  2   31[COMRAM] unsigned int 
  1897 ;; Registers used:
  1898 ;;		wreg, status,2, status,0
  1899 ;; Tracked objects:
  1900 ;;		On entry : 0/0
  1901 ;;		On exit  : 0/0
  1902 ;;		Unchanged: 0/0
  1903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1904 ;;      Params:         4       0       0       0       0       0       0
  1905 ;;      Locals:         3       0       0       0       0       0       0
  1906 ;;      Temps:          0       0       0       0       0       0       0
  1907 ;;      Totals:         7       0       0       0       0       0       0
  1908 ;;Total ram usage:        7 bytes
  1909 ;; Hardware stack levels used:    1
  1910 ;; Hardware stack levels required when called:    2
  1911 ;; This function calls:
  1912 ;;		Nothing
  1913 ;; This function is called by:
  1914 ;;		_sprintf
  1915 ;; This function uses a non-reentrant model
  1916 ;;
  1917                           
  1918                           	psect	text7
  1919  001694                     __ptext7:
  1920                           	opt stack 0
  1921  001694                     ___lwdiv:
  1922                           	opt stack 25
  1923                           
  1924                           ;incstack = 0
  1925  001694  0E00               	movlw	0
  1926  001696  6E26               	movwf	___lwdiv@quotient+1,c
  1927  001698  0E00               	movlw	0
  1928  00169A  6E25               	movwf	___lwdiv@quotient,c
  1929  00169C  5022               	movf	___lwdiv@divisor,w,c
  1930  00169E  1023               	iorwf	___lwdiv@divisor+1,w,c
  1931  0016A0  B4D8               	btfsc	status,2,c
  1932  0016A2  D021               	goto	l1112
  1933  0016A4  0E01               	movlw	1
  1934  0016A6  6E24               	movwf	___lwdiv@counter,c
  1935  0016A8  D005               	goto	l4109
  1936  0016AA                     l4107:
  1937  0016AA  90D8               	bcf	status,0,c
  1938  0016AC  3622               	rlcf	___lwdiv@divisor,f,c
  1939  0016AE  3623               	rlcf	___lwdiv@divisor+1,f,c
  1940  0016B0  2A24               	incf	___lwdiv@counter,f,c
  1941  0016B2  D000               	goto	l4109
  1942  0016B4                     l4109:
  1943  0016B4  BE23               	btfsc	___lwdiv@divisor+1,7,c
  1944  0016B6  D002               	goto	l4111
  1945  0016B8  D7F8               	goto	l4107
  1946  0016BA  D000               	goto	l4111
  1947  0016BC                     l4111:
  1948  0016BC  90D8               	bcf	status,0,c
  1949  0016BE  3625               	rlcf	___lwdiv@quotient,f,c
  1950  0016C0  3626               	rlcf	___lwdiv@quotient+1,f,c
  1951  0016C2  5022               	movf	___lwdiv@divisor,w,c
  1952  0016C4  5C20               	subwf	___lwdiv@dividend,w,c
  1953  0016C6  5023               	movf	___lwdiv@divisor+1,w,c
  1954  0016C8  5821               	subwfb	___lwdiv@dividend+1,w,c
  1955  0016CA  A0D8               	btfss	status,0,c
  1956  0016CC  D006               	goto	l4119
  1957  0016CE  5022               	movf	___lwdiv@divisor,w,c
  1958  0016D0  5E20               	subwf	___lwdiv@dividend,f,c
  1959  0016D2  5023               	movf	___lwdiv@divisor+1,w,c
  1960  0016D4  5A21               	subwfb	___lwdiv@dividend+1,f,c
  1961  0016D6  8025               	bsf	___lwdiv@quotient,0,c
  1962  0016D8  D000               	goto	l4119
  1963  0016DA                     l4119:
  1964  0016DA  90D8               	bcf	status,0,c
  1965  0016DC  3223               	rrcf	___lwdiv@divisor+1,f,c
  1966  0016DE  3222               	rrcf	___lwdiv@divisor,f,c
  1967  0016E0  2E24               	decfsz	___lwdiv@counter,f,c
  1968  0016E2  D7EC               	goto	l4111
  1969  0016E4  D000               	goto	l1112
  1970  0016E6                     l1112:
  1971  0016E6  C025  F020         	movff	___lwdiv@quotient,?___lwdiv
  1972  0016EA  C026  F021         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1973  0016EE  0012               	return		;funcret
  1974  0016F0                     __end_of___lwdiv:
  1975                           	opt stack 0
  1976                           tblptru	equ	0xFF8
  1977                           tblptrh	equ	0xFF7
  1978                           tblptrl	equ	0xFF6
  1979                           tablat	equ	0xFF5
  1980                           prodh	equ	0xFF4
  1981                           prodl	equ	0xFF3
  1982                           indf2	equ	0xFDF
  1983                           postinc2	equ	0xFDE
  1984                           postdec2	equ	0xFDD
  1985                           fsr2h	equ	0xFDA
  1986                           fsr2l	equ	0xFD9
  1987                           status	equ	0xFD8
  1988                           
  1989 ;; *************** function _LCDInitialDisplay *****************
  1990 ;; Defined at:
  1991 ;;		line 10 in file "lcddisplay.c"
  1992 ;; Parameters:    Size  Location     Type
  1993 ;;		None
  1994 ;; Auto vars:     Size  Location     Type
  1995 ;;		None
  1996 ;; Return value:  Size  Location     Type
  1997 ;;		None               void
  1998 ;; Registers used:
  1999 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2000 ;; Tracked objects:
  2001 ;;		On entry : 0/0
  2002 ;;		On exit  : 0/0
  2003 ;;		Unchanged: 0/0
  2004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2005 ;;      Params:         0       0       0       0       0       0       0
  2006 ;;      Locals:         0       0       0       0       0       0       0
  2007 ;;      Temps:          0       0       0       0       0       0       0
  2008 ;;      Totals:         0       0       0       0       0       0       0
  2009 ;;Total ram usage:        0 bytes
  2010 ;; Hardware stack levels used:    1
  2011 ;; Hardware stack levels required when called:    6
  2012 ;; This function calls:
  2013 ;;		_BusyLCD
  2014 ;;		_SetLCDCGRamAddr
  2015 ;;		_SetLCDDDRamAddr
  2016 ;;		_WriteCmdLCD
  2017 ;;		_WriteDataLCD
  2018 ;;		_putLCD
  2019 ;; This function is called by:
  2020 ;;		_main
  2021 ;; This function uses a non-reentrant model
  2022 ;;
  2023                           
  2024                           	psect	text8
  2025  001504                     __ptext8:
  2026                           	opt stack 0
  2027  001504                     _LCDInitialDisplay:
  2028                           	opt stack 24
  2029                           
  2030                           ;lcddisplay.c: 13: SetLCDCGRamAddr(0x00);
  2031                           
  2032                           ;incstack = 0
  2033  001504  0E00               	movlw	0
  2034  001506  EC78  F00B         	call	_SetLCDCGRamAddr
  2035                           
  2036                           ;lcddisplay.c: 14: WriteDataLCD(0b00000);
  2037  00150A  0E00               	movlw	0
  2038  00150C  EC1D  F00C         	call	_WriteDataLCD
  2039                           
  2040                           ;lcddisplay.c: 15: WriteDataLCD(0b01111);
  2041  001510  0E0F               	movlw	15
  2042  001512  EC1D  F00C         	call	_WriteDataLCD
  2043                           
  2044                           ;lcddisplay.c: 16: WriteDataLCD(0b10001);
  2045  001516  0E11               	movlw	17
  2046  001518  EC1D  F00C         	call	_WriteDataLCD
  2047                           
  2048                           ;lcddisplay.c: 17: WriteDataLCD(0b10001);
  2049  00151C  0E11               	movlw	17
  2050  00151E  EC1D  F00C         	call	_WriteDataLCD
  2051                           
  2052                           ;lcddisplay.c: 18: WriteDataLCD(0b10001);
  2053  001522  0E11               	movlw	17
  2054  001524  EC1D  F00C         	call	_WriteDataLCD
  2055                           
  2056                           ;lcddisplay.c: 19: WriteDataLCD(0b01111);
  2057  001528  0E0F               	movlw	15
  2058  00152A  EC1D  F00C         	call	_WriteDataLCD
  2059                           
  2060                           ;lcddisplay.c: 20: WriteDataLCD(0b00111);
  2061  00152E  0E07               	movlw	7
  2062  001530  EC1D  F00C         	call	_WriteDataLCD
  2063                           
  2064                           ;lcddisplay.c: 21: WriteDataLCD(0b00111);
  2065  001534  0E07               	movlw	7
  2066  001536  EC1D  F00C         	call	_WriteDataLCD
  2067                           
  2068                           ;lcddisplay.c: 24: SetLCDCGRamAddr(0x08);
  2069  00153A  0E08               	movlw	8
  2070  00153C  EC78  F00B         	call	_SetLCDCGRamAddr
  2071                           
  2072                           ;lcddisplay.c: 25: WriteDataLCD(0b11111);
  2073  001540  0E1F               	movlw	31
  2074  001542  EC1D  F00C         	call	_WriteDataLCD
  2075                           
  2076                           ;lcddisplay.c: 26: WriteDataLCD(0b10001);
  2077  001546  0E11               	movlw	17
  2078  001548  EC1D  F00C         	call	_WriteDataLCD
  2079                           
  2080                           ;lcddisplay.c: 27: WriteDataLCD(0b10001);
  2081  00154C  0E11               	movlw	17
  2082  00154E  EC1D  F00C         	call	_WriteDataLCD
  2083                           
  2084                           ;lcddisplay.c: 28: WriteDataLCD(0b10101);
  2085  001552  0E15               	movlw	21
  2086  001554  EC1D  F00C         	call	_WriteDataLCD
  2087                           
  2088                           ;lcddisplay.c: 29: WriteDataLCD(0b10001);
  2089  001558  0E11               	movlw	17
  2090  00155A  EC1D  F00C         	call	_WriteDataLCD
  2091                           
  2092                           ;lcddisplay.c: 30: WriteDataLCD(0b10001);
  2093  00155E  0E11               	movlw	17
  2094  001560  EC1D  F00C         	call	_WriteDataLCD
  2095                           
  2096                           ;lcddisplay.c: 31: WriteDataLCD(0b10001);
  2097  001564  0E11               	movlw	17
  2098  001566  EC1D  F00C         	call	_WriteDataLCD
  2099                           
  2100                           ;lcddisplay.c: 32: WriteDataLCD(0b11111);
  2101  00156A  0E1F               	movlw	31
  2102  00156C  EC1D  F00C         	call	_WriteDataLCD
  2103                           
  2104                           ;lcddisplay.c: 34: WriteCmdLCD(0b00000010);
  2105  001570  0E02               	movlw	2
  2106  001572  EC3D  F00C         	call	_WriteCmdLCD
  2107                           
  2108                           ;lcddisplay.c: 35: putLCD( (unsigned char *)" --mph    ---rpm");
  2109  001576  0E0B               	movlw	low STR_1
  2110  001578  6E22               	movwf	putLCD@buffer,c
  2111  00157A  0E06               	movlw	high STR_1
  2112  00157C  6E23               	movwf	putLCD@buffer+1,c
  2113  00157E  EC1A  F00B         	call	_putLCD	;wreg free
  2114                           
  2115                           ;lcddisplay.c: 38: while(BusyLCD());
  2116  001582  D000               	goto	l3131
  2117  001584                     l3131:
  2118  001584  EC7B  F00C         	call	_BusyLCD	;wreg free
  2119  001588  0900               	iorlw	0
  2120  00158A  A4D8               	btfss	status,2,c
  2121  00158C  D7FB               	goto	l3131
  2122                           
  2123                           ;lcddisplay.c: 39: SetLCDDDRamAddr(0x040);
  2124  00158E  0E40               	movlw	64
  2125  001590  ECA5  F00B         	call	_SetLCDDDRamAddr
  2126                           
  2127                           ;lcddisplay.c: 40: putLCD( (unsigned char *)"---pwr    ---pwm");
  2128  001594  0E1C               	movlw	low STR_2
  2129  001596  6E22               	movwf	putLCD@buffer,c
  2130  001598  0E06               	movlw	high STR_2
  2131  00159A  6E23               	movwf	putLCD@buffer+1,c
  2132  00159C  EC1A  F00B         	call	_putLCD	;wreg free
  2133  0015A0  0012               	return		;funcret
  2134  0015A2                     __end_of_LCDInitialDisplay:
  2135                           	opt stack 0
  2136                           tblptru	equ	0xFF8
  2137                           tblptrh	equ	0xFF7
  2138                           tblptrl	equ	0xFF6
  2139                           tablat	equ	0xFF5
  2140                           prodh	equ	0xFF4
  2141                           prodl	equ	0xFF3
  2142                           indf2	equ	0xFDF
  2143                           postinc2	equ	0xFDE
  2144                           postdec2	equ	0xFDD
  2145                           fsr2h	equ	0xFDA
  2146                           fsr2l	equ	0xFD9
  2147                           status	equ	0xFD8
  2148                           
  2149 ;; *************** function _putLCD *****************
  2150 ;; Defined at:
  2151 ;;		line 435 in file "lcddisplay.c"
  2152 ;; Parameters:    Size  Location     Type
  2153 ;;  buffer          2   33[COMRAM] PTR unsigned char 
  2154 ;;		 -> putIntLCD@result_958(3), putIntLCD@result_956(4), putIntLCD@result_954(3), putIntLCD@result(2), 
  2155 ;;		 -> STR_5(8), STR_4(4), STR_3(7), STR_2(17), 
  2156 ;;		 -> STR_1(17), 
  2157 ;; Auto vars:     Size  Location     Type
  2158 ;;		None
  2159 ;; Return value:  Size  Location     Type
  2160 ;;		None               void
  2161 ;; Registers used:
  2162 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2163 ;; Tracked objects:
  2164 ;;		On entry : 0/0
  2165 ;;		On exit  : 0/0
  2166 ;;		Unchanged: 0/0
  2167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2168 ;;      Params:         2       0       0       0       0       0       0
  2169 ;;      Locals:         0       0       0       0       0       0       0
  2170 ;;      Temps:          0       0       0       0       0       0       0
  2171 ;;      Totals:         2       0       0       0       0       0       0
  2172 ;;Total ram usage:        2 bytes
  2173 ;; Hardware stack levels used:    1
  2174 ;; Hardware stack levels required when called:    5
  2175 ;; This function calls:
  2176 ;;		_BusyLCD
  2177 ;;		_WriteDataLCD
  2178 ;; This function is called by:
  2179 ;;		_LCDInitialDisplay
  2180 ;;		_LCDUpdate
  2181 ;;		_putIntLCD
  2182 ;; This function uses a non-reentrant model
  2183 ;;
  2184                           
  2185                           	psect	text9
  2186  001634                     __ptext9:
  2187                           	opt stack 0
  2188  001634                     _putLCD:
  2189                           	opt stack 24
  2190                           
  2191                           ;lcddisplay.c: 437: while(*buffer)
  2192                           
  2193                           ;incstack = 0
  2194  001634  D01B               	goto	l2793
  2195                           
  2196                           ;lcddisplay.c: 438: {
  2197                           ;lcddisplay.c: 439: while(BusyLCD());
  2198  001636  D000               	goto	l2787
  2199  001638                     l2787:
  2200  001638  EC7B  F00C         	call	_BusyLCD	;wreg free
  2201  00163C  0900               	iorlw	0
  2202  00163E  A4D8               	btfss	status,2,c
  2203  001640  D7FB               	goto	l2787
  2204                           
  2205                           ;lcddisplay.c: 440: WriteDataLCD(*buffer);
  2206  001642  C022  FFF6         	movff	putLCD@buffer,tblptrl
  2207  001646  C023  FFF7         	movff	putLCD@buffer+1,tblptrh
  2208  00164A  6AF8               	clrf	tblptru,c
  2209  00164C  0E05               	movlw	(high __ramtop+-1)
  2210  00164E  64F7               	cpfsgt	tblptrh,c
  2211  001650  D003               	bra	u1817
  2212  001652  0008               	tblrd		*
  2213  001654  50F5               	movf	tablat,w,c
  2214  001656  D005               	bra	u1810
  2215  001658                     u1817:
  2216  001658  CFF6 FFE9          	movff	tblptrl,fsr0l
  2217  00165C  CFF7 FFEA          	movff	tblptrh,fsr0h
  2218  001660  50EF               	movf	indf0,w,c
  2219  001662                     u1810:
  2220  001662  EC1D  F00C         	call	_WriteDataLCD
  2221                           
  2222                           ;lcddisplay.c: 441: buffer++;
  2223  001666  4A22               	infsnz	putLCD@buffer,f,c
  2224  001668  2A23               	incf	putLCD@buffer+1,f,c
  2225  00166A  D000               	goto	l2793
  2226  00166C                     l2793:
  2227  00166C  C022  FFF6         	movff	putLCD@buffer,tblptrl
  2228  001670  C023  FFF7         	movff	putLCD@buffer+1,tblptrh
  2229  001674  6AF8               	clrf	tblptru,c
  2230  001676  0E05               	movlw	(high __ramtop+-1)
  2231  001678  64F7               	cpfsgt	tblptrh,c
  2232  00167A  D003               	bra	u1827
  2233  00167C  0008               	tblrd		*
  2234  00167E  50F5               	movf	tablat,w,c
  2235  001680  D005               	bra	u1820
  2236  001682                     u1827:
  2237  001682  CFF6 FFE9          	movff	tblptrl,fsr0l
  2238  001686  CFF7 FFEA          	movff	tblptrh,fsr0h
  2239  00168A  50EF               	movf	indf0,w,c
  2240  00168C                     u1820:
  2241  00168C  0900               	iorlw	0
  2242  00168E  A4D8               	btfss	status,2,c
  2243  001690  D7D3               	goto	l2787
  2244                           
  2245                           ;lcddisplay.c: 442: }
  2246                           ;lcddisplay.c: 443: return;
  2247  001692  0012               	return		;funcret
  2248  001694                     __end_of_putLCD:
  2249                           	opt stack 0
  2250                           tblptru	equ	0xFF8
  2251                           tblptrh	equ	0xFF7
  2252                           tblptrl	equ	0xFF6
  2253                           tablat	equ	0xFF5
  2254                           prodh	equ	0xFF4
  2255                           prodl	equ	0xFF3
  2256                           indf0	equ	0xFEF
  2257                           fsr0h	equ	0xFEA
  2258                           fsr0l	equ	0xFE9
  2259                           indf2	equ	0xFDF
  2260                           postinc2	equ	0xFDE
  2261                           postdec2	equ	0xFDD
  2262                           fsr2h	equ	0xFDA
  2263                           fsr2l	equ	0xFD9
  2264                           status	equ	0xFD8
  2265                           
  2266 ;; *************** function _WriteDataLCD *****************
  2267 ;; Defined at:
  2268 ;;		line 446 in file "lcddisplay.c"
  2269 ;; Parameters:    Size  Location     Type
  2270 ;;  data            1    wreg     unsigned char 
  2271 ;; Auto vars:     Size  Location     Type
  2272 ;;  data            1   32[COMRAM] unsigned char 
  2273 ;; Return value:  Size  Location     Type
  2274 ;;		None               void
  2275 ;; Registers used:
  2276 ;;		wreg, status,2, status,0, cstack
  2277 ;; Tracked objects:
  2278 ;;		On entry : 0/0
  2279 ;;		On exit  : 0/0
  2280 ;;		Unchanged: 0/0
  2281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2282 ;;      Params:         0       0       0       0       0       0       0
  2283 ;;      Locals:         1       0       0       0       0       0       0
  2284 ;;      Temps:          0       0       0       0       0       0       0
  2285 ;;      Totals:         1       0       0       0       0       0       0
  2286 ;;Total ram usage:        1 bytes
  2287 ;; Hardware stack levels used:    1
  2288 ;; Hardware stack levels required when called:    4
  2289 ;; This function calls:
  2290 ;;		_DelayFor18TCY
  2291 ;; This function is called by:
  2292 ;;		_LCDInitialDisplay
  2293 ;;		_putLCD
  2294 ;; This function uses a non-reentrant model
  2295 ;;
  2296                           
  2297                           	psect	text10
  2298  00183A                     __ptext10:
  2299                           	opt stack 0
  2300  00183A                     _WriteDataLCD:
  2301                           	opt stack 24
  2302                           
  2303                           ;incstack = 0
  2304                           ;WriteDataLCD@data stored from wreg
  2305  00183A  6E21               	movwf	WriteDataLCD@data,c
  2306                           
  2307                           ;lcddisplay.c: 465: TRISD &= 0xf0;
  2308  00183C  0EF0               	movlw	240
  2309  00183E  1695               	andwf	3989,f,c	;volatile
  2310                           
  2311                           ;lcddisplay.c: 466: PORTD &= 0xf0;
  2312  001840  0EF0               	movlw	240
  2313  001842  1683               	andwf	3971,f,c	;volatile
  2314                           
  2315                           ;lcddisplay.c: 467: PORTD |= ((data>>4)&0x0f);
  2316  001844  3821               	swapf	WriteDataLCD@data,w,c
  2317  001846  0B0F               	andlw	15
  2318  001848  0B0F               	andlw	15
  2319  00184A  1283               	iorwf	3971,f,c	;volatile
  2320                           
  2321                           ;lcddisplay.c: 469: LATEbits.LATE0 = 1;
  2322  00184C  808D               	bsf	3981,0,c	;volatile
  2323                           
  2324                           ;lcddisplay.c: 470: LATEbits.LATE1 = 0;
  2325  00184E  928D               	bcf	3981,1,c	;volatile
  2326                           
  2327                           ;lcddisplay.c: 471: DelayFor18TCY();
  2328  001850  EC2B  F00D         	call	_DelayFor18TCY	;wreg free
  2329                           
  2330                           ;lcddisplay.c: 472: LATEbits.LATE2 = 1;
  2331  001854  848D               	bsf	3981,2,c	;volatile
  2332                           
  2333                           ;lcddisplay.c: 473: DelayFor18TCY();
  2334  001856  EC2B  F00D         	call	_DelayFor18TCY	;wreg free
  2335                           
  2336                           ;lcddisplay.c: 474: LATEbits.LATE2 = 0;
  2337  00185A  948D               	bcf	3981,2,c	;volatile
  2338                           
  2339                           ;lcddisplay.c: 479: PORTD &= 0xf0;
  2340  00185C  0EF0               	movlw	240
  2341  00185E  1683               	andwf	3971,f,c	;volatile
  2342                           
  2343                           ;lcddisplay.c: 480: PORTD |= (data&0x0f);
  2344  001860  5021               	movf	WriteDataLCD@data,w,c
  2345  001862  0B0F               	andlw	15
  2346  001864  1283               	iorwf	3971,f,c	;volatile
  2347                           
  2348                           ;lcddisplay.c: 482: DelayFor18TCY();
  2349  001866  EC2B  F00D         	call	_DelayFor18TCY	;wreg free
  2350                           
  2351                           ;lcddisplay.c: 483: LATEbits.LATE2 = 1;
  2352  00186A  848D               	bsf	3981,2,c	;volatile
  2353                           
  2354                           ;lcddisplay.c: 484: DelayFor18TCY();
  2355  00186C  EC2B  F00D         	call	_DelayFor18TCY	;wreg free
  2356                           
  2357                           ;lcddisplay.c: 485: LATEbits.LATE2 = 0;
  2358  001870  948D               	bcf	3981,2,c	;volatile
  2359                           
  2360                           ;lcddisplay.c: 489: TRISD |= 0x0f;
  2361  001872  0E0F               	movlw	15
  2362  001874  1295               	iorwf	3989,f,c	;volatile
  2363  001876  0012               	return	
  2364                           
  2365                           ;lcddisplay.c: 493: return;
  2366  001878  0012               	return		;funcret
  2367  00187A                     __end_of_WriteDataLCD:
  2368                           	opt stack 0
  2369                           tblptru	equ	0xFF8
  2370                           tblptrh	equ	0xFF7
  2371                           tblptrl	equ	0xFF6
  2372                           tablat	equ	0xFF5
  2373                           prodh	equ	0xFF4
  2374                           prodl	equ	0xFF3
  2375                           indf0	equ	0xFEF
  2376                           fsr0h	equ	0xFEA
  2377                           fsr0l	equ	0xFE9
  2378                           indf2	equ	0xFDF
  2379                           postinc2	equ	0xFDE
  2380                           postdec2	equ	0xFDD
  2381                           fsr2h	equ	0xFDA
  2382                           fsr2l	equ	0xFD9
  2383                           status	equ	0xFD8
  2384                           
  2385 ;; *************** function _SetLCDCGRamAddr *****************
  2386 ;; Defined at:
  2387 ;;		line 357 in file "lcddisplay.c"
  2388 ;; Parameters:    Size  Location     Type
  2389 ;;  CGaddr          1    wreg     unsigned char 
  2390 ;; Auto vars:     Size  Location     Type
  2391 ;;  CGaddr          1   35[COMRAM] unsigned char 
  2392 ;; Return value:  Size  Location     Type
  2393 ;;		None               void
  2394 ;; Registers used:
  2395 ;;		wreg, status,2, status,0, cstack
  2396 ;; Tracked objects:
  2397 ;;		On entry : 0/0
  2398 ;;		On exit  : 0/0
  2399 ;;		Unchanged: 0/0
  2400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2401 ;;      Params:         0       0       0       0       0       0       0
  2402 ;;      Locals:         1       0       0       0       0       0       0
  2403 ;;      Temps:          3       0       0       0       0       0       0
  2404 ;;      Totals:         4       0       0       0       0       0       0
  2405 ;;Total ram usage:        4 bytes
  2406 ;; Hardware stack levels used:    1
  2407 ;; Hardware stack levels required when called:    4
  2408 ;; This function calls:
  2409 ;;		_DelayFor18TCY
  2410 ;; This function is called by:
  2411 ;;		_LCDInitialDisplay
  2412 ;; This function uses a non-reentrant model
  2413 ;;
  2414                           
  2415                           	psect	text11
  2416  0016F0                     __ptext11:
  2417                           	opt stack 0
  2418  0016F0                     _SetLCDCGRamAddr:
  2419                           	opt stack 25
  2420                           
  2421                           ;incstack = 0
  2422                           ;SetLCDCGRamAddr@CGaddr stored from wreg
  2423  0016F0  6E24               	movwf	SetLCDCGRamAddr@CGaddr,c
  2424                           
  2425                           ;lcddisplay.c: 376: TRISD &= 0xf0;
  2426  0016F2  0EF0               	movlw	240
  2427  0016F4  1695               	andwf	3989,f,c	;volatile
  2428                           
  2429                           ;lcddisplay.c: 377: PORTD &= 0xf0;
  2430  0016F6  0EF0               	movlw	240
  2431  0016F8  1683               	andwf	3971,f,c	;volatile
  2432                           
  2433                           ;lcddisplay.c: 378: PORTD |= (((CGaddr |0b01000000)>>4) & 0x0f);
  2434  0016FA  5024               	movf	SetLCDCGRamAddr@CGaddr,w,c
  2435  0016FC  6E21               	movwf	??_SetLCDCGRamAddr& (0+255),c
  2436  0016FE  6A22               	clrf	(??_SetLCDCGRamAddr+1)& (0+255),c
  2437  001700  0E40               	movlw	64
  2438  001702  1221               	iorwf	??_SetLCDCGRamAddr,f,c
  2439  001704  0E00               	movlw	0
  2440  001706  1222               	iorwf	??_SetLCDCGRamAddr+1,f,c
  2441  001708  0E04               	movlw	4
  2442  00170A  6E23               	movwf	(??_SetLCDCGRamAddr+2)& (0+255),c
  2443  00170C                     u2055:
  2444  00170C  3422               	rlcf	??_SetLCDCGRamAddr+1,w,c
  2445  00170E  3222               	rrcf	??_SetLCDCGRamAddr+1,f,c
  2446  001710  3221               	rrcf	??_SetLCDCGRamAddr,f,c
  2447  001712  2E23               	decfsz	(??_SetLCDCGRamAddr+2)& (0+255),f,c
  2448  001714  D7FB               	goto	u2055
  2449  001716  5021               	movf	??_SetLCDCGRamAddr,w,c
  2450  001718  0B0F               	andlw	15
  2451  00171A  1283               	iorwf	3971,f,c	;volatile
  2452                           
  2453                           ;lcddisplay.c: 380: LATEbits.LATE1 = 0;
  2454  00171C  928D               	bcf	3981,1,c	;volatile
  2455                           
  2456                           ;lcddisplay.c: 381: LATEbits.LATE0 = 0;
  2457  00171E  908D               	bcf	3981,0,c	;volatile
  2458                           
  2459                           ;lcddisplay.c: 382: DelayFor18TCY();
  2460  001720  EC2B  F00D         	call	_DelayFor18TCY	;wreg free
  2461                           
  2462                           ;lcddisplay.c: 383: LATEbits.LATE2 = 1;
  2463  001724  848D               	bsf	3981,2,c	;volatile
  2464                           
  2465                           ;lcddisplay.c: 384: DelayFor18TCY();
  2466  001726  EC2B  F00D         	call	_DelayFor18TCY	;wreg free
  2467                           
  2468                           ;lcddisplay.c: 385: LATEbits.LATE2 = 0;
  2469  00172A  948D               	bcf	3981,2,c	;volatile
  2470                           
  2471                           ;lcddisplay.c: 390: PORTD &= 0xf0;
  2472  00172C  0EF0               	movlw	240
  2473  00172E  1683               	andwf	3971,f,c	;volatile
  2474                           
  2475                           ;lcddisplay.c: 391: PORTD |= (CGaddr&0x0f);
  2476  001730  5024               	movf	SetLCDCGRamAddr@CGaddr,w,c
  2477  001732  0B0F               	andlw	15
  2478  001734  1283               	iorwf	3971,f,c	;volatile
  2479                           
  2480                           ;lcddisplay.c: 393: DelayFor18TCY();
  2481  001736  EC2B  F00D         	call	_DelayFor18TCY	;wreg free
  2482                           
  2483                           ;lcddisplay.c: 394: LATEbits.LATE2 = 1;
  2484  00173A  848D               	bsf	3981,2,c	;volatile
  2485                           
  2486                           ;lcddisplay.c: 395: DelayFor18TCY();
  2487  00173C  EC2B  F00D         	call	_DelayFor18TCY	;wreg free
  2488                           
  2489                           ;lcddisplay.c: 396: LATEbits.LATE2 = 0;
  2490  001740  948D               	bcf	3981,2,c	;volatile
  2491                           
  2492                           ;lcddisplay.c: 400: TRISD |= 0x0f;
  2493  001742  0E0F               	movlw	15
  2494  001744  1295               	iorwf	3989,f,c	;volatile
  2495  001746  0012               	return	
  2496                           
  2497                           ;lcddisplay.c: 404: return;
  2498  001748  0012               	return		;funcret
  2499  00174A                     __end_of_SetLCDCGRamAddr:
  2500                           	opt stack 0
  2501                           tblptru	equ	0xFF8
  2502                           tblptrh	equ	0xFF7
  2503                           tblptrl	equ	0xFF6
  2504                           tablat	equ	0xFF5
  2505                           prodh	equ	0xFF4
  2506                           prodl	equ	0xFF3
  2507                           indf0	equ	0xFEF
  2508                           fsr0h	equ	0xFEA
  2509                           fsr0l	equ	0xFE9
  2510                           indf2	equ	0xFDF
  2511                           postinc2	equ	0xFDE
  2512                           postdec2	equ	0xFDD
  2513                           fsr2h	equ	0xFDA
  2514                           fsr2l	equ	0xFD9
  2515                           status	equ	0xFD8
  2516                           
  2517 ;; *************** function _InitPorts *****************
  2518 ;; Defined at:
  2519 ;;		line 42 in file "ports.c"
  2520 ;; Parameters:    Size  Location     Type
  2521 ;;		None
  2522 ;; Auto vars:     Size  Location     Type
  2523 ;;		None
  2524 ;; Return value:  Size  Location     Type
  2525 ;;		None               void
  2526 ;; Registers used:
  2527 ;;		wreg, status,2
  2528 ;; Tracked objects:
  2529 ;;		On entry : 0/0
  2530 ;;		On exit  : 0/0
  2531 ;;		Unchanged: 0/0
  2532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2533 ;;      Params:         0       0       0       0       0       0       0
  2534 ;;      Locals:         0       0       0       0       0       0       0
  2535 ;;      Temps:          0       0       0       0       0       0       0
  2536 ;;      Totals:         0       0       0       0       0       0       0
  2537 ;;Total ram usage:        0 bytes
  2538 ;; Hardware stack levels used:    1
  2539 ;; Hardware stack levels required when called:    2
  2540 ;; This function calls:
  2541 ;;		Nothing
  2542 ;; This function is called by:
  2543 ;;		_main
  2544 ;; This function uses a non-reentrant model
  2545 ;;
  2546                           
  2547                           	psect	text12
  2548  00199E                     __ptext12:
  2549                           	opt stack 0
  2550  00199E                     _InitPorts:
  2551                           	opt stack 28
  2552                           
  2553                           ;ports.c: 44: ANSEL = 0;
  2554                           
  2555                           ;incstack = 0
  2556  00199E  0E00               	movlw	0
  2557  0019A0  6E7E               	movwf	3966,c	;volatile
  2558                           
  2559                           ;ports.c: 45: ANSELH = 0;
  2560  0019A2  0E00               	movlw	0
  2561  0019A4  6E7F               	movwf	3967,c	;volatile
  2562                           
  2563                           ;ports.c: 57: TRISA = 0b11100000;
  2564  0019A6  0EE0               	movlw	224
  2565  0019A8  6E92               	movwf	3986,c	;volatile
  2566                           
  2567                           ;ports.c: 58: ANSEL = 0b11100000;
  2568  0019AA  0EE0               	movlw	224
  2569  0019AC  6E7E               	movwf	3966,c	;volatile
  2570                           
  2571                           ;ports.c: 70: INTCON2bits.RBPU = 0;
  2572  0019AE  9EF1               	bcf	intcon2,7,c	;volatile
  2573                           
  2574                           ;ports.c: 71: WPUBbits.WPUB0 = 1;
  2575  0019B0  807C               	bsf	3964,0,c	;volatile
  2576                           
  2577                           ;ports.c: 73: TRISB = 0b00110111;
  2578  0019B2  0E37               	movlw	55
  2579  0019B4  6E93               	movwf	3987,c	;volatile
  2580                           
  2581                           ;ports.c: 77: TRISCbits.RC2 = 0;
  2582  0019B6  9494               	bcf	3988,2,c	;volatile
  2583                           
  2584                           ;ports.c: 90: TRISD = 0b00010000;
  2585  0019B8  0E10               	movlw	16
  2586  0019BA  6E95               	movwf	3989,c	;volatile
  2587  0019BC  0012               	return		;funcret
  2588  0019BE                     __end_of_InitPorts:
  2589                           	opt stack 0
  2590                           tblptru	equ	0xFF8
  2591                           tblptrh	equ	0xFF7
  2592                           tblptrl	equ	0xFF6
  2593                           tablat	equ	0xFF5
  2594                           prodh	equ	0xFF4
  2595                           prodl	equ	0xFF3
  2596                           intcon2	equ	0xFF1
  2597                           indf0	equ	0xFEF
  2598                           fsr0h	equ	0xFEA
  2599                           fsr0l	equ	0xFE9
  2600                           indf2	equ	0xFDF
  2601                           postinc2	equ	0xFDE
  2602                           postdec2	equ	0xFDD
  2603                           fsr2h	equ	0xFDA
  2604                           fsr2l	equ	0xFD9
  2605                           status	equ	0xFD8
  2606                           
  2607 ;; *************** function _InitMotorPWM *****************
  2608 ;; Defined at:
  2609 ;;		line 118 in file "ports.c"
  2610 ;; Parameters:    Size  Location     Type
  2611 ;;		None
  2612 ;; Auto vars:     Size  Location     Type
  2613 ;;		None
  2614 ;; Return value:  Size  Location     Type
  2615 ;;		None               void
  2616 ;; Registers used:
  2617 ;;		wreg, status,2
  2618 ;; Tracked objects:
  2619 ;;		On entry : 0/0
  2620 ;;		On exit  : 0/0
  2621 ;;		Unchanged: 0/0
  2622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2623 ;;      Params:         0       0       0       0       0       0       0
  2624 ;;      Locals:         0       0       0       0       0       0       0
  2625 ;;      Temps:          0       0       0       0       0       0       0
  2626 ;;      Totals:         0       0       0       0       0       0       0
  2627 ;;Total ram usage:        0 bytes
  2628 ;; Hardware stack levels used:    1
  2629 ;; Hardware stack levels required when called:    2
  2630 ;; This function calls:
  2631 ;;		Nothing
  2632 ;; This function is called by:
  2633 ;;		_main
  2634 ;; This function uses a non-reentrant model
  2635 ;;
  2636                           
  2637                           	psect	text13
  2638  001A2C                     __ptext13:
  2639                           	opt stack 0
  2640  001A2C                     _InitMotorPWM:
  2641                           	opt stack 28
  2642                           
  2643                           ;ports.c: 120: CCP1CON = 0b00001100;
  2644                           
  2645                           ;incstack = 0
  2646  001A2C  0E0C               	movlw	12
  2647  001A2E  6EBD               	movwf	4029,c	;volatile
  2648                           
  2649                           ;ports.c: 123: PR2 = 255;
  2650  001A30  68CB               	setf	4043,c	;volatile
  2651                           
  2652                           ;ports.c: 126: T2CON = 0b00000100;
  2653  001A32  0E04               	movlw	4
  2654  001A34  6ECA               	movwf	4042,c	;volatile
  2655                           
  2656                           ;ports.c: 129: CCPR1L = 0;
  2657  001A36  0E00               	movlw	0
  2658  001A38  6EBE               	movwf	4030,c	;volatile
  2659  001A3A  0012               	return		;funcret
  2660  001A3C                     __end_of_InitMotorPWM:
  2661                           	opt stack 0
  2662                           tblptru	equ	0xFF8
  2663                           tblptrh	equ	0xFF7
  2664                           tblptrl	equ	0xFF6
  2665                           tablat	equ	0xFF5
  2666                           prodh	equ	0xFF4
  2667                           prodl	equ	0xFF3
  2668                           intcon2	equ	0xFF1
  2669                           indf0	equ	0xFEF
  2670                           fsr0h	equ	0xFEA
  2671                           fsr0l	equ	0xFE9
  2672                           indf2	equ	0xFDF
  2673                           postinc2	equ	0xFDE
  2674                           postdec2	equ	0xFDD
  2675                           fsr2h	equ	0xFDA
  2676                           fsr2l	equ	0xFD9
  2677                           status	equ	0xFD8
  2678                           
  2679 ;; *************** function _InitLCD *****************
  2680 ;; Defined at:
  2681 ;;		line 77 in file "lcddisplay.c"
  2682 ;; Parameters:    Size  Location     Type
  2683 ;;		None
  2684 ;; Auto vars:     Size  Location     Type
  2685 ;;		None
  2686 ;; Return value:  Size  Location     Type
  2687 ;;		None               void
  2688 ;; Registers used:
  2689 ;;		wreg, status,2, status,0, cstack
  2690 ;; Tracked objects:
  2691 ;;		On entry : 0/0
  2692 ;;		On exit  : 0/0
  2693 ;;		Unchanged: 0/0
  2694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2695 ;;      Params:         0       0       0       0       0       0       0
  2696 ;;      Locals:         0       0       0       0       0       0       0
  2697 ;;      Temps:          0       0       0       0       0       0       0
  2698 ;;      Totals:         0       0       0       0       0       0       0
  2699 ;;Total ram usage:        0 bytes
  2700 ;; Hardware stack levels used:    1
  2701 ;; Hardware stack levels required when called:    6
  2702 ;; This function calls:
  2703 ;;		_BusyLCD
  2704 ;;		_OpenLCD
  2705 ;;		_WriteCmdLCD
  2706 ;; This function is called by:
  2707 ;;		_main
  2708 ;; This function uses a non-reentrant model
  2709 ;;
  2710                           
  2711                           	psect	text14
  2712  00179E                     __ptext14:
  2713                           	opt stack 0
  2714  00179E                     _InitLCD:
  2715                           	opt stack 24
  2716                           
  2717                           ;lcddisplay.c: 78: OpenLCD(0b00101100 & 0b00111000);
  2718                           
  2719                           ;incstack = 0
  2720  00179E  0E28               	movlw	40
  2721  0017A0  ECCF  F009         	call	_OpenLCD
  2722                           
  2723                           ;lcddisplay.c: 79: while(BusyLCD());
  2724  0017A4  D000               	goto	l3107
  2725  0017A6                     l3107:
  2726  0017A6  EC7B  F00C         	call	_BusyLCD	;wreg free
  2727  0017AA  0900               	iorlw	0
  2728  0017AC  A4D8               	btfss	status,2,c
  2729  0017AE  D7FB               	goto	l3107
  2730                           
  2731                           ;lcddisplay.c: 80: WriteCmdLCD(0x06);
  2732  0017B0  0E06               	movlw	6
  2733  0017B2  EC3D  F00C         	call	_WriteCmdLCD
  2734                           
  2735                           ;lcddisplay.c: 81: while(BusyLCD());
  2736  0017B6  D000               	goto	l3111
  2737  0017B8                     l3111:
  2738  0017B8  EC7B  F00C         	call	_BusyLCD	;wreg free
  2739  0017BC  0900               	iorlw	0
  2740  0017BE  A4D8               	btfss	status,2,c
  2741  0017C0  D7FB               	goto	l3111
  2742                           
  2743                           ;lcddisplay.c: 82: WriteCmdLCD(0x0C);
  2744  0017C2  0E0C               	movlw	12
  2745  0017C4  EC3D  F00C         	call	_WriteCmdLCD
  2746                           
  2747                           ;lcddisplay.c: 83: while(BusyLCD());
  2748  0017C8  D000               	goto	l3115
  2749  0017CA                     l3115:
  2750  0017CA  EC7B  F00C         	call	_BusyLCD	;wreg free
  2751  0017CE  0900               	iorlw	0
  2752  0017D0  A4D8               	btfss	status,2,c
  2753  0017D2  D7FB               	goto	l3115
  2754                           
  2755                           ;lcddisplay.c: 84: WriteCmdLCD(0x01);
  2756  0017D4  0E01               	movlw	1
  2757  0017D6  EC3D  F00C         	call	_WriteCmdLCD
  2758                           
  2759                           ;lcddisplay.c: 85: while(BusyLCD());
  2760  0017DA  D000               	goto	l3119
  2761  0017DC                     l3119:
  2762  0017DC  EC7B  F00C         	call	_BusyLCD	;wreg free
  2763  0017E0  0900               	iorlw	0
  2764  0017E2  A4D8               	btfss	status,2,c
  2765  0017E4  D7FB               	goto	l3119
  2766                           
  2767                           ;lcddisplay.c: 86: WriteCmdLCD(66);
  2768  0017E6  0E42               	movlw	66
  2769  0017E8  EC3D  F00C         	call	_WriteCmdLCD
  2770  0017EC  0012               	return		;funcret
  2771  0017EE                     __end_of_InitLCD:
  2772                           	opt stack 0
  2773                           tblptru	equ	0xFF8
  2774                           tblptrh	equ	0xFF7
  2775                           tblptrl	equ	0xFF6
  2776                           tablat	equ	0xFF5
  2777                           prodh	equ	0xFF4
  2778                           prodl	equ	0xFF3
  2779                           intcon2	equ	0xFF1
  2780                           indf0	equ	0xFEF
  2781                           fsr0h	equ	0xFEA
  2782                           fsr0l	equ	0xFE9
  2783                           indf2	equ	0xFDF
  2784                           postinc2	equ	0xFDE
  2785                           postdec2	equ	0xFDD
  2786                           fsr2h	equ	0xFDA
  2787                           fsr2l	equ	0xFD9
  2788                           status	equ	0xFD8
  2789                           
  2790 ;; *************** function _OpenLCD *****************
  2791 ;; Defined at:
  2792 ;;		line 95 in file "lcddisplay.c"
  2793 ;; Parameters:    Size  Location     Type
  2794 ;;  lcdtype         1    wreg     unsigned char 
  2795 ;; Auto vars:     Size  Location     Type
  2796 ;;  lcdtype         1   36[COMRAM] unsigned char 
  2797 ;; Return value:  Size  Location     Type
  2798 ;;		None               void
  2799 ;; Registers used:
  2800 ;;		wreg, status,2, status,0, cstack
  2801 ;; Tracked objects:
  2802 ;;		On entry : 0/0
  2803 ;;		On exit  : 0/0
  2804 ;;		Unchanged: 0/0
  2805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2806 ;;      Params:         0       0       0       0       0       0       0
  2807 ;;      Locals:         1       0       0       0       0       0       0
  2808 ;;      Temps:          0       0       0       0       0       0       0
  2809 ;;      Totals:         1       0       0       0       0       0       0
  2810 ;;Total ram usage:        1 bytes
  2811 ;; Hardware stack levels used:    1
  2812 ;; Hardware stack levels required when called:    5
  2813 ;; This function calls:
  2814 ;;		_BusyLCD
  2815 ;;		_BusyXLCD
  2816 ;;		_Delay100TCYx
  2817 ;;		_Delay10KTCYx
  2818 ;;		_SetLCDDDRamAddr
  2819 ;;		_WriteCmdLCD
  2820 ;; This function is called by:
  2821 ;;		_InitLCD
  2822 ;; This function uses a non-reentrant model
  2823 ;;
  2824                           
  2825                           	psect	text15
  2826  00139E                     __ptext15:
  2827                           	opt stack 0
  2828  00139E                     _OpenLCD:
  2829                           	opt stack 24
  2830                           
  2831                           ;incstack = 0
  2832                           ;OpenLCD@lcdtype stored from wreg
  2833  00139E  6E25               	movwf	OpenLCD@lcdtype,c
  2834                           
  2835                           ;lcddisplay.c: 98: Delay100TCYx(38);
  2836  0013A0  0E26               	movlw	38
  2837  0013A2  EC04  F00D         	call	_Delay100TCYx
  2838                           
  2839                           ;lcddisplay.c: 109: PORTD &= 0xf0;
  2840  0013A6  0EF0               	movlw	240
  2841  0013A8  1683               	andwf	3971,f,c	;volatile
  2842                           
  2843                           ;lcddisplay.c: 110: TRISD &= 0xF0;
  2844  0013AA  0EF0               	movlw	240
  2845  0013AC  1695               	andwf	3989,f,c	;volatile
  2846                           
  2847                           ;lcddisplay.c: 113: TRISEbits.TRISE1 = 0;
  2848  0013AE  9296               	bcf	3990,1,c	;volatile
  2849                           
  2850                           ;lcddisplay.c: 114: TRISEbits.TRISE0 = 0;
  2851  0013B0  9096               	bcf	3990,0,c	;volatile
  2852                           
  2853                           ;lcddisplay.c: 115: TRISEbits.TRISE2 = 0;
  2854  0013B2  9496               	bcf	3990,2,c	;volatile
  2855                           
  2856                           ;lcddisplay.c: 116: LATEbits.LATE1 = 0;
  2857  0013B4  928D               	bcf	3981,1,c	;volatile
  2858                           
  2859                           ;lcddisplay.c: 117: LATEbits.LATE0 = 0;
  2860  0013B6  908D               	bcf	3981,0,c	;volatile
  2861                           
  2862                           ;lcddisplay.c: 118: LATEbits.LATE2 = 0;
  2863  0013B8  948D               	bcf	3981,2,c	;volatile
  2864                           
  2865                           ;lcddisplay.c: 121: Delay100TCYx(38);
  2866  0013BA  0E26               	movlw	38
  2867  0013BC  EC04  F00D         	call	_Delay100TCYx
  2868                           
  2869                           ;lcddisplay.c: 124: WriteCmdLCD(0x30);
  2870  0013C0  0E30               	movlw	48
  2871  0013C2  EC3D  F00C         	call	_WriteCmdLCD
  2872                           
  2873                           ;lcddisplay.c: 125: Delay10KTCYx(0x05);
  2874  0013C6  0E05               	movlw	5
  2875  0013C8  ECEE  F00C         	call	_Delay10KTCYx
  2876                           
  2877                           ;lcddisplay.c: 127: WriteCmdLCD(0x30);
  2878  0013CC  0E30               	movlw	48
  2879  0013CE  EC3D  F00C         	call	_WriteCmdLCD
  2880                           
  2881                           ;lcddisplay.c: 128: Delay10KTCYx(0x01);
  2882  0013D2  0E01               	movlw	1
  2883  0013D4  ECEE  F00C         	call	_Delay10KTCYx
  2884                           
  2885                           ;lcddisplay.c: 131: WriteCmdLCD(0x32);
  2886  0013D8  0E32               	movlw	50
  2887  0013DA  EC3D  F00C         	call	_WriteCmdLCD
  2888                           
  2889                           ;lcddisplay.c: 132: while( BusyXLCD() );
  2890  0013DE  D000               	goto	l3049
  2891  0013E0                     l3049:
  2892  0013E0  EC5D  F00C         	call	_BusyXLCD	;wreg free
  2893  0013E4  0900               	iorlw	0
  2894  0013E6  B4D8               	btfsc	status,2,c
  2895  0013E8  D002               	goto	l3051
  2896  0013EA  D7FA               	goto	l3049
  2897                           
  2898                           ;lcddisplay.c: 137: while(BusyLCD());
  2899  0013EC  D000               	goto	l3051
  2900  0013EE                     l3051:
  2901  0013EE  EC7B  F00C         	call	_BusyLCD	;wreg free
  2902  0013F2  0900               	iorlw	0
  2903  0013F4  A4D8               	btfss	status,2,c
  2904  0013F6  D7FB               	goto	l3051
  2905                           
  2906                           ;lcddisplay.c: 138: WriteCmdLCD(lcdtype);
  2907  0013F8  5025               	movf	OpenLCD@lcdtype,w,c
  2908  0013FA  EC3D  F00C         	call	_WriteCmdLCD
  2909                           
  2910                           ;lcddisplay.c: 141: while(BusyLCD());
  2911  0013FE  D000               	goto	l3055
  2912  001400                     l3055:
  2913  001400  EC7B  F00C         	call	_BusyLCD	;wreg free
  2914  001404  0900               	iorlw	0
  2915  001406  A4D8               	btfss	status,2,c
  2916  001408  D7FB               	goto	l3055
  2917                           
  2918                           ;lcddisplay.c: 142: WriteCmdLCD(0b00001011&0b00001101&0b00001110);
  2919  00140A  0E08               	movlw	8
  2920  00140C  EC3D  F00C         	call	_WriteCmdLCD
  2921                           
  2922                           ;lcddisplay.c: 143: while(BusyLCD());
  2923  001410  D000               	goto	l3059
  2924  001412                     l3059:
  2925  001412  EC7B  F00C         	call	_BusyLCD	;wreg free
  2926  001416  0900               	iorlw	0
  2927  001418  A4D8               	btfss	status,2,c
  2928  00141A  D7FB               	goto	l3059
  2929                           
  2930                           ;lcddisplay.c: 144: WriteCmdLCD(0b00001111&0b00001111&0b00001111);
  2931  00141C  0E0F               	movlw	15
  2932  00141E  EC3D  F00C         	call	_WriteCmdLCD
  2933                           
  2934                           ;lcddisplay.c: 147: while(BusyLCD());
  2935  001422  D000               	goto	l3063
  2936  001424                     l3063:
  2937  001424  EC7B  F00C         	call	_BusyLCD	;wreg free
  2938  001428  0900               	iorlw	0
  2939  00142A  A4D8               	btfss	status,2,c
  2940  00142C  D7FB               	goto	l3063
  2941                           
  2942                           ;lcddisplay.c: 148: WriteCmdLCD(0x01);
  2943  00142E  0E01               	movlw	1
  2944  001430  EC3D  F00C         	call	_WriteCmdLCD
  2945                           
  2946                           ;lcddisplay.c: 151: while(BusyLCD());
  2947  001434  D000               	goto	l3067
  2948  001436                     l3067:
  2949  001436  EC7B  F00C         	call	_BusyLCD	;wreg free
  2950  00143A  0900               	iorlw	0
  2951  00143C  A4D8               	btfss	status,2,c
  2952  00143E  D7FB               	goto	l3067
  2953                           
  2954                           ;lcddisplay.c: 152: WriteCmdLCD(0b00000100);
  2955  001440  0E04               	movlw	4
  2956  001442  EC3D  F00C         	call	_WriteCmdLCD
  2957                           
  2958                           ;lcddisplay.c: 155: while(BusyLCD());
  2959  001446  D000               	goto	l3071
  2960  001448                     l3071:
  2961  001448  EC7B  F00C         	call	_BusyLCD	;wreg free
  2962  00144C  0900               	iorlw	0
  2963  00144E  A4D8               	btfss	status,2,c
  2964  001450  D7FB               	goto	l3071
  2965                           
  2966                           ;lcddisplay.c: 156: SetLCDDDRamAddr(0x80);
  2967  001452  0E80               	movlw	128
  2968  001454  ECA5  F00B         	call	_SetLCDDDRamAddr
  2969  001458  0012               	return	
  2970                           
  2971                           ;lcddisplay.c: 158: return;
  2972  00145A  0012               	return		;funcret
  2973  00145C                     __end_of_OpenLCD:
  2974                           	opt stack 0
  2975                           tblptru	equ	0xFF8
  2976                           tblptrh	equ	0xFF7
  2977                           tblptrl	equ	0xFF6
  2978                           tablat	equ	0xFF5
  2979                           prodh	equ	0xFF4
  2980                           prodl	equ	0xFF3
  2981                           intcon2	equ	0xFF1
  2982                           indf0	equ	0xFEF
  2983                           fsr0h	equ	0xFEA
  2984                           fsr0l	equ	0xFE9
  2985                           indf2	equ	0xFDF
  2986                           postinc2	equ	0xFDE
  2987                           postdec2	equ	0xFDD
  2988                           fsr2h	equ	0xFDA
  2989                           fsr2l	equ	0xFD9
  2990                           status	equ	0xFD8
  2991                           
  2992 ;; *************** function _WriteCmdLCD *****************
  2993 ;; Defined at:
  2994 ;;		line 161 in file "lcddisplay.c"
  2995 ;; Parameters:    Size  Location     Type
  2996 ;;  cmd             1    wreg     unsigned char 
  2997 ;; Auto vars:     Size  Location     Type
  2998 ;;  cmd             1   32[COMRAM] unsigned char 
  2999 ;; Return value:  Size  Location     Type
  3000 ;;		None               void
  3001 ;; Registers used:
  3002 ;;		wreg, status,2, status,0, cstack
  3003 ;; Tracked objects:
  3004 ;;		On entry : 0/0
  3005 ;;		On exit  : 0/0
  3006 ;;		Unchanged: 0/0
  3007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3008 ;;      Params:         0       0       0       0       0       0       0
  3009 ;;      Locals:         1       0       0       0       0       0       0
  3010 ;;      Temps:          0       0       0       0       0       0       0
  3011 ;;      Totals:         1       0       0       0       0       0       0
  3012 ;;Total ram usage:        1 bytes
  3013 ;; Hardware stack levels used:    1
  3014 ;; Hardware stack levels required when called:    4
  3015 ;; This function calls:
  3016 ;;		_DelayFor18TCY
  3017 ;; This function is called by:
  3018 ;;		_LCDInitialDisplay
  3019 ;;		_LCDUpdate
  3020 ;;		_InitLCD
  3021 ;;		_OpenLCD
  3022 ;; This function uses a non-reentrant model
  3023 ;;
  3024                           
  3025                           	psect	text16
  3026  00187A                     __ptext16:
  3027                           	opt stack 0
  3028  00187A                     _WriteCmdLCD:
  3029                           	opt stack 25
  3030                           
  3031                           ;incstack = 0
  3032                           ;WriteCmdLCD@cmd stored from wreg
  3033  00187A  6E21               	movwf	WriteCmdLCD@cmd,c
  3034                           
  3035                           ;lcddisplay.c: 227: TRISD &= 0xf0;
  3036  00187C  0EF0               	movlw	240
  3037  00187E  1695               	andwf	3989,f,c	;volatile
  3038                           
  3039                           ;lcddisplay.c: 228: PORTD &= 0xf0;
  3040  001880  0EF0               	movlw	240
  3041  001882  1683               	andwf	3971,f,c	;volatile
  3042                           
  3043                           ;lcddisplay.c: 229: PORTD |= (cmd>>4)&0x0f;
  3044  001884  3821               	swapf	WriteCmdLCD@cmd,w,c
  3045  001886  0B0F               	andlw	15
  3046  001888  0B0F               	andlw	15
  3047  00188A  1283               	iorwf	3971,f,c	;volatile
  3048                           
  3049                           ;lcddisplay.c: 231: LATEbits.LATE1 = 0;
  3050  00188C  928D               	bcf	3981,1,c	;volatile
  3051                           
  3052                           ;lcddisplay.c: 232: LATEbits.LATE0 = 0;
  3053  00188E  908D               	bcf	3981,0,c	;volatile
  3054                           
  3055                           ;lcddisplay.c: 233: DelayFor18TCY();
  3056  001890  EC2B  F00D         	call	_DelayFor18TCY	;wreg free
  3057                           
  3058                           ;lcddisplay.c: 234: LATEbits.LATE2 = 1;
  3059  001894  848D               	bsf	3981,2,c	;volatile
  3060                           
  3061                           ;lcddisplay.c: 235: DelayFor18TCY();
  3062  001896  EC2B  F00D         	call	_DelayFor18TCY	;wreg free
  3063                           
  3064                           ;lcddisplay.c: 236: LATEbits.LATE2 = 0;
  3065  00189A  948D               	bcf	3981,2,c	;volatile
  3066                           
  3067                           ;lcddisplay.c: 241: PORTD &= 0xf0;
  3068  00189C  0EF0               	movlw	240
  3069  00189E  1683               	andwf	3971,f,c	;volatile
  3070                           
  3071                           ;lcddisplay.c: 242: PORTD |= cmd&0x0f;
  3072  0018A0  5021               	movf	WriteCmdLCD@cmd,w,c
  3073  0018A2  0B0F               	andlw	15
  3074  0018A4  1283               	iorwf	3971,f,c	;volatile
  3075                           
  3076                           ;lcddisplay.c: 244: DelayFor18TCY();
  3077  0018A6  EC2B  F00D         	call	_DelayFor18TCY	;wreg free
  3078                           
  3079                           ;lcddisplay.c: 245: LATEbits.LATE2 = 1;
  3080  0018AA  848D               	bsf	3981,2,c	;volatile
  3081                           
  3082                           ;lcddisplay.c: 246: DelayFor18TCY();
  3083  0018AC  EC2B  F00D         	call	_DelayFor18TCY	;wreg free
  3084                           
  3085                           ;lcddisplay.c: 247: LATEbits.LATE2 = 0;
  3086  0018B0  948D               	bcf	3981,2,c	;volatile
  3087                           
  3088                           ;lcddisplay.c: 251: TRISD |= 0x0f;
  3089  0018B2  0E0F               	movlw	15
  3090  0018B4  1295               	iorwf	3989,f,c	;volatile
  3091  0018B6  0012               	return	
  3092                           
  3093                           ;lcddisplay.c: 255: return;
  3094  0018B8  0012               	return		;funcret
  3095  0018BA                     __end_of_WriteCmdLCD:
  3096                           	opt stack 0
  3097                           tblptru	equ	0xFF8
  3098                           tblptrh	equ	0xFF7
  3099                           tblptrl	equ	0xFF6
  3100                           tablat	equ	0xFF5
  3101                           prodh	equ	0xFF4
  3102                           prodl	equ	0xFF3
  3103                           intcon2	equ	0xFF1
  3104                           indf0	equ	0xFEF
  3105                           fsr0h	equ	0xFEA
  3106                           fsr0l	equ	0xFE9
  3107                           indf2	equ	0xFDF
  3108                           postinc2	equ	0xFDE
  3109                           postdec2	equ	0xFDD
  3110                           fsr2h	equ	0xFDA
  3111                           fsr2l	equ	0xFD9
  3112                           status	equ	0xFD8
  3113                           
  3114 ;; *************** function _SetLCDDDRamAddr *****************
  3115 ;; Defined at:
  3116 ;;		line 307 in file "lcddisplay.c"
  3117 ;; Parameters:    Size  Location     Type
  3118 ;;  DDaddr          1    wreg     unsigned char 
  3119 ;; Auto vars:     Size  Location     Type
  3120 ;;  DDaddr          1   35[COMRAM] unsigned char 
  3121 ;; Return value:  Size  Location     Type
  3122 ;;		None               void
  3123 ;; Registers used:
  3124 ;;		wreg, status,2, status,0, cstack
  3125 ;; Tracked objects:
  3126 ;;		On entry : 0/0
  3127 ;;		On exit  : 0/0
  3128 ;;		Unchanged: 0/0
  3129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3130 ;;      Params:         0       0       0       0       0       0       0
  3131 ;;      Locals:         1       0       0       0       0       0       0
  3132 ;;      Temps:          3       0       0       0       0       0       0
  3133 ;;      Totals:         4       0       0       0       0       0       0
  3134 ;;Total ram usage:        4 bytes
  3135 ;; Hardware stack levels used:    1
  3136 ;; Hardware stack levels required when called:    4
  3137 ;; This function calls:
  3138 ;;		_DelayFor18TCY
  3139 ;; This function is called by:
  3140 ;;		_LCDInitialDisplay
  3141 ;;		_LCDUpdate
  3142 ;;		_OpenLCD
  3143 ;; This function uses a non-reentrant model
  3144 ;;
  3145                           
  3146                           	psect	text17
  3147  00174A                     __ptext17:
  3148                           	opt stack 0
  3149  00174A                     _SetLCDDDRamAddr:
  3150                           	opt stack 25
  3151                           
  3152                           ;incstack = 0
  3153                           ;SetLCDDDRamAddr@DDaddr stored from wreg
  3154  00174A  6E24               	movwf	SetLCDDDRamAddr@DDaddr,c
  3155                           
  3156                           ;lcddisplay.c: 326: TRISD &= 0xf0;
  3157  00174C  0EF0               	movlw	240
  3158  00174E  1695               	andwf	3989,f,c	;volatile
  3159                           
  3160                           ;lcddisplay.c: 327: PORTD &= 0xf0;
  3161  001750  0EF0               	movlw	240
  3162  001752  1683               	andwf	3971,f,c	;volatile
  3163                           
  3164                           ;lcddisplay.c: 328: PORTD |= (((DDaddr | 0b10000000)>>4) & 0x0f);
  3165  001754  5024               	movf	SetLCDDDRamAddr@DDaddr,w,c
  3166  001756  6E21               	movwf	??_SetLCDDDRamAddr& (0+255),c
  3167  001758  6A22               	clrf	(??_SetLCDDDRamAddr+1)& (0+255),c
  3168  00175A  8E21               	bsf	??_SetLCDDDRamAddr,7,c
  3169  00175C  0E04               	movlw	4
  3170  00175E  6E23               	movwf	(??_SetLCDDDRamAddr+2)& (0+255),c
  3171  001760                     u1845:
  3172  001760  3422               	rlcf	??_SetLCDDDRamAddr+1,w,c
  3173  001762  3222               	rrcf	??_SetLCDDDRamAddr+1,f,c
  3174  001764  3221               	rrcf	??_SetLCDDDRamAddr,f,c
  3175  001766  2E23               	decfsz	(??_SetLCDDDRamAddr+2)& (0+255),f,c
  3176  001768  D7FB               	goto	u1845
  3177  00176A  5021               	movf	??_SetLCDDDRamAddr,w,c
  3178  00176C  0B0F               	andlw	15
  3179  00176E  1283               	iorwf	3971,f,c	;volatile
  3180                           
  3181                           ;lcddisplay.c: 330: LATEbits.LATE1 = 0;
  3182  001770  928D               	bcf	3981,1,c	;volatile
  3183                           
  3184                           ;lcddisplay.c: 331: LATEbits.LATE0 = 0;
  3185  001772  908D               	bcf	3981,0,c	;volatile
  3186                           
  3187                           ;lcddisplay.c: 332: DelayFor18TCY();
  3188  001774  EC2B  F00D         	call	_DelayFor18TCY	;wreg free
  3189                           
  3190                           ;lcddisplay.c: 333: LATEbits.LATE2 = 1;
  3191  001778  848D               	bsf	3981,2,c	;volatile
  3192                           
  3193                           ;lcddisplay.c: 334: DelayFor18TCY();
  3194  00177A  EC2B  F00D         	call	_DelayFor18TCY	;wreg free
  3195                           
  3196                           ;lcddisplay.c: 335: LATEbits.LATE2 = 0;
  3197  00177E  948D               	bcf	3981,2,c	;volatile
  3198                           
  3199                           ;lcddisplay.c: 340: PORTD &= 0xf0;
  3200  001780  0EF0               	movlw	240
  3201  001782  1683               	andwf	3971,f,c	;volatile
  3202                           
  3203                           ;lcddisplay.c: 341: PORTD |= (DDaddr&0x0f);
  3204  001784  5024               	movf	SetLCDDDRamAddr@DDaddr,w,c
  3205  001786  0B0F               	andlw	15
  3206  001788  1283               	iorwf	3971,f,c	;volatile
  3207                           
  3208                           ;lcddisplay.c: 343: DelayFor18TCY();
  3209  00178A  EC2B  F00D         	call	_DelayFor18TCY	;wreg free
  3210                           
  3211                           ;lcddisplay.c: 344: LATEbits.LATE2 = 1;
  3212  00178E  848D               	bsf	3981,2,c	;volatile
  3213                           
  3214                           ;lcddisplay.c: 345: DelayFor18TCY();
  3215  001790  EC2B  F00D         	call	_DelayFor18TCY	;wreg free
  3216                           
  3217                           ;lcddisplay.c: 346: LATEbits.LATE2 = 0;
  3218  001794  948D               	bcf	3981,2,c	;volatile
  3219                           
  3220                           ;lcddisplay.c: 350: TRISD |= 0x0f;
  3221  001796  0E0F               	movlw	15
  3222  001798  1295               	iorwf	3989,f,c	;volatile
  3223  00179A  0012               	return	
  3224                           
  3225                           ;lcddisplay.c: 354: return;
  3226  00179C  0012               	return		;funcret
  3227  00179E                     __end_of_SetLCDDDRamAddr:
  3228                           	opt stack 0
  3229                           tblptru	equ	0xFF8
  3230                           tblptrh	equ	0xFF7
  3231                           tblptrl	equ	0xFF6
  3232                           tablat	equ	0xFF5
  3233                           prodh	equ	0xFF4
  3234                           prodl	equ	0xFF3
  3235                           intcon2	equ	0xFF1
  3236                           indf0	equ	0xFEF
  3237                           fsr0h	equ	0xFEA
  3238                           fsr0l	equ	0xFE9
  3239                           indf2	equ	0xFDF
  3240                           postinc2	equ	0xFDE
  3241                           postdec2	equ	0xFDD
  3242                           fsr2h	equ	0xFDA
  3243                           fsr2l	equ	0xFD9
  3244                           status	equ	0xFD8
  3245                           
  3246 ;; *************** function _Delay10KTCYx *****************
  3247 ;; Defined at:
  3248 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d10ktcyx.c"
  3249 ;; Parameters:    Size  Location     Type
  3250 ;;  unit            1    wreg     unsigned char 
  3251 ;; Auto vars:     Size  Location     Type
  3252 ;;  unit            1   32[COMRAM] unsigned char 
  3253 ;; Return value:  Size  Location     Type
  3254 ;;		None               void
  3255 ;; Registers used:
  3256 ;;		wreg
  3257 ;; Tracked objects:
  3258 ;;		On entry : 0/0
  3259 ;;		On exit  : 0/0
  3260 ;;		Unchanged: 0/0
  3261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3262 ;;      Params:         0       0       0       0       0       0       0
  3263 ;;      Locals:         1       0       0       0       0       0       0
  3264 ;;      Temps:          1       0       0       0       0       0       0
  3265 ;;      Totals:         2       0       0       0       0       0       0
  3266 ;;Total ram usage:        2 bytes
  3267 ;; Hardware stack levels used:    1
  3268 ;; Hardware stack levels required when called:    2
  3269 ;; This function calls:
  3270 ;;		Nothing
  3271 ;; This function is called by:
  3272 ;;		_OpenLCD
  3273 ;; This function uses a non-reentrant model
  3274 ;;
  3275                           
  3276                           	psect	text18
  3277  0019DC                     __ptext18:
  3278                           	opt stack 0
  3279  0019DC                     _Delay10KTCYx:
  3280                           	opt stack 26
  3281                           
  3282                           ;incstack = 0
  3283                           ;Delay10KTCYx@unit stored from wreg
  3284  0019DC  6E21               	movwf	Delay10KTCYx@unit,c
  3285  0019DE  0E0D               	movlw	13
  3286  0019E0  6E20               	movwf	??_Delay10KTCYx& (0+255),c
  3287  0019E2  0EFC               	movlw	252
  3288  0019E4                     u3757:
  3289  0019E4  2EE8               	decfsz	wreg,f,c
  3290  0019E6  D7FE               	goto	u3757
  3291  0019E8  2E20               	decfsz	??_Delay10KTCYx& (0+255),f,c
  3292  0019EA  D7FC               	goto	u3757
  3293  0019EC  2E21               	decfsz	Delay10KTCYx@unit,f,c
  3294  0019EE  D7F7               	goto	l2823
  3295  0019F0  0012               	return	
  3296  0019F2  0012               	return		;funcret
  3297  0019F4                     __end_of_Delay10KTCYx:
  3298                           	opt stack 0
  3299                           tblptru	equ	0xFF8
  3300                           tblptrh	equ	0xFF7
  3301                           tblptrl	equ	0xFF6
  3302                           tablat	equ	0xFF5
  3303                           prodh	equ	0xFF4
  3304                           prodl	equ	0xFF3
  3305                           intcon2	equ	0xFF1
  3306                           indf0	equ	0xFEF
  3307                           fsr0h	equ	0xFEA
  3308                           fsr0l	equ	0xFE9
  3309                           wreg	equ	0xFE8
  3310                           indf2	equ	0xFDF
  3311                           postinc2	equ	0xFDE
  3312                           postdec2	equ	0xFDD
  3313                           fsr2h	equ	0xFDA
  3314                           fsr2l	equ	0xFD9
  3315                           status	equ	0xFD8
  3316                           
  3317 ;; *************** function _Delay100TCYx *****************
  3318 ;; Defined at:
  3319 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d100tcyx.c"
  3320 ;; Parameters:    Size  Location     Type
  3321 ;;  unit            1    wreg     unsigned char 
  3322 ;; Auto vars:     Size  Location     Type
  3323 ;;  unit            1   31[COMRAM] unsigned char 
  3324 ;; Return value:  Size  Location     Type
  3325 ;;		None               void
  3326 ;; Registers used:
  3327 ;;		wreg
  3328 ;; Tracked objects:
  3329 ;;		On entry : 0/0
  3330 ;;		On exit  : 0/0
  3331 ;;		Unchanged: 0/0
  3332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3333 ;;      Params:         0       0       0       0       0       0       0
  3334 ;;      Locals:         1       0       0       0       0       0       0
  3335 ;;      Temps:          0       0       0       0       0       0       0
  3336 ;;      Totals:         1       0       0       0       0       0       0
  3337 ;;Total ram usage:        1 bytes
  3338 ;; Hardware stack levels used:    1
  3339 ;; Hardware stack levels required when called:    2
  3340 ;; This function calls:
  3341 ;;		Nothing
  3342 ;; This function is called by:
  3343 ;;		_OpenLCD
  3344 ;; This function uses a non-reentrant model
  3345 ;;
  3346                           
  3347                           	psect	text19
  3348  001A08                     __ptext19:
  3349                           	opt stack 0
  3350  001A08                     _Delay100TCYx:
  3351                           	opt stack 26
  3352                           
  3353                           ;incstack = 0
  3354                           ;Delay100TCYx@unit stored from wreg
  3355  001A08  6E20               	movwf	Delay100TCYx@unit,c
  3356  001A0A  0E21               	movlw	33
  3357  001A0C                     u3767:
  3358  001A0C  2EE8               	decfsz	wreg,f,c
  3359  001A0E  D7FE               	goto	u3767
  3360  001A10  F000               	nop	
  3361  001A12  2E20               	decfsz	Delay100TCYx@unit,f,c
  3362  001A14  D7FA               	goto	l2819
  3363  001A16  0012               	return	
  3364  001A18  0012               	return		;funcret
  3365  001A1A                     __end_of_Delay100TCYx:
  3366                           	opt stack 0
  3367                           tblptru	equ	0xFF8
  3368                           tblptrh	equ	0xFF7
  3369                           tblptrl	equ	0xFF6
  3370                           tablat	equ	0xFF5
  3371                           prodh	equ	0xFF4
  3372                           prodl	equ	0xFF3
  3373                           intcon2	equ	0xFF1
  3374                           indf0	equ	0xFEF
  3375                           fsr0h	equ	0xFEA
  3376                           fsr0l	equ	0xFE9
  3377                           wreg	equ	0xFE8
  3378                           indf2	equ	0xFDF
  3379                           postinc2	equ	0xFDE
  3380                           postdec2	equ	0xFDD
  3381                           fsr2h	equ	0xFDA
  3382                           fsr2l	equ	0xFD9
  3383                           status	equ	0xFD8
  3384                           
  3385 ;; *************** function _BusyXLCD *****************
  3386 ;; Defined at:
  3387 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\XLCD\busyxlcd.c"
  3388 ;; Parameters:    Size  Location     Type
  3389 ;;		None
  3390 ;; Auto vars:     Size  Location     Type
  3391 ;;		None
  3392 ;; Return value:  Size  Location     Type
  3393 ;;                  1    wreg      unsigned char 
  3394 ;; Registers used:
  3395 ;;		wreg, cstack
  3396 ;; Tracked objects:
  3397 ;;		On entry : 0/0
  3398 ;;		On exit  : 0/0
  3399 ;;		Unchanged: 0/0
  3400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3401 ;;      Params:         0       0       0       0       0       0       0
  3402 ;;      Locals:         0       0       0       0       0       0       0
  3403 ;;      Temps:          0       0       0       0       0       0       0
  3404 ;;      Totals:         0       0       0       0       0       0       0
  3405 ;;Total ram usage:        0 bytes
  3406 ;; Hardware stack levels used:    1
  3407 ;; Hardware stack levels required when called:    4
  3408 ;; This function calls:
  3409 ;;		_DelayFor18TCY
  3410 ;; This function is called by:
  3411 ;;		_OpenLCD
  3412 ;; This function uses a non-reentrant model
  3413 ;;
  3414                           
  3415                           	psect	text20
  3416  0018BA                     __ptext20:
  3417                           	opt stack 0
  3418  0018BA                     _BusyXLCD:
  3419                           	opt stack 24
  3420                           
  3421                           ;incstack = 0
  3422  0018BA  8C8A               	bsf	3978,6,c	;volatile
  3423  0018BC  9A8A               	bcf	3978,5,c	;volatile
  3424  0018BE  EC2B  F00D         	call	_DelayFor18TCY	;wreg free
  3425  0018C2  888A               	bsf	3978,4,c	;volatile
  3426  0018C4  EC2B  F00D         	call	_DelayFor18TCY	;wreg free
  3427  0018C8  A681               	btfss	3969,3,c	;volatile
  3428  0018CA  D00A               	goto	l556
  3429  0018CC  988A               	bcf	3978,4,c	;volatile
  3430  0018CE  EC2B  F00D         	call	_DelayFor18TCY	;wreg free
  3431  0018D2  888A               	bsf	3978,4,c	;volatile
  3432  0018D4  EC2B  F00D         	call	_DelayFor18TCY	;wreg free
  3433  0018D8  988A               	bcf	3978,4,c	;volatile
  3434  0018DA  9C8A               	bcf	3978,6,c	;volatile
  3435  0018DC  0E01               	movlw	1
  3436  0018DE  0012               	return	
  3437  0018E0                     l556:
  3438  0018E0  988A               	bcf	3978,4,c	;volatile
  3439  0018E2  EC2B  F00D         	call	_DelayFor18TCY	;wreg free
  3440  0018E6  888A               	bsf	3978,4,c	;volatile
  3441  0018E8  EC2B  F00D         	call	_DelayFor18TCY	;wreg free
  3442  0018EC  988A               	bcf	3978,4,c	;volatile
  3443  0018EE  9C8A               	bcf	3978,6,c	;volatile
  3444  0018F0  0E00               	movlw	0
  3445  0018F2  0012               	return	
  3446  0018F4  0012               	return		;funcret
  3447  0018F6                     __end_of_BusyXLCD:
  3448                           	opt stack 0
  3449                           tblptru	equ	0xFF8
  3450                           tblptrh	equ	0xFF7
  3451                           tblptrl	equ	0xFF6
  3452                           tablat	equ	0xFF5
  3453                           prodh	equ	0xFF4
  3454                           prodl	equ	0xFF3
  3455                           intcon2	equ	0xFF1
  3456                           indf0	equ	0xFEF
  3457                           fsr0h	equ	0xFEA
  3458                           fsr0l	equ	0xFE9
  3459                           wreg	equ	0xFE8
  3460                           indf2	equ	0xFDF
  3461                           postinc2	equ	0xFDE
  3462                           postdec2	equ	0xFDD
  3463                           fsr2h	equ	0xFDA
  3464                           fsr2l	equ	0xFD9
  3465                           status	equ	0xFD8
  3466                           
  3467 ;; *************** function _BusyLCD *****************
  3468 ;; Defined at:
  3469 ;;		line 258 in file "lcddisplay.c"
  3470 ;; Parameters:    Size  Location     Type
  3471 ;;		None
  3472 ;; Auto vars:     Size  Location     Type
  3473 ;;		None
  3474 ;; Return value:  Size  Location     Type
  3475 ;;                  1    wreg      unsigned char 
  3476 ;; Registers used:
  3477 ;;		wreg, cstack
  3478 ;; Tracked objects:
  3479 ;;		On entry : 0/0
  3480 ;;		On exit  : 0/0
  3481 ;;		Unchanged: 0/0
  3482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3483 ;;      Params:         0       0       0       0       0       0       0
  3484 ;;      Locals:         0       0       0       0       0       0       0
  3485 ;;      Temps:          0       0       0       0       0       0       0
  3486 ;;      Totals:         0       0       0       0       0       0       0
  3487 ;;Total ram usage:        0 bytes
  3488 ;; Hardware stack levels used:    1
  3489 ;; Hardware stack levels required when called:    4
  3490 ;; This function calls:
  3491 ;;		_DelayFor18TCY
  3492 ;; This function is called by:
  3493 ;;		_LCDInitialDisplay
  3494 ;;		_LCDUpdate
  3495 ;;		_InitLCD
  3496 ;;		_OpenLCD
  3497 ;;		_putLCD
  3498 ;; This function uses a non-reentrant model
  3499 ;;
  3500                           
  3501                           	psect	text21
  3502  0018F6                     __ptext21:
  3503                           	opt stack 0
  3504  0018F6                     _BusyLCD:
  3505                           	opt stack 24
  3506                           
  3507                           ;lcddisplay.c: 260: LATEbits.LATE1 = 1;
  3508                           
  3509                           ;incstack = 0
  3510  0018F6  828D               	bsf	3981,1,c	;volatile
  3511                           
  3512                           ;lcddisplay.c: 261: LATEbits.LATE0 = 0;
  3513  0018F8  908D               	bcf	3981,0,c	;volatile
  3514                           
  3515                           ;lcddisplay.c: 262: DelayFor18TCY();
  3516  0018FA  EC2B  F00D         	call	_DelayFor18TCY	;wreg free
  3517                           
  3518                           ;lcddisplay.c: 263: LATEbits.LATE2 = 1;
  3519  0018FE  848D               	bsf	3981,2,c	;volatile
  3520                           
  3521                           ;lcddisplay.c: 264: DelayFor18TCY();
  3522  001900  EC2B  F00D         	call	_DelayFor18TCY	;wreg free
  3523                           
  3524                           ;lcddisplay.c: 282: if(PORTD&0x08)
  3525  001904  A683               	btfss	3971,3,c	;volatile
  3526  001906  D00A               	goto	l467
  3527                           
  3528                           ;lcddisplay.c: 284: {
  3529                           ;lcddisplay.c: 285: LATEbits.LATE2 = 0;
  3530  001908  948D               	bcf	3981,2,c	;volatile
  3531                           
  3532                           ;lcddisplay.c: 286: DelayFor18TCY();
  3533  00190A  EC2B  F00D         	call	_DelayFor18TCY	;wreg free
  3534                           
  3535                           ;lcddisplay.c: 287: LATEbits.LATE2 = 1;
  3536  00190E  848D               	bsf	3981,2,c	;volatile
  3537                           
  3538                           ;lcddisplay.c: 288: DelayFor18TCY();
  3539  001910  EC2B  F00D         	call	_DelayFor18TCY	;wreg free
  3540                           
  3541                           ;lcddisplay.c: 289: LATEbits.LATE2 = 0;
  3542  001914  948D               	bcf	3981,2,c	;volatile
  3543                           
  3544                           ;lcddisplay.c: 290: LATEbits.LATE1 = 0;
  3545  001916  928D               	bcf	3981,1,c	;volatile
  3546                           
  3547                           ;lcddisplay.c: 291: return 1;
  3548  001918  0E01               	movlw	1
  3549                           
  3550                           ;lcddisplay.c: 292: }
  3551  00191A  0012               	return	
  3552  00191C                     l467:
  3553                           
  3554                           ;lcddisplay.c: 293: else
  3555                           ;lcddisplay.c: 294: {
  3556                           ;lcddisplay.c: 295: LATEbits.LATE2 = 0;
  3557  00191C  948D               	bcf	3981,2,c	;volatile
  3558                           
  3559                           ;lcddisplay.c: 296: DelayFor18TCY();
  3560  00191E  EC2B  F00D         	call	_DelayFor18TCY	;wreg free
  3561                           
  3562                           ;lcddisplay.c: 297: LATEbits.LATE2 = 1;
  3563  001922  848D               	bsf	3981,2,c	;volatile
  3564                           
  3565                           ;lcddisplay.c: 298: DelayFor18TCY();
  3566  001924  EC2B  F00D         	call	_DelayFor18TCY	;wreg free
  3567                           
  3568                           ;lcddisplay.c: 299: LATEbits.LATE2 = 0;
  3569  001928  948D               	bcf	3981,2,c	;volatile
  3570                           
  3571                           ;lcddisplay.c: 300: LATEbits.LATE1 = 0;
  3572  00192A  928D               	bcf	3981,1,c	;volatile
  3573                           
  3574                           ;lcddisplay.c: 301: return 0;
  3575  00192C  0E00               	movlw	0
  3576  00192E  0012               	return	
  3577  001930  0012               	return		;funcret
  3578  001932                     __end_of_BusyLCD:
  3579                           	opt stack 0
  3580                           tblptru	equ	0xFF8
  3581                           tblptrh	equ	0xFF7
  3582                           tblptrl	equ	0xFF6
  3583                           tablat	equ	0xFF5
  3584                           prodh	equ	0xFF4
  3585                           prodl	equ	0xFF3
  3586                           intcon2	equ	0xFF1
  3587                           indf0	equ	0xFEF
  3588                           fsr0h	equ	0xFEA
  3589                           fsr0l	equ	0xFE9
  3590                           wreg	equ	0xFE8
  3591                           indf2	equ	0xFDF
  3592                           postinc2	equ	0xFDE
  3593                           postdec2	equ	0xFDD
  3594                           fsr2h	equ	0xFDA
  3595                           fsr2l	equ	0xFD9
  3596                           status	equ	0xFD8
  3597                           
  3598 ;; *************** function _DelayFor18TCY *****************
  3599 ;; Defined at:
  3600 ;;		line 89 in file "lcddisplay.c"
  3601 ;; Parameters:    Size  Location     Type
  3602 ;;		None
  3603 ;; Auto vars:     Size  Location     Type
  3604 ;;		None
  3605 ;; Return value:  Size  Location     Type
  3606 ;;		None               void
  3607 ;; Registers used:
  3608 ;;		wreg, cstack
  3609 ;; Tracked objects:
  3610 ;;		On entry : 0/0
  3611 ;;		On exit  : 0/0
  3612 ;;		Unchanged: 0/0
  3613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3614 ;;      Params:         0       0       0       0       0       0       0
  3615 ;;      Locals:         0       0       0       0       0       0       0
  3616 ;;      Temps:          0       0       0       0       0       0       0
  3617 ;;      Totals:         0       0       0       0       0       0       0
  3618 ;;Total ram usage:        0 bytes
  3619 ;; Hardware stack levels used:    1
  3620 ;; Hardware stack levels required when called:    3
  3621 ;; This function calls:
  3622 ;;		_Delay1TCYx
  3623 ;; This function is called by:
  3624 ;;		_WriteCmdLCD
  3625 ;;		_BusyLCD
  3626 ;;		_SetLCDDDRamAddr
  3627 ;;		_SetLCDCGRamAddr
  3628 ;;		_WriteDataLCD
  3629 ;;		_BusyXLCD
  3630 ;; This function uses a non-reentrant model
  3631 ;;
  3632                           
  3633                           	psect	text22
  3634  001A56                     __ptext22:
  3635                           	opt stack 0
  3636  001A56                     _DelayFor18TCY:
  3637                           	opt stack 24
  3638                           
  3639                           ;lcddisplay.c: 91: Delay1TCYx(18);
  3640                           
  3641                           ;incstack = 0
  3642  001A56  0E12               	movlw	18
  3643  001A58  EC25  F00D         	call	_Delay1TCYx
  3644  001A5C  0012               	return		;funcret
  3645  001A5E                     __end_of_DelayFor18TCY:
  3646                           	opt stack 0
  3647                           tblptru	equ	0xFF8
  3648                           tblptrh	equ	0xFF7
  3649                           tblptrl	equ	0xFF6
  3650                           tablat	equ	0xFF5
  3651                           prodh	equ	0xFF4
  3652                           prodl	equ	0xFF3
  3653                           intcon2	equ	0xFF1
  3654                           indf0	equ	0xFEF
  3655                           fsr0h	equ	0xFEA
  3656                           fsr0l	equ	0xFE9
  3657                           wreg	equ	0xFE8
  3658                           indf2	equ	0xFDF
  3659                           postinc2	equ	0xFDE
  3660                           postdec2	equ	0xFDD
  3661                           fsr2h	equ	0xFDA
  3662                           fsr2l	equ	0xFD9
  3663                           status	equ	0xFD8
  3664                           
  3665 ;; *************** function _Delay1TCYx *****************
  3666 ;; Defined at:
  3667 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d1tcyx.c"
  3668 ;; Parameters:    Size  Location     Type
  3669 ;;  unit            1    wreg     unsigned char 
  3670 ;; Auto vars:     Size  Location     Type
  3671 ;;  unit            1   31[COMRAM] unsigned char 
  3672 ;; Return value:  Size  Location     Type
  3673 ;;		None               void
  3674 ;; Registers used:
  3675 ;;		wreg
  3676 ;; Tracked objects:
  3677 ;;		On entry : 0/0
  3678 ;;		On exit  : 0/0
  3679 ;;		Unchanged: 0/0
  3680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3681 ;;      Params:         0       0       0       0       0       0       0
  3682 ;;      Locals:         1       0       0       0       0       0       0
  3683 ;;      Temps:          0       0       0       0       0       0       0
  3684 ;;      Totals:         1       0       0       0       0       0       0
  3685 ;;Total ram usage:        1 bytes
  3686 ;; Hardware stack levels used:    1
  3687 ;; Hardware stack levels required when called:    2
  3688 ;; This function calls:
  3689 ;;		Nothing
  3690 ;; This function is called by:
  3691 ;;		_DelayFor18TCY
  3692 ;; This function uses a non-reentrant model
  3693 ;;
  3694                           
  3695                           	psect	text23
  3696  001A4A                     __ptext23:
  3697                           	opt stack 0
  3698  001A4A                     _Delay1TCYx:
  3699                           	opt stack 24
  3700                           
  3701                           ;incstack = 0
  3702                           ;Delay1TCYx@unit stored from wreg
  3703  001A4A  6E20               	movwf	Delay1TCYx@unit,c
  3704  001A4C                     l805:
  3705  001A4C  F000               	nop	
  3706  001A4E  2E20               	decfsz	Delay1TCYx@unit,f,c
  3707  001A50  D7FD               	goto	l805
  3708  001A52  0012               	return	
  3709  001A54  0012               	return		;funcret
  3710  001A56                     __end_of_Delay1TCYx:
  3711                           	opt stack 0
  3712                           tblptru	equ	0xFF8
  3713                           tblptrh	equ	0xFF7
  3714                           tblptrl	equ	0xFF6
  3715                           tablat	equ	0xFF5
  3716                           prodh	equ	0xFF4
  3717                           prodl	equ	0xFF3
  3718                           intcon2	equ	0xFF1
  3719                           indf0	equ	0xFEF
  3720                           fsr0h	equ	0xFEA
  3721                           fsr0l	equ	0xFE9
  3722                           wreg	equ	0xFE8
  3723                           indf2	equ	0xFDF
  3724                           postinc2	equ	0xFDE
  3725                           postdec2	equ	0xFDD
  3726                           fsr2h	equ	0xFDA
  3727                           fsr2l	equ	0xFD9
  3728                           status	equ	0xFD8
  3729                           
  3730 ;; *************** function _InitInterrupts *****************
  3731 ;; Defined at:
  3732 ;;		line 93 in file "ports.c"
  3733 ;; Parameters:    Size  Location     Type
  3734 ;;		None
  3735 ;; Auto vars:     Size  Location     Type
  3736 ;;		None
  3737 ;; Return value:  Size  Location     Type
  3738 ;;		None               void
  3739 ;; Registers used:
  3740 ;;		wreg, status,2
  3741 ;; Tracked objects:
  3742 ;;		On entry : 0/0
  3743 ;;		On exit  : 0/0
  3744 ;;		Unchanged: 0/0
  3745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3746 ;;      Params:         0       0       0       0       0       0       0
  3747 ;;      Locals:         0       0       0       0       0       0       0
  3748 ;;      Temps:          0       0       0       0       0       0       0
  3749 ;;      Totals:         0       0       0       0       0       0       0
  3750 ;;Total ram usage:        0 bytes
  3751 ;; Hardware stack levels used:    1
  3752 ;; Hardware stack levels required when called:    2
  3753 ;; This function calls:
  3754 ;;		Nothing
  3755 ;; This function is called by:
  3756 ;;		_main
  3757 ;; This function uses a non-reentrant model
  3758 ;;
  3759                           
  3760                           	psect	text24
  3761  0019BE                     __ptext24:
  3762                           	opt stack 0
  3763  0019BE                     _InitInterrupts:
  3764                           	opt stack 28
  3765                           
  3766                           ;ports.c: 96: INTCON2bits.INTEDG0 = 0;
  3767                           
  3768                           ;incstack = 0
  3769  0019BE  9CF1               	bcf	intcon2,6,c	;volatile
  3770                           
  3771                           ;ports.c: 97: INTCONbits.INT0IF = 0;
  3772  0019C0  92F2               	bcf	intcon,1,c	;volatile
  3773                           
  3774                           ;ports.c: 98: INTCONbits.INT0IE = 1;
  3775  0019C2  88F2               	bsf	intcon,4,c	;volatile
  3776                           
  3777                           ;ports.c: 103: INTCONbits.TMR0IF = 0;
  3778  0019C4  94F2               	bcf	intcon,2,c	;volatile
  3779                           
  3780                           ;ports.c: 104: INTCON2bits.TMR0IP = 1;
  3781  0019C6  84F1               	bsf	intcon2,2,c	;volatile
  3782                           
  3783                           ;ports.c: 105: INTCONbits.TMR0IE = 1;
  3784  0019C8  8AF2               	bsf	intcon,5,c	;volatile
  3785                           
  3786                           ;ports.c: 107: T0CON = 0b000000000;
  3787  0019CA  0E00               	movlw	0
  3788  0019CC  6ED5               	movwf	4053,c	;volatile
  3789                           
  3790                           ;ports.c: 108: T0CONbits.T08BIT = 0;
  3791  0019CE  9CD5               	bcf	4053,6,c	;volatile
  3792                           
  3793                           ;ports.c: 109: T0CONbits.T0CS = 0;
  3794  0019D0  9AD5               	bcf	4053,5,c	;volatile
  3795                           
  3796                           ;ports.c: 110: T0CONbits.PSA = 1;
  3797  0019D2  86D5               	bsf	4053,3,c	;volatile
  3798                           
  3799                           ;ports.c: 113: RCONbits.IPEN = 1;
  3800  0019D4  8ED0               	bsf	4048,7,c	;volatile
  3801                           
  3802                           ;ports.c: 114: INTCONbits.GIEL = 1;
  3803  0019D6  8CF2               	bsf	intcon,6,c	;volatile
  3804                           
  3805                           ;ports.c: 115: INTCONbits.GIEH = 1;
  3806  0019D8  8EF2               	bsf	intcon,7,c	;volatile
  3807  0019DA  0012               	return		;funcret
  3808  0019DC                     __end_of_InitInterrupts:
  3809                           	opt stack 0
  3810                           tblptru	equ	0xFF8
  3811                           tblptrh	equ	0xFF7
  3812                           tblptrl	equ	0xFF6
  3813                           tablat	equ	0xFF5
  3814                           prodh	equ	0xFF4
  3815                           prodl	equ	0xFF3
  3816                           intcon	equ	0xFF2
  3817                           intcon2	equ	0xFF1
  3818                           indf0	equ	0xFEF
  3819                           fsr0h	equ	0xFEA
  3820                           fsr0l	equ	0xFE9
  3821                           wreg	equ	0xFE8
  3822                           indf2	equ	0xFDF
  3823                           postinc2	equ	0xFDE
  3824                           postdec2	equ	0xFDD
  3825                           fsr2h	equ	0xFDA
  3826                           fsr2l	equ	0xFD9
  3827                           status	equ	0xFD8
  3828                           
  3829 ;; *************** function _InitAnalogueInputs *****************
  3830 ;; Defined at:
  3831 ;;		line 132 in file "ports.c"
  3832 ;; Parameters:    Size  Location     Type
  3833 ;;		None
  3834 ;; Auto vars:     Size  Location     Type
  3835 ;;		None
  3836 ;; Return value:  Size  Location     Type
  3837 ;;		None               void
  3838 ;; Registers used:
  3839 ;;		wreg, status,2
  3840 ;; Tracked objects:
  3841 ;;		On entry : 0/0
  3842 ;;		On exit  : 0/0
  3843 ;;		Unchanged: 0/0
  3844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3845 ;;      Params:         0       0       0       0       0       0       0
  3846 ;;      Locals:         0       0       0       0       0       0       0
  3847 ;;      Temps:          0       0       0       0       0       0       0
  3848 ;;      Totals:         0       0       0       0       0       0       0
  3849 ;;Total ram usage:        0 bytes
  3850 ;; Hardware stack levels used:    1
  3851 ;; Hardware stack levels required when called:    2
  3852 ;; This function calls:
  3853 ;;		Nothing
  3854 ;; This function is called by:
  3855 ;;		_main
  3856 ;; This function uses a non-reentrant model
  3857 ;;
  3858                           
  3859                           	psect	text25
  3860  0019F4                     __ptext25:
  3861                           	opt stack 0
  3862  0019F4                     _InitAnalogueInputs:
  3863                           	opt stack 28
  3864                           
  3865                           ;ports.c: 135: TRISAbits.TRISA0 = 1;
  3866                           
  3867                           ;incstack = 0
  3868  0019F4  8092               	bsf	3986,0,c	;volatile
  3869                           
  3870                           ;ports.c: 144: ANSEL = 0b00000001;
  3871  0019F6  0E01               	movlw	1
  3872  0019F8  6E7E               	movwf	3966,c	;volatile
  3873                           
  3874                           ;ports.c: 147: ADCON1 = 0b00000000;
  3875  0019FA  0E00               	movlw	0
  3876  0019FC  6EC1               	movwf	4033,c	;volatile
  3877                           
  3878                           ;ports.c: 148: ADCON2 = 0b00111000;
  3879  0019FE  0E38               	movlw	56
  3880  001A00  6EC0               	movwf	4032,c	;volatile
  3881                           
  3882                           ;ports.c: 166: ADCON0 = 0b00000001;
  3883  001A02  0E01               	movlw	1
  3884  001A04  6EC2               	movwf	4034,c	;volatile
  3885  001A06  0012               	return		;funcret
  3886  001A08                     __end_of_InitAnalogueInputs:
  3887                           	opt stack 0
  3888                           tblptru	equ	0xFF8
  3889                           tblptrh	equ	0xFF7
  3890                           tblptrl	equ	0xFF6
  3891                           tablat	equ	0xFF5
  3892                           prodh	equ	0xFF4
  3893                           prodl	equ	0xFF3
  3894                           intcon	equ	0xFF2
  3895                           intcon2	equ	0xFF1
  3896                           indf0	equ	0xFEF
  3897                           fsr0h	equ	0xFEA
  3898                           fsr0l	equ	0xFE9
  3899                           wreg	equ	0xFE8
  3900                           indf2	equ	0xFDF
  3901                           postinc2	equ	0xFDE
  3902                           postdec2	equ	0xFDD
  3903                           fsr2h	equ	0xFDA
  3904                           fsr2l	equ	0xFD9
  3905                           status	equ	0xFD8
  3906                           
  3907 ;; *************** function _Delay1KTCYx *****************
  3908 ;; Defined at:
  3909 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d1ktcyx.c"
  3910 ;; Parameters:    Size  Location     Type
  3911 ;;  unit            1    wreg     unsigned char 
  3912 ;; Auto vars:     Size  Location     Type
  3913 ;;  unit            1   31[COMRAM] unsigned char 
  3914 ;; Return value:  Size  Location     Type
  3915 ;;		None               void
  3916 ;; Registers used:
  3917 ;;		wreg
  3918 ;; Tracked objects:
  3919 ;;		On entry : 0/0
  3920 ;;		On exit  : 0/0
  3921 ;;		Unchanged: 0/0
  3922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3923 ;;      Params:         0       0       0       0       0       0       0
  3924 ;;      Locals:         1       0       0       0       0       0       0
  3925 ;;      Temps:          0       0       0       0       0       0       0
  3926 ;;      Totals:         1       0       0       0       0       0       0
  3927 ;;Total ram usage:        1 bytes
  3928 ;; Hardware stack levels used:    1
  3929 ;; Hardware stack levels required when called:    2
  3930 ;; This function calls:
  3931 ;;		Nothing
  3932 ;; This function is called by:
  3933 ;;		_main
  3934 ;; This function uses a non-reentrant model
  3935 ;;
  3936                           
  3937                           	psect	text26
  3938  001A1A                     __ptext26:
  3939                           	opt stack 0
  3940  001A1A                     _Delay1KTCYx:
  3941                           	opt stack 28
  3942                           
  3943                           ;incstack = 0
  3944                           ;Delay1KTCYx@unit stored from wreg
  3945  001A1A  6E20               	movwf	Delay1KTCYx@unit,c
  3946  001A1C  0EFA               	movlw	250
  3947  001A1E                     u3777:
  3948  001A1E  F000               	nop	
  3949  001A20  2EE8               	decfsz	wreg,f,c
  3950  001A22  D7FD               	goto	u3777
  3951  001A24  2E20               	decfsz	Delay1KTCYx@unit,f,c
  3952  001A26  D7FA               	goto	l4023
  3953  001A28  0012               	return	
  3954  001A2A  0012               	return		;funcret
  3955  001A2C                     __end_of_Delay1KTCYx:
  3956                           	opt stack 0
  3957                           tblptru	equ	0xFF8
  3958                           tblptrh	equ	0xFF7
  3959                           tblptrl	equ	0xFF6
  3960                           tablat	equ	0xFF5
  3961                           prodh	equ	0xFF4
  3962                           prodl	equ	0xFF3
  3963                           intcon	equ	0xFF2
  3964                           intcon2	equ	0xFF1
  3965                           indf0	equ	0xFEF
  3966                           fsr0h	equ	0xFEA
  3967                           fsr0l	equ	0xFE9
  3968                           wreg	equ	0xFE8
  3969                           indf2	equ	0xFDF
  3970                           postinc2	equ	0xFDE
  3971                           postdec2	equ	0xFDD
  3972                           fsr2h	equ	0xFDA
  3973                           fsr2l	equ	0xFD9
  3974                           status	equ	0xFD8
  3975                           
  3976 ;; *************** function _ConvertTimerOverflowToWheelRPM *****************
  3977 ;; Defined at:
  3978 ;;		line 269 in file "main.c"
  3979 ;; Parameters:    Size  Location     Type
  3980 ;;		None
  3981 ;; Auto vars:     Size  Location     Type
  3982 ;;		None
  3983 ;; Return value:  Size  Location     Type
  3984 ;;                  2   31[COMRAM] unsigned short 
  3985 ;; Registers used:
  3986 ;;		wreg, status,2, status,0
  3987 ;; Tracked objects:
  3988 ;;		On entry : 0/0
  3989 ;;		On exit  : 0/0
  3990 ;;		Unchanged: 0/0
  3991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3992 ;;      Params:         2       0       0       0       0       0       0
  3993 ;;      Locals:         0       0       0       0       0       0       0
  3994 ;;      Temps:          0       0       0       0       0       0       0
  3995 ;;      Totals:         2       0       0       0       0       0       0
  3996 ;;Total ram usage:        2 bytes
  3997 ;; Hardware stack levels used:    1
  3998 ;; Hardware stack levels required when called:    2
  3999 ;; This function calls:
  4000 ;;		Nothing
  4001 ;; This function is called by:
  4002 ;;		_main
  4003 ;; This function uses a non-reentrant model
  4004 ;;
  4005                           
  4006                           	psect	text27
  4007  000650                     __ptext27:
  4008                           	opt stack 0
  4009  000650                     _ConvertTimerOverflowToWheelRPM:
  4010                           	opt stack 28
  4011                           
  4012                           ;main.c: 270: if (TimerCounterAtOverflow <=93) {
  4013                           
  4014                           ;incstack = 0
  4015  000650  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4016  000652  E109               	bnz	l3151
  4017  000654  0E5E               	movlw	94
  4018  000656  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4019  000658  B0D8               	btfsc	status,0,c
  4020  00065A  D005               	goto	l3151
  4021                           
  4022                           ;main.c: 271: return 1300;
  4023  00065C  0E05               	movlw	5
  4024  00065E  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4025  000660  0E14               	movlw	20
  4026  000662  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4027                           
  4028                           ;main.c: 272: } else if (TimerCounterAtOverflow <=96) {
  4029  000664  0012               	return	
  4030  000666                     l3151:
  4031  000666  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4032  000668  E109               	bnz	l3159
  4033  00066A  0E61               	movlw	97
  4034  00066C  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4035  00066E  B0D8               	btfsc	status,0,c
  4036  000670  D005               	goto	l3159
  4037                           
  4038                           ;main.c: 273: return 1250;
  4039  000672  0E04               	movlw	4
  4040  000674  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4041  000676  0EE2               	movlw	226
  4042  000678  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4043                           
  4044                           ;main.c: 274: } else if (TimerCounterAtOverflow <=100) {
  4045  00067A  0012               	return	
  4046  00067C                     l3159:
  4047  00067C  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4048  00067E  E109               	bnz	l3167
  4049  000680  0E65               	movlw	101
  4050  000682  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4051  000684  B0D8               	btfsc	status,0,c
  4052  000686  D005               	goto	l3167
  4053                           
  4054                           ;main.c: 275: return 1200;
  4055  000688  0E04               	movlw	4
  4056  00068A  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4057  00068C  0EB0               	movlw	176
  4058  00068E  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4059                           
  4060                           ;main.c: 276: } else if (TimerCounterAtOverflow <=104) {
  4061  000690  0012               	return	
  4062  000692                     l3167:
  4063  000692  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4064  000694  E109               	bnz	l3175
  4065  000696  0E69               	movlw	105
  4066  000698  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4067  00069A  B0D8               	btfsc	status,0,c
  4068  00069C  D005               	goto	l3175
  4069                           
  4070                           ;main.c: 277: return 1150;
  4071  00069E  0E04               	movlw	4
  4072  0006A0  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4073  0006A2  0E7E               	movlw	126
  4074  0006A4  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4075                           
  4076                           ;main.c: 278: } else if (TimerCounterAtOverflow <=109) {
  4077  0006A6  0012               	return	
  4078  0006A8                     l3175:
  4079  0006A8  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4080  0006AA  E109               	bnz	l3183
  4081  0006AC  0E6E               	movlw	110
  4082  0006AE  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4083  0006B0  B0D8               	btfsc	status,0,c
  4084  0006B2  D005               	goto	l3183
  4085                           
  4086                           ;main.c: 279: return 1100;
  4087  0006B4  0E04               	movlw	4
  4088  0006B6  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4089  0006B8  0E4C               	movlw	76
  4090  0006BA  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4091                           
  4092                           ;main.c: 280: } else if (TimerCounterAtOverflow <=114) {
  4093  0006BC  0012               	return	
  4094  0006BE                     l3183:
  4095  0006BE  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4096  0006C0  E109               	bnz	l3191
  4097  0006C2  0E73               	movlw	115
  4098  0006C4  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4099  0006C6  B0D8               	btfsc	status,0,c
  4100  0006C8  D005               	goto	l3191
  4101                           
  4102                           ;main.c: 281: return 1050;
  4103  0006CA  0E04               	movlw	4
  4104  0006CC  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4105  0006CE  0E1A               	movlw	26
  4106  0006D0  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4107                           
  4108                           ;main.c: 282: } else if (TimerCounterAtOverflow <=120) {
  4109  0006D2  0012               	return	
  4110  0006D4                     l3191:
  4111  0006D4  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4112  0006D6  E109               	bnz	l3199
  4113  0006D8  0E79               	movlw	121
  4114  0006DA  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4115  0006DC  B0D8               	btfsc	status,0,c
  4116  0006DE  D005               	goto	l3199
  4117                           
  4118                           ;main.c: 283: return 1000;
  4119  0006E0  0E03               	movlw	3
  4120  0006E2  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4121  0006E4  0EE8               	movlw	232
  4122  0006E6  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4123                           
  4124                           ;main.c: 284: } else if (TimerCounterAtOverflow <=126) {
  4125  0006E8  0012               	return	
  4126  0006EA                     l3199:
  4127  0006EA  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4128  0006EC  E109               	bnz	l3207
  4129  0006EE  0E7F               	movlw	127
  4130  0006F0  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4131  0006F2  B0D8               	btfsc	status,0,c
  4132  0006F4  D005               	goto	l3207
  4133                           
  4134                           ;main.c: 285: return 950;
  4135  0006F6  0E03               	movlw	3
  4136  0006F8  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4137  0006FA  0EB6               	movlw	182
  4138  0006FC  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4139                           
  4140                           ;main.c: 286: } else if (TimerCounterAtOverflow <=133) {
  4141  0006FE  0012               	return	
  4142  000700                     l3207:
  4143  000700  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4144  000702  E109               	bnz	l3215
  4145  000704  0E86               	movlw	134
  4146  000706  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4147  000708  B0D8               	btfsc	status,0,c
  4148  00070A  D005               	goto	l3215
  4149                           
  4150                           ;main.c: 287: return 900;
  4151  00070C  0E03               	movlw	3
  4152  00070E  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4153  000710  0E84               	movlw	132
  4154  000712  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4155                           
  4156                           ;main.c: 288: } else if (TimerCounterAtOverflow <=141) {
  4157  000714  0012               	return	
  4158  000716                     l3215:
  4159  000716  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4160  000718  E109               	bnz	l3223
  4161  00071A  0E8E               	movlw	142
  4162  00071C  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4163  00071E  B0D8               	btfsc	status,0,c
  4164  000720  D005               	goto	l3223
  4165                           
  4166                           ;main.c: 289: return 850;
  4167  000722  0E03               	movlw	3
  4168  000724  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4169  000726  0E52               	movlw	82
  4170  000728  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4171                           
  4172                           ;main.c: 290: } else if (TimerCounterAtOverflow <=150) {
  4173  00072A  0012               	return	
  4174  00072C                     l3223:
  4175  00072C  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4176  00072E  E109               	bnz	l3231
  4177  000730  0E97               	movlw	151
  4178  000732  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4179  000734  B0D8               	btfsc	status,0,c
  4180  000736  D005               	goto	l3231
  4181                           
  4182                           ;main.c: 291: return 800;
  4183  000738  0E03               	movlw	3
  4184  00073A  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4185  00073C  0E20               	movlw	32
  4186  00073E  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4187                           
  4188                           ;main.c: 292: } else if (TimerCounterAtOverflow <=160) {
  4189  000740  0012               	return	
  4190  000742                     l3231:
  4191  000742  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4192  000744  E109               	bnz	l3239
  4193  000746  0EA1               	movlw	161
  4194  000748  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4195  00074A  B0D8               	btfsc	status,0,c
  4196  00074C  D005               	goto	l3239
  4197                           
  4198                           ;main.c: 293: return 750;
  4199  00074E  0E02               	movlw	2
  4200  000750  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4201  000752  0EEE               	movlw	238
  4202  000754  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4203                           
  4204                           ;main.c: 294: } else if (TimerCounterAtOverflow <=171) {
  4205  000756  0012               	return	
  4206  000758                     l3239:
  4207  000758  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4208  00075A  E109               	bnz	l3247
  4209  00075C  0EAC               	movlw	172
  4210  00075E  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4211  000760  B0D8               	btfsc	status,0,c
  4212  000762  D005               	goto	l3247
  4213                           
  4214                           ;main.c: 295: return 660;
  4215  000764  0E02               	movlw	2
  4216  000766  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4217  000768  0E94               	movlw	148
  4218  00076A  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4219                           
  4220                           ;main.c: 296: } else if (TimerCounterAtOverflow <=185) {
  4221  00076C  0012               	return	
  4222  00076E                     l3247:
  4223  00076E  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4224  000770  E109               	bnz	l3255
  4225  000772  0EBA               	movlw	186
  4226  000774  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4227  000776  B0D8               	btfsc	status,0,c
  4228  000778  D005               	goto	l3255
  4229                           
  4230                           ;main.c: 297: return 650;
  4231  00077A  0E02               	movlw	2
  4232  00077C  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4233  00077E  0E8A               	movlw	138
  4234  000780  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4235                           
  4236                           ;main.c: 298: } else if (TimerCounterAtOverflow <=187) {
  4237  000782  0012               	return	
  4238  000784                     l3255:
  4239  000784  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4240  000786  E109               	bnz	l3263
  4241  000788  0EBC               	movlw	188
  4242  00078A  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4243  00078C  B0D8               	btfsc	status,0,c
  4244  00078E  D005               	goto	l3263
  4245                           
  4246                           ;main.c: 299: return 640;
  4247  000790  0E02               	movlw	2
  4248  000792  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4249  000794  0E80               	movlw	128
  4250  000796  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4251                           
  4252                           ;main.c: 300: } else if (TimerCounterAtOverflow <=190) {
  4253  000798  0012               	return	
  4254  00079A                     l3263:
  4255  00079A  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4256  00079C  E109               	bnz	l3271
  4257  00079E  0EBF               	movlw	191
  4258  0007A0  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4259  0007A2  B0D8               	btfsc	status,0,c
  4260  0007A4  D005               	goto	l3271
  4261                           
  4262                           ;main.c: 301: return 630;
  4263  0007A6  0E02               	movlw	2
  4264  0007A8  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4265  0007AA  0E76               	movlw	118
  4266  0007AC  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4267                           
  4268                           ;main.c: 302: } else if (TimerCounterAtOverflow <=193) {
  4269  0007AE  0012               	return	
  4270  0007B0                     l3271:
  4271  0007B0  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4272  0007B2  E109               	bnz	l3279
  4273  0007B4  0EC2               	movlw	194
  4274  0007B6  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4275  0007B8  B0D8               	btfsc	status,0,c
  4276  0007BA  D005               	goto	l3279
  4277                           
  4278                           ;main.c: 303: return 620;
  4279  0007BC  0E02               	movlw	2
  4280  0007BE  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4281  0007C0  0E6C               	movlw	108
  4282  0007C2  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4283                           
  4284                           ;main.c: 304: } else if (TimerCounterAtOverflow <=197) {
  4285  0007C4  0012               	return	
  4286  0007C6                     l3279:
  4287  0007C6  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4288  0007C8  E109               	bnz	l3287
  4289  0007CA  0EC6               	movlw	198
  4290  0007CC  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4291  0007CE  B0D8               	btfsc	status,0,c
  4292  0007D0  D005               	goto	l3287
  4293                           
  4294                           ;main.c: 305: return 610;
  4295  0007D2  0E02               	movlw	2
  4296  0007D4  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4297  0007D6  0E62               	movlw	98
  4298  0007D8  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4299                           
  4300                           ;main.c: 306: } else if (TimerCounterAtOverflow <=200) {
  4301  0007DA  0012               	return	
  4302  0007DC                     l3287:
  4303  0007DC  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4304  0007DE  E109               	bnz	l3295
  4305  0007E0  0EC9               	movlw	201
  4306  0007E2  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4307  0007E4  B0D8               	btfsc	status,0,c
  4308  0007E6  D005               	goto	l3295
  4309                           
  4310                           ;main.c: 307: return 600;
  4311  0007E8  0E02               	movlw	2
  4312  0007EA  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4313  0007EC  0E58               	movlw	88
  4314  0007EE  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4315                           
  4316                           ;main.c: 308: } else if (TimerCounterAtOverflow <=204) {
  4317  0007F0  0012               	return	
  4318  0007F2                     l3295:
  4319  0007F2  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4320  0007F4  E109               	bnz	l3303
  4321  0007F6  0ECD               	movlw	205
  4322  0007F8  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4323  0007FA  B0D8               	btfsc	status,0,c
  4324  0007FC  D005               	goto	l3303
  4325                           
  4326                           ;main.c: 309: return 590;
  4327  0007FE  0E02               	movlw	2
  4328  000800  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4329  000802  0E4E               	movlw	78
  4330  000804  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4331                           
  4332                           ;main.c: 310: } else if (TimerCounterAtOverflow <=207) {
  4333  000806  0012               	return	
  4334  000808                     l3303:
  4335  000808  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4336  00080A  E109               	bnz	l3311
  4337  00080C  0ED0               	movlw	208
  4338  00080E  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4339  000810  B0D8               	btfsc	status,0,c
  4340  000812  D005               	goto	l3311
  4341                           
  4342                           ;main.c: 311: return 580;
  4343  000814  0E02               	movlw	2
  4344  000816  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4345  000818  0E44               	movlw	68
  4346  00081A  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4347                           
  4348                           ;main.c: 312: } else if (TimerCounterAtOverflow <=211) {
  4349  00081C  0012               	return	
  4350  00081E                     l3311:
  4351  00081E  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4352  000820  E109               	bnz	l3319
  4353  000822  0ED4               	movlw	212
  4354  000824  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4355  000826  B0D8               	btfsc	status,0,c
  4356  000828  D005               	goto	l3319
  4357                           
  4358                           ;main.c: 313: return 570;
  4359  00082A  0E02               	movlw	2
  4360  00082C  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4361  00082E  0E3A               	movlw	58
  4362  000830  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4363                           
  4364                           ;main.c: 314: } else if (TimerCounterAtOverflow <=214) {
  4365  000832  0012               	return	
  4366  000834                     l3319:
  4367  000834  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4368  000836  E109               	bnz	l3327
  4369  000838  0ED7               	movlw	215
  4370  00083A  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4371  00083C  B0D8               	btfsc	status,0,c
  4372  00083E  D005               	goto	l3327
  4373                           
  4374                           ;main.c: 315: return 560;
  4375  000840  0E02               	movlw	2
  4376  000842  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4377  000844  0E30               	movlw	48
  4378  000846  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4379                           
  4380                           ;main.c: 316: } else if (TimerCounterAtOverflow <=218) {
  4381  000848  0012               	return	
  4382  00084A                     l3327:
  4383  00084A  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4384  00084C  E109               	bnz	l3335
  4385  00084E  0EDB               	movlw	219
  4386  000850  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4387  000852  B0D8               	btfsc	status,0,c
  4388  000854  D005               	goto	l3335
  4389                           
  4390                           ;main.c: 317: return 550;
  4391  000856  0E02               	movlw	2
  4392  000858  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4393  00085A  0E26               	movlw	38
  4394  00085C  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4395                           
  4396                           ;main.c: 318: } else if (TimerCounterAtOverflow <=222) {
  4397  00085E  0012               	return	
  4398  000860                     l3335:
  4399  000860  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4400  000862  E109               	bnz	l3343
  4401  000864  0EDF               	movlw	223
  4402  000866  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4403  000868  B0D8               	btfsc	status,0,c
  4404  00086A  D005               	goto	l3343
  4405                           
  4406                           ;main.c: 319: return 540;
  4407  00086C  0E02               	movlw	2
  4408  00086E  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4409  000870  0E1C               	movlw	28
  4410  000872  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4411                           
  4412                           ;main.c: 320: } else if (TimerCounterAtOverflow <=227) {
  4413  000874  0012               	return	
  4414  000876                     l3343:
  4415  000876  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4416  000878  E109               	bnz	l3351
  4417  00087A  0EE4               	movlw	228
  4418  00087C  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4419  00087E  B0D8               	btfsc	status,0,c
  4420  000880  D005               	goto	l3351
  4421                           
  4422                           ;main.c: 321: return 530;
  4423  000882  0E02               	movlw	2
  4424  000884  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4425  000886  0E12               	movlw	18
  4426  000888  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4427                           
  4428                           ;main.c: 322: } else if (TimerCounterAtOverflow <=231) {
  4429  00088A  0012               	return	
  4430  00088C                     l3351:
  4431  00088C  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4432  00088E  E109               	bnz	l3359
  4433  000890  0EE8               	movlw	232
  4434  000892  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4435  000894  B0D8               	btfsc	status,0,c
  4436  000896  D005               	goto	l3359
  4437                           
  4438                           ;main.c: 323: return 520;
  4439  000898  0E02               	movlw	2
  4440  00089A  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4441  00089C  0E08               	movlw	8
  4442  00089E  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4443                           
  4444                           ;main.c: 324: } else if (TimerCounterAtOverflow <=235) {
  4445  0008A0  0012               	return	
  4446  0008A2                     l3359:
  4447  0008A2  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4448  0008A4  E109               	bnz	l3367
  4449  0008A6  0EEC               	movlw	236
  4450  0008A8  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4451  0008AA  B0D8               	btfsc	status,0,c
  4452  0008AC  D005               	goto	l3367
  4453                           
  4454                           ;main.c: 325: return 510;
  4455  0008AE  0E01               	movlw	1
  4456  0008B0  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4457  0008B2  0EFE               	movlw	254
  4458  0008B4  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4459                           
  4460                           ;main.c: 326: } else if (TimerCounterAtOverflow <=240) {
  4461  0008B6  0012               	return	
  4462  0008B8                     l3367:
  4463  0008B8  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4464  0008BA  E109               	bnz	l3375
  4465  0008BC  0EF1               	movlw	241
  4466  0008BE  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4467  0008C0  B0D8               	btfsc	status,0,c
  4468  0008C2  D005               	goto	l3375
  4469                           
  4470                           ;main.c: 327: return 500;
  4471  0008C4  0E01               	movlw	1
  4472  0008C6  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4473  0008C8  0EF4               	movlw	244
  4474  0008CA  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4475                           
  4476                           ;main.c: 328: } else if (TimerCounterAtOverflow <=245) {
  4477  0008CC  0012               	return	
  4478  0008CE                     l3375:
  4479  0008CE  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4480  0008D0  E109               	bnz	l3383
  4481  0008D2  0EF6               	movlw	246
  4482  0008D4  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4483  0008D6  B0D8               	btfsc	status,0,c
  4484  0008D8  D005               	goto	l3383
  4485                           
  4486                           ;main.c: 329: return 490;
  4487  0008DA  0E01               	movlw	1
  4488  0008DC  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4489  0008DE  0EEA               	movlw	234
  4490  0008E0  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4491                           
  4492                           ;main.c: 330: } else if (TimerCounterAtOverflow <=250) {
  4493  0008E2  0012               	return	
  4494  0008E4                     l3383:
  4495  0008E4  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4496  0008E6  E109               	bnz	l3391
  4497  0008E8  0EFB               	movlw	251
  4498  0008EA  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4499  0008EC  B0D8               	btfsc	status,0,c
  4500  0008EE  D005               	goto	l3391
  4501                           
  4502                           ;main.c: 331: return 480;
  4503  0008F0  0E01               	movlw	1
  4504  0008F2  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4505  0008F4  0EE0               	movlw	224
  4506  0008F6  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4507                           
  4508                           ;main.c: 332: } else if (TimerCounterAtOverflow <=256) {
  4509  0008F8  0012               	return	
  4510  0008FA                     l3391:
  4511  0008FA  0437               	decf	_TimerCounterAtOverflow,w,c
  4512  0008FC  0E01               	movlw	1
  4513  0008FE  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4514  000900  B0D8               	btfsc	status,0,c
  4515  000902  D005               	goto	l3399
  4516                           
  4517                           ;main.c: 333: return 470;
  4518  000904  0E01               	movlw	1
  4519  000906  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4520  000908  0ED6               	movlw	214
  4521  00090A  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4522                           
  4523                           ;main.c: 334: } else if (TimerCounterAtOverflow <=261) {
  4524  00090C  0012               	return	
  4525  00090E                     l3399:
  4526  00090E  0E06               	movlw	6
  4527  000910  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4528  000912  0E01               	movlw	1
  4529  000914  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4530  000916  B0D8               	btfsc	status,0,c
  4531  000918  D005               	goto	l3407
  4532                           
  4533                           ;main.c: 335: return 460;
  4534  00091A  0E01               	movlw	1
  4535  00091C  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4536  00091E  0ECC               	movlw	204
  4537  000920  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4538                           
  4539                           ;main.c: 336: } else if (TimerCounterAtOverflow <=267) {
  4540  000922  0012               	return	
  4541  000924                     l3407:
  4542  000924  0E0C               	movlw	12
  4543  000926  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4544  000928  0E01               	movlw	1
  4545  00092A  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4546  00092C  B0D8               	btfsc	status,0,c
  4547  00092E  D005               	goto	l3415
  4548                           
  4549                           ;main.c: 337: return 450;
  4550  000930  0E01               	movlw	1
  4551  000932  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4552  000934  0EC2               	movlw	194
  4553  000936  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4554                           
  4555                           ;main.c: 338: } else if (TimerCounterAtOverflow <=273) {
  4556  000938  0012               	return	
  4557  00093A                     l3415:
  4558  00093A  0E12               	movlw	18
  4559  00093C  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4560  00093E  0E01               	movlw	1
  4561  000940  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4562  000942  B0D8               	btfsc	status,0,c
  4563  000944  D005               	goto	l3423
  4564                           
  4565                           ;main.c: 339: return 440;
  4566  000946  0E01               	movlw	1
  4567  000948  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4568  00094A  0EB8               	movlw	184
  4569  00094C  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4570                           
  4571                           ;main.c: 340: } else if (TimerCounterAtOverflow <=280) {
  4572  00094E  0012               	return	
  4573  000950                     l3423:
  4574  000950  0E19               	movlw	25
  4575  000952  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4576  000954  0E01               	movlw	1
  4577  000956  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4578  000958  B0D8               	btfsc	status,0,c
  4579  00095A  D005               	goto	l3431
  4580                           
  4581                           ;main.c: 341: return 430;
  4582  00095C  0E01               	movlw	1
  4583  00095E  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4584  000960  0EAE               	movlw	174
  4585  000962  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4586                           
  4587                           ;main.c: 342: } else if (TimerCounterAtOverflow <=286) {
  4588  000964  0012               	return	
  4589  000966                     l3431:
  4590  000966  0E1F               	movlw	31
  4591  000968  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4592  00096A  0E01               	movlw	1
  4593  00096C  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4594  00096E  B0D8               	btfsc	status,0,c
  4595  000970  D005               	goto	l3439
  4596                           
  4597                           ;main.c: 343: return 420;
  4598  000972  0E01               	movlw	1
  4599  000974  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4600  000976  0EA4               	movlw	164
  4601  000978  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4602                           
  4603                           ;main.c: 344: } else if (TimerCounterAtOverflow <=293) {
  4604  00097A  0012               	return	
  4605  00097C                     l3439:
  4606  00097C  0E26               	movlw	38
  4607  00097E  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4608  000980  0E01               	movlw	1
  4609  000982  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4610  000984  B0D8               	btfsc	status,0,c
  4611  000986  D005               	goto	l3447
  4612                           
  4613                           ;main.c: 345: return 410;
  4614  000988  0E01               	movlw	1
  4615  00098A  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4616  00098C  0E9A               	movlw	154
  4617  00098E  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4618                           
  4619                           ;main.c: 346: } else if (TimerCounterAtOverflow <=300) {
  4620  000990  0012               	return	
  4621  000992                     l3447:
  4622  000992  0E2D               	movlw	45
  4623  000994  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4624  000996  0E01               	movlw	1
  4625  000998  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4626  00099A  B0D8               	btfsc	status,0,c
  4627  00099C  D005               	goto	l3455
  4628                           
  4629                           ;main.c: 347: return 400;
  4630  00099E  0E01               	movlw	1
  4631  0009A0  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4632  0009A2  0E90               	movlw	144
  4633  0009A4  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4634                           
  4635                           ;main.c: 348: } else if (TimerCounterAtOverflow <=308) {
  4636  0009A6  0012               	return	
  4637  0009A8                     l3455:
  4638  0009A8  0E35               	movlw	53
  4639  0009AA  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4640  0009AC  0E01               	movlw	1
  4641  0009AE  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4642  0009B0  B0D8               	btfsc	status,0,c
  4643  0009B2  D005               	goto	l3463
  4644                           
  4645                           ;main.c: 349: return 390;
  4646  0009B4  0E01               	movlw	1
  4647  0009B6  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4648  0009B8  0E86               	movlw	134
  4649  0009BA  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4650                           
  4651                           ;main.c: 350: } else if (TimerCounterAtOverflow <=316) {
  4652  0009BC  0012               	return	
  4653  0009BE                     l3463:
  4654  0009BE  0E3D               	movlw	61
  4655  0009C0  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4656  0009C2  0E01               	movlw	1
  4657  0009C4  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4658  0009C6  B0D8               	btfsc	status,0,c
  4659  0009C8  D005               	goto	l3471
  4660                           
  4661                           ;main.c: 351: return 380;
  4662  0009CA  0E01               	movlw	1
  4663  0009CC  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4664  0009CE  0E7C               	movlw	124
  4665  0009D0  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4666                           
  4667                           ;main.c: 352: } else if (TimerCounterAtOverflow <=325) {
  4668  0009D2  0012               	return	
  4669  0009D4                     l3471:
  4670  0009D4  0E46               	movlw	70
  4671  0009D6  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4672  0009D8  0E01               	movlw	1
  4673  0009DA  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4674  0009DC  B0D8               	btfsc	status,0,c
  4675  0009DE  D005               	goto	l3479
  4676                           
  4677                           ;main.c: 353: return 370;
  4678  0009E0  0E01               	movlw	1
  4679  0009E2  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4680  0009E4  0E72               	movlw	114
  4681  0009E6  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4682                           
  4683                           ;main.c: 354: } else if (TimerCounterAtOverflow <=334) {
  4684  0009E8  0012               	return	
  4685  0009EA                     l3479:
  4686  0009EA  0E4F               	movlw	79
  4687  0009EC  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4688  0009EE  0E01               	movlw	1
  4689  0009F0  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4690  0009F2  B0D8               	btfsc	status,0,c
  4691  0009F4  D005               	goto	l3487
  4692                           
  4693                           ;main.c: 355: return 360;
  4694  0009F6  0E01               	movlw	1
  4695  0009F8  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4696  0009FA  0E68               	movlw	104
  4697  0009FC  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4698                           
  4699                           ;main.c: 356: } else if (TimerCounterAtOverflow <=343) {
  4700  0009FE  0012               	return	
  4701  000A00                     l3487:
  4702  000A00  0E58               	movlw	88
  4703  000A02  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4704  000A04  0E01               	movlw	1
  4705  000A06  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4706  000A08  B0D8               	btfsc	status,0,c
  4707  000A0A  D005               	goto	l3495
  4708                           
  4709                           ;main.c: 357: return 350;
  4710  000A0C  0E01               	movlw	1
  4711  000A0E  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4712  000A10  0E5E               	movlw	94
  4713  000A12  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4714                           
  4715                           ;main.c: 358: } else if (TimerCounterAtOverflow <=353) {
  4716  000A14  0012               	return	
  4717  000A16                     l3495:
  4718  000A16  0E62               	movlw	98
  4719  000A18  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4720  000A1A  0E01               	movlw	1
  4721  000A1C  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4722  000A1E  B0D8               	btfsc	status,0,c
  4723  000A20  D005               	goto	l3503
  4724                           
  4725                           ;main.c: 359: return 340;
  4726  000A22  0E01               	movlw	1
  4727  000A24  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4728  000A26  0E54               	movlw	84
  4729  000A28  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4730                           
  4731                           ;main.c: 360: } else if (TimerCounterAtOverflow <=364) {
  4732  000A2A  0012               	return	
  4733  000A2C                     l3503:
  4734  000A2C  0E6D               	movlw	109
  4735  000A2E  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4736  000A30  0E01               	movlw	1
  4737  000A32  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4738  000A34  B0D8               	btfsc	status,0,c
  4739  000A36  D005               	goto	l3511
  4740                           
  4741                           ;main.c: 361: return 330;
  4742  000A38  0E01               	movlw	1
  4743  000A3A  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4744  000A3C  0E4A               	movlw	74
  4745  000A3E  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4746                           
  4747                           ;main.c: 362: } else if (TimerCounterAtOverflow <=375) {
  4748  000A40  0012               	return	
  4749  000A42                     l3511:
  4750  000A42  0E78               	movlw	120
  4751  000A44  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4752  000A46  0E01               	movlw	1
  4753  000A48  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4754  000A4A  B0D8               	btfsc	status,0,c
  4755  000A4C  D005               	goto	l3519
  4756                           
  4757                           ;main.c: 363: return 320;
  4758  000A4E  0E01               	movlw	1
  4759  000A50  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4760  000A52  0E40               	movlw	64
  4761  000A54  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4762                           
  4763                           ;main.c: 364: } else if (TimerCounterAtOverflow <=388) {
  4764  000A56  0012               	return	
  4765  000A58                     l3519:
  4766  000A58  0E85               	movlw	133
  4767  000A5A  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4768  000A5C  0E01               	movlw	1
  4769  000A5E  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4770  000A60  B0D8               	btfsc	status,0,c
  4771  000A62  D005               	goto	l3527
  4772                           
  4773                           ;main.c: 365: return 310;
  4774  000A64  0E01               	movlw	1
  4775  000A66  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4776  000A68  0E36               	movlw	54
  4777  000A6A  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4778                           
  4779                           ;main.c: 366: } else if (TimerCounterAtOverflow <=400) {
  4780  000A6C  0012               	return	
  4781  000A6E                     l3527:
  4782  000A6E  0E91               	movlw	145
  4783  000A70  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4784  000A72  0E01               	movlw	1
  4785  000A74  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4786  000A76  B0D8               	btfsc	status,0,c
  4787  000A78  D005               	goto	l3535
  4788                           
  4789                           ;main.c: 367: return 300;
  4790  000A7A  0E01               	movlw	1
  4791  000A7C  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4792  000A7E  0E2C               	movlw	44
  4793  000A80  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4794                           
  4795                           ;main.c: 368: } else if (TimerCounterAtOverflow <=414) {
  4796  000A82  0012               	return	
  4797  000A84                     l3535:
  4798  000A84  0E9F               	movlw	159
  4799  000A86  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4800  000A88  0E01               	movlw	1
  4801  000A8A  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4802  000A8C  B0D8               	btfsc	status,0,c
  4803  000A8E  D005               	goto	l3543
  4804                           
  4805                           ;main.c: 369: return 290;
  4806  000A90  0E01               	movlw	1
  4807  000A92  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4808  000A94  0E22               	movlw	34
  4809  000A96  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4810                           
  4811                           ;main.c: 370: } else if (TimerCounterAtOverflow <=429) {
  4812  000A98  0012               	return	
  4813  000A9A                     l3543:
  4814  000A9A  0EAE               	movlw	174
  4815  000A9C  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4816  000A9E  0E01               	movlw	1
  4817  000AA0  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4818  000AA2  B0D8               	btfsc	status,0,c
  4819  000AA4  D005               	goto	l3551
  4820                           
  4821                           ;main.c: 371: return 280;
  4822  000AA6  0E01               	movlw	1
  4823  000AA8  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4824  000AAA  0E18               	movlw	24
  4825  000AAC  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4826                           
  4827                           ;main.c: 372: } else if (TimerCounterAtOverflow <=445) {
  4828  000AAE  0012               	return	
  4829  000AB0                     l3551:
  4830  000AB0  0EBE               	movlw	190
  4831  000AB2  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4832  000AB4  0E01               	movlw	1
  4833  000AB6  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4834  000AB8  B0D8               	btfsc	status,0,c
  4835  000ABA  D005               	goto	l3559
  4836                           
  4837                           ;main.c: 373: return 270;
  4838  000ABC  0E01               	movlw	1
  4839  000ABE  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4840  000AC0  0E0E               	movlw	14
  4841  000AC2  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4842                           
  4843                           ;main.c: 374: } else if (TimerCounterAtOverflow <=462) {
  4844  000AC4  0012               	return	
  4845  000AC6                     l3559:
  4846  000AC6  0ECF               	movlw	207
  4847  000AC8  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4848  000ACA  0E01               	movlw	1
  4849  000ACC  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4850  000ACE  B0D8               	btfsc	status,0,c
  4851  000AD0  D005               	goto	l3567
  4852                           
  4853                           ;main.c: 375: return 260;
  4854  000AD2  0E01               	movlw	1
  4855  000AD4  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4856  000AD6  0E04               	movlw	4
  4857  000AD8  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4858                           
  4859                           ;main.c: 376: } else if (TimerCounterAtOverflow <=480) {
  4860  000ADA  0012               	return	
  4861  000ADC                     l3567:
  4862  000ADC  0EE1               	movlw	225
  4863  000ADE  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4864  000AE0  0E01               	movlw	1
  4865  000AE2  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4866  000AE4  B0D8               	btfsc	status,0,c
  4867  000AE6  D005               	goto	l3575
  4868                           
  4869                           ;main.c: 377: return 250;
  4870  000AE8  0E00               	movlw	0
  4871  000AEA  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4872  000AEC  0EFA               	movlw	250
  4873  000AEE  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4874                           
  4875                           ;main.c: 378: } else if (TimerCounterAtOverflow <=499) {
  4876  000AF0  0012               	return	
  4877  000AF2                     l3575:
  4878  000AF2  0EF4               	movlw	244
  4879  000AF4  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4880  000AF6  0E01               	movlw	1
  4881  000AF8  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4882  000AFA  B0D8               	btfsc	status,0,c
  4883  000AFC  D005               	goto	l3583
  4884                           
  4885                           ;main.c: 379: return 240;
  4886  000AFE  0E00               	movlw	0
  4887  000B00  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4888  000B02  0EF0               	movlw	240
  4889  000B04  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4890                           
  4891                           ;main.c: 380: } else if (TimerCounterAtOverflow <=522) {
  4892  000B06  0012               	return	
  4893  000B08                     l3583:
  4894  000B08  0E0B               	movlw	11
  4895  000B0A  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4896  000B0C  0E02               	movlw	2
  4897  000B0E  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4898  000B10  B0D8               	btfsc	status,0,c
  4899  000B12  D005               	goto	l3591
  4900                           
  4901                           ;main.c: 381: return 230;
  4902  000B14  0E00               	movlw	0
  4903  000B16  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4904  000B18  0EE6               	movlw	230
  4905  000B1A  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4906                           
  4907                           ;main.c: 382: } else if (TimerCounterAtOverflow <=546) {
  4908  000B1C  0012               	return	
  4909  000B1E                     l3591:
  4910  000B1E  0E23               	movlw	35
  4911  000B20  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4912  000B22  0E02               	movlw	2
  4913  000B24  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4914  000B26  B0D8               	btfsc	status,0,c
  4915  000B28  D005               	goto	l3599
  4916                           
  4917                           ;main.c: 383: return 220;
  4918  000B2A  0E00               	movlw	0
  4919  000B2C  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4920  000B2E  0EDC               	movlw	220
  4921  000B30  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4922                           
  4923                           ;main.c: 384: } else if (TimerCounterAtOverflow <=572) {
  4924  000B32  0012               	return	
  4925  000B34                     l3599:
  4926  000B34  0E3D               	movlw	61
  4927  000B36  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4928  000B38  0E02               	movlw	2
  4929  000B3A  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4930  000B3C  B0D8               	btfsc	status,0,c
  4931  000B3E  D005               	goto	l3607
  4932                           
  4933                           ;main.c: 385: return 210;
  4934  000B40  0E00               	movlw	0
  4935  000B42  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4936  000B44  0ED2               	movlw	210
  4937  000B46  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4938                           
  4939                           ;main.c: 386: } else if (TimerCounterAtOverflow <=600) {
  4940  000B48  0012               	return	
  4941  000B4A                     l3607:
  4942  000B4A  0E59               	movlw	89
  4943  000B4C  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4944  000B4E  0E02               	movlw	2
  4945  000B50  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4946  000B52  B0D8               	btfsc	status,0,c
  4947  000B54  D005               	goto	l3615
  4948                           
  4949                           ;main.c: 387: return 200;
  4950  000B56  0E00               	movlw	0
  4951  000B58  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4952  000B5A  0EC8               	movlw	200
  4953  000B5C  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4954                           
  4955                           ;main.c: 388: } else if (TimerCounterAtOverflow <=632) {
  4956  000B5E  0012               	return	
  4957  000B60                     l3615:
  4958  000B60  0E79               	movlw	121
  4959  000B62  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4960  000B64  0E02               	movlw	2
  4961  000B66  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4962  000B68  B0D8               	btfsc	status,0,c
  4963  000B6A  D005               	goto	l3623
  4964                           
  4965                           ;main.c: 389: return 190;
  4966  000B6C  0E00               	movlw	0
  4967  000B6E  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4968  000B70  0EBE               	movlw	190
  4969  000B72  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4970                           
  4971                           ;main.c: 390: } else if (TimerCounterAtOverflow <=667) {
  4972  000B74  0012               	return	
  4973  000B76                     l3623:
  4974  000B76  0E9C               	movlw	156
  4975  000B78  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4976  000B7A  0E02               	movlw	2
  4977  000B7C  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4978  000B7E  B0D8               	btfsc	status,0,c
  4979  000B80  D005               	goto	l3631
  4980                           
  4981                           ;main.c: 391: return 180;
  4982  000B82  0E00               	movlw	0
  4983  000B84  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4984  000B86  0EB4               	movlw	180
  4985  000B88  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4986                           
  4987                           ;main.c: 392: } else if (TimerCounterAtOverflow <=706) {
  4988  000B8A  0012               	return	
  4989  000B8C                     l3631:
  4990  000B8C  0EC3               	movlw	195
  4991  000B8E  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4992  000B90  0E02               	movlw	2
  4993  000B92  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4994  000B94  B0D8               	btfsc	status,0,c
  4995  000B96  D005               	goto	l3639
  4996                           
  4997                           ;main.c: 393: return 170;
  4998  000B98  0E00               	movlw	0
  4999  000B9A  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  5000  000B9C  0EAA               	movlw	170
  5001  000B9E  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  5002                           
  5003                           ;main.c: 394: } else if (TimerCounterAtOverflow <=750) {
  5004  000BA0  0012               	return	
  5005  000BA2                     l3639:
  5006  000BA2  0EEF               	movlw	239
  5007  000BA4  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5008  000BA6  0E02               	movlw	2
  5009  000BA8  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5010  000BAA  B0D8               	btfsc	status,0,c
  5011  000BAC  D005               	goto	l3647
  5012                           
  5013                           ;main.c: 395: return 160;
  5014  000BAE  0E00               	movlw	0
  5015  000BB0  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  5016  000BB2  0EA0               	movlw	160
  5017  000BB4  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  5018                           
  5019                           ;main.c: 396: } else if (TimerCounterAtOverflow <=800) {
  5020  000BB6  0012               	return	
  5021  000BB8                     l3647:
  5022  000BB8  0E21               	movlw	33
  5023  000BBA  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5024  000BBC  0E03               	movlw	3
  5025  000BBE  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5026  000BC0  B0D8               	btfsc	status,0,c
  5027  000BC2  D005               	goto	l3655
  5028                           
  5029                           ;main.c: 397: return 150;
  5030  000BC4  0E00               	movlw	0
  5031  000BC6  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  5032  000BC8  0E96               	movlw	150
  5033  000BCA  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  5034                           
  5035                           ;main.c: 398: } else if (TimerCounterAtOverflow <=857) {
  5036  000BCC  0012               	return	
  5037  000BCE                     l3655:
  5038  000BCE  0E5A               	movlw	90
  5039  000BD0  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5040  000BD2  0E03               	movlw	3
  5041  000BD4  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5042  000BD6  B0D8               	btfsc	status,0,c
  5043  000BD8  D005               	goto	l3663
  5044                           
  5045                           ;main.c: 399: return 140;
  5046  000BDA  0E00               	movlw	0
  5047  000BDC  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  5048  000BDE  0E8C               	movlw	140
  5049  000BE0  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  5050                           
  5051                           ;main.c: 400: } else if (TimerCounterAtOverflow <=923) {
  5052  000BE2  0012               	return	
  5053  000BE4                     l3663:
  5054  000BE4  0E9C               	movlw	156
  5055  000BE6  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5056  000BE8  0E03               	movlw	3
  5057  000BEA  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5058  000BEC  B0D8               	btfsc	status,0,c
  5059  000BEE  D005               	goto	l3671
  5060                           
  5061                           ;main.c: 401: return 130;
  5062  000BF0  0E00               	movlw	0
  5063  000BF2  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  5064  000BF4  0E82               	movlw	130
  5065  000BF6  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  5066                           
  5067                           ;main.c: 402: } else if (TimerCounterAtOverflow <=1000) {
  5068  000BF8  0012               	return	
  5069  000BFA                     l3671:
  5070  000BFA  0EE9               	movlw	233
  5071  000BFC  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5072  000BFE  0E03               	movlw	3
  5073  000C00  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5074  000C02  B0D8               	btfsc	status,0,c
  5075  000C04  D005               	goto	l3679
  5076                           
  5077                           ;main.c: 403: return 120;
  5078  000C06  0E00               	movlw	0
  5079  000C08  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  5080  000C0A  0E78               	movlw	120
  5081  000C0C  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  5082                           
  5083                           ;main.c: 404: } else if (TimerCounterAtOverflow <=1091) {
  5084  000C0E  0012               	return	
  5085  000C10                     l3679:
  5086  000C10  0E44               	movlw	68
  5087  000C12  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5088  000C14  0E04               	movlw	4
  5089  000C16  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5090  000C18  B0D8               	btfsc	status,0,c
  5091  000C1A  D005               	goto	l3687
  5092                           
  5093                           ;main.c: 405: return 110;
  5094  000C1C  0E00               	movlw	0
  5095  000C1E  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  5096  000C20  0E6E               	movlw	110
  5097  000C22  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  5098                           
  5099                           ;main.c: 406: } else if (TimerCounterAtOverflow <=1200) {
  5100  000C24  0012               	return	
  5101  000C26                     l3687:
  5102  000C26  0EB1               	movlw	177
  5103  000C28  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5104  000C2A  0E04               	movlw	4
  5105  000C2C  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5106  000C2E  B0D8               	btfsc	status,0,c
  5107  000C30  D005               	goto	l3695
  5108                           
  5109                           ;main.c: 407: return 100;
  5110  000C32  0E00               	movlw	0
  5111  000C34  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  5112  000C36  0E64               	movlw	100
  5113  000C38  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  5114                           
  5115                           ;main.c: 408: } else if (TimerCounterAtOverflow <=1334) {
  5116  000C3A  0012               	return	
  5117  000C3C                     l3695:
  5118  000C3C  0E37               	movlw	55
  5119  000C3E  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5120  000C40  0E05               	movlw	5
  5121  000C42  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5122  000C44  B0D8               	btfsc	status,0,c
  5123  000C46  D005               	goto	l3703
  5124                           
  5125                           ;main.c: 409: return 90;
  5126  000C48  0E00               	movlw	0
  5127  000C4A  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  5128  000C4C  0E5A               	movlw	90
  5129  000C4E  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  5130                           
  5131                           ;main.c: 410: } else if (TimerCounterAtOverflow <=1500) {
  5132  000C50  0012               	return	
  5133  000C52                     l3703:
  5134  000C52  0EDD               	movlw	221
  5135  000C54  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5136  000C56  0E05               	movlw	5
  5137  000C58  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5138  000C5A  B0D8               	btfsc	status,0,c
  5139  000C5C  D005               	goto	l3711
  5140                           
  5141                           ;main.c: 411: return 80;
  5142  000C5E  0E00               	movlw	0
  5143  000C60  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  5144  000C62  0E50               	movlw	80
  5145  000C64  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  5146                           
  5147                           ;main.c: 412: } else if (TimerCounterAtOverflow <=1715) {
  5148  000C66  0012               	return	
  5149  000C68                     l3711:
  5150  000C68  0EB4               	movlw	180
  5151  000C6A  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5152  000C6C  0E06               	movlw	6
  5153  000C6E  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5154  000C70  B0D8               	btfsc	status,0,c
  5155  000C72  D005               	goto	l3719
  5156                           
  5157                           ;main.c: 413: return 70;
  5158  000C74  0E00               	movlw	0
  5159  000C76  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  5160  000C78  0E46               	movlw	70
  5161  000C7A  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  5162                           
  5163                           ;main.c: 414: } else if (TimerCounterAtOverflow <=2001) {
  5164  000C7C  0012               	return	
  5165  000C7E                     l3719:
  5166  000C7E  0ED2               	movlw	210
  5167  000C80  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5168  000C82  0E07               	movlw	7
  5169  000C84  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5170  000C86  B0D8               	btfsc	status,0,c
  5171  000C88  D005               	goto	l3727
  5172                           
  5173                           ;main.c: 415: return 60;
  5174  000C8A  0E00               	movlw	0
  5175  000C8C  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  5176  000C8E  0E3C               	movlw	60
  5177  000C90  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  5178                           
  5179                           ;main.c: 416: } else if (TimerCounterAtOverflow <=2402) {
  5180  000C92  0012               	return	
  5181  000C94                     l3727:
  5182  000C94  0E63               	movlw	99
  5183  000C96  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5184  000C98  0E09               	movlw	9
  5185  000C9A  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5186  000C9C  B0D8               	btfsc	status,0,c
  5187  000C9E  D005               	goto	l3735
  5188                           
  5189                           ;main.c: 417: return 50;
  5190  000CA0  0E00               	movlw	0
  5191  000CA2  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  5192  000CA4  0E32               	movlw	50
  5193  000CA6  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  5194                           
  5195                           ;main.c: 418: } else if (TimerCounterAtOverflow <=3003) {
  5196  000CA8  0012               	return	
  5197  000CAA                     l3735:
  5198  000CAA  0EBC               	movlw	188
  5199  000CAC  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5200  000CAE  0E0B               	movlw	11
  5201  000CB0  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5202  000CB2  B0D8               	btfsc	status,0,c
  5203  000CB4  D005               	goto	l3743
  5204                           
  5205                           ;main.c: 419: return 40;
  5206  000CB6  0E00               	movlw	0
  5207  000CB8  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  5208  000CBA  0E28               	movlw	40
  5209  000CBC  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  5210                           
  5211                           ;main.c: 420: } else {
  5212  000CBE  0012               	return	
  5213  000CC0                     l3743:
  5214                           
  5215                           ;main.c: 421: return 0;
  5216  000CC0  0E00               	movlw	0
  5217  000CC2  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  5218  000CC4  0E00               	movlw	0
  5219  000CC6  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  5220  000CC8  0012               	return	
  5221  000CCA  0012               	return		;funcret
  5222  000CCC                     __end_of_ConvertTimerOverflowToWheelRPM:
  5223                           	opt stack 0
  5224                           tblptru	equ	0xFF8
  5225                           tblptrh	equ	0xFF7
  5226                           tblptrl	equ	0xFF6
  5227                           tablat	equ	0xFF5
  5228                           prodh	equ	0xFF4
  5229                           prodl	equ	0xFF3
  5230                           intcon	equ	0xFF2
  5231                           intcon2	equ	0xFF1
  5232                           indf0	equ	0xFEF
  5233                           fsr0h	equ	0xFEA
  5234                           fsr0l	equ	0xFE9
  5235                           wreg	equ	0xFE8
  5236                           indf2	equ	0xFDF
  5237                           postinc2	equ	0xFDE
  5238                           postdec2	equ	0xFDD
  5239                           fsr2h	equ	0xFDA
  5240                           fsr2l	equ	0xFD9
  5241                           status	equ	0xFD8
  5242                           
  5243 ;; *************** function _ConvertTimerOverflowToMPH *****************
  5244 ;; Defined at:
  5245 ;;		line 203 in file "main.c"
  5246 ;; Parameters:    Size  Location     Type
  5247 ;;		None
  5248 ;; Auto vars:     Size  Location     Type
  5249 ;;		None
  5250 ;; Return value:  Size  Location     Type
  5251 ;;                  1    wreg      unsigned char 
  5252 ;; Registers used:
  5253 ;;		wreg, status,2, status,0
  5254 ;; Tracked objects:
  5255 ;;		On entry : 0/0
  5256 ;;		On exit  : 0/0
  5257 ;;		Unchanged: 0/0
  5258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5259 ;;      Params:         0       0       0       0       0       0       0
  5260 ;;      Locals:         0       0       0       0       0       0       0
  5261 ;;      Temps:          0       0       0       0       0       0       0
  5262 ;;      Totals:         0       0       0       0       0       0       0
  5263 ;;Total ram usage:        0 bytes
  5264 ;; Hardware stack levels used:    1
  5265 ;; Hardware stack levels required when called:    2
  5266 ;; This function calls:
  5267 ;;		Nothing
  5268 ;; This function is called by:
  5269 ;;		_main
  5270 ;; This function uses a non-reentrant model
  5271 ;;
  5272                           
  5273                           	psect	text28
  5274  000FFC                     __ptext28:
  5275                           	opt stack 0
  5276  000FFC                     _ConvertTimerOverflowToMPH:
  5277                           	opt stack 28
  5278                           
  5279                           ;main.c: 204: if (TimerCounterAtOverflow <= 95) {
  5280                           
  5281                           ;incstack = 0
  5282  000FFC  5038               	movf	_TimerCounterAtOverflow+1,w,c
  5283  000FFE  E106               	bnz	l3755
  5284  001000  0E60               	movlw	96
  5285  001002  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5286  001004  B0D8               	btfsc	status,0,c
  5287  001006  D002               	goto	l3755
  5288                           
  5289                           ;main.c: 205: return 30;
  5290  001008  0E1E               	movlw	30
  5291                           
  5292                           ;main.c: 206: } else if (TimerCounterAtOverflow <=98) {
  5293  00100A  0012               	return	
  5294  00100C                     l3755:
  5295  00100C  5038               	movf	_TimerCounterAtOverflow+1,w,c
  5296  00100E  E106               	bnz	l3763
  5297  001010  0E63               	movlw	99
  5298  001012  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5299  001014  B0D8               	btfsc	status,0,c
  5300  001016  D002               	goto	l3763
  5301                           
  5302                           ;main.c: 207: return 29;
  5303  001018  0E1D               	movlw	29
  5304                           
  5305                           ;main.c: 208: } else if (TimerCounterAtOverflow <=102) {
  5306  00101A  0012               	return	
  5307  00101C                     l3763:
  5308  00101C  5038               	movf	_TimerCounterAtOverflow+1,w,c
  5309  00101E  E106               	bnz	l3771
  5310  001020  0E67               	movlw	103
  5311  001022  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5312  001024  B0D8               	btfsc	status,0,c
  5313  001026  D002               	goto	l3771
  5314                           
  5315                           ;main.c: 209: return 28;
  5316  001028  0E1C               	movlw	28
  5317                           
  5318                           ;main.c: 210: } else if (TimerCounterAtOverflow <=106) {
  5319  00102A  0012               	return	
  5320  00102C                     l3771:
  5321  00102C  5038               	movf	_TimerCounterAtOverflow+1,w,c
  5322  00102E  E106               	bnz	l3779
  5323  001030  0E6B               	movlw	107
  5324  001032  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5325  001034  B0D8               	btfsc	status,0,c
  5326  001036  D002               	goto	l3779
  5327                           
  5328                           ;main.c: 211: return 27;
  5329  001038  0E1B               	movlw	27
  5330                           
  5331                           ;main.c: 212: } else if (TimerCounterAtOverflow <=110) {
  5332  00103A  0012               	return	
  5333  00103C                     l3779:
  5334  00103C  5038               	movf	_TimerCounterAtOverflow+1,w,c
  5335  00103E  E106               	bnz	l3787
  5336  001040  0E6F               	movlw	111
  5337  001042  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5338  001044  B0D8               	btfsc	status,0,c
  5339  001046  D002               	goto	l3787
  5340                           
  5341                           ;main.c: 213: return 26;
  5342  001048  0E1A               	movlw	26
  5343                           
  5344                           ;main.c: 214: } else if (TimerCounterAtOverflow <=114) {
  5345  00104A  0012               	return	
  5346  00104C                     l3787:
  5347  00104C  5038               	movf	_TimerCounterAtOverflow+1,w,c
  5348  00104E  E106               	bnz	l3795
  5349  001050  0E73               	movlw	115
  5350  001052  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5351  001054  B0D8               	btfsc	status,0,c
  5352  001056  D002               	goto	l3795
  5353                           
  5354                           ;main.c: 215: return 25;
  5355  001058  0E19               	movlw	25
  5356                           
  5357                           ;main.c: 216: } else if (TimerCounterAtOverflow <=119) {
  5358  00105A  0012               	return	
  5359  00105C                     l3795:
  5360  00105C  5038               	movf	_TimerCounterAtOverflow+1,w,c
  5361  00105E  E106               	bnz	l3803
  5362  001060  0E78               	movlw	120
  5363  001062  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5364  001064  B0D8               	btfsc	status,0,c
  5365  001066  D002               	goto	l3803
  5366                           
  5367                           ;main.c: 217: return 24;
  5368  001068  0E18               	movlw	24
  5369                           
  5370                           ;main.c: 218: } else if (TimerCounterAtOverflow <=124) {
  5371  00106A  0012               	return	
  5372  00106C                     l3803:
  5373  00106C  5038               	movf	_TimerCounterAtOverflow+1,w,c
  5374  00106E  E106               	bnz	l3811
  5375  001070  0E7D               	movlw	125
  5376  001072  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5377  001074  B0D8               	btfsc	status,0,c
  5378  001076  D002               	goto	l3811
  5379                           
  5380                           ;main.c: 219: return 23;
  5381  001078  0E17               	movlw	23
  5382                           
  5383                           ;main.c: 220: } else if (TimerCounterAtOverflow <=130) {
  5384  00107A  0012               	return	
  5385  00107C                     l3811:
  5386  00107C  5038               	movf	_TimerCounterAtOverflow+1,w,c
  5387  00107E  E106               	bnz	l3819
  5388  001080  0E83               	movlw	131
  5389  001082  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5390  001084  B0D8               	btfsc	status,0,c
  5391  001086  D002               	goto	l3819
  5392                           
  5393                           ;main.c: 221: return 21;
  5394  001088  0E15               	movlw	21
  5395                           
  5396                           ;main.c: 222: } else if (TimerCounterAtOverflow <=136) {
  5397  00108A  0012               	return	
  5398  00108C                     l3819:
  5399  00108C  5038               	movf	_TimerCounterAtOverflow+1,w,c
  5400  00108E  E106               	bnz	l3827
  5401  001090  0E89               	movlw	137
  5402  001092  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5403  001094  B0D8               	btfsc	status,0,c
  5404  001096  D002               	goto	l3827
  5405                           
  5406                           ;main.c: 223: return 21;
  5407  001098  0E15               	movlw	21
  5408                           
  5409                           ;main.c: 224: } else if (TimerCounterAtOverflow <=143) {
  5410  00109A  0012               	return	
  5411  00109C                     l3827:
  5412  00109C  5038               	movf	_TimerCounterAtOverflow+1,w,c
  5413  00109E  E106               	bnz	l3835
  5414  0010A0  0E90               	movlw	144
  5415  0010A2  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5416  0010A4  B0D8               	btfsc	status,0,c
  5417  0010A6  D002               	goto	l3835
  5418                           
  5419                           ;main.c: 225: return 19;
  5420  0010A8  0E13               	movlw	19
  5421                           
  5422                           ;main.c: 226: } else if (TimerCounterAtOverflow <=150) {
  5423  0010AA  0012               	return	
  5424  0010AC                     l3835:
  5425  0010AC  5038               	movf	_TimerCounterAtOverflow+1,w,c
  5426  0010AE  E106               	bnz	l3843
  5427  0010B0  0E97               	movlw	151
  5428  0010B2  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5429  0010B4  B0D8               	btfsc	status,0,c
  5430  0010B6  D002               	goto	l3843
  5431                           
  5432                           ;main.c: 227: return 19;
  5433  0010B8  0E13               	movlw	19
  5434                           
  5435                           ;main.c: 228: } else if (TimerCounterAtOverflow <=159) {
  5436  0010BA  0012               	return	
  5437  0010BC                     l3843:
  5438  0010BC  5038               	movf	_TimerCounterAtOverflow+1,w,c
  5439  0010BE  E106               	bnz	l3851
  5440  0010C0  0EA0               	movlw	160
  5441  0010C2  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5442  0010C4  B0D8               	btfsc	status,0,c
  5443  0010C6  D002               	goto	l3851
  5444                           
  5445                           ;main.c: 229: return 17;
  5446  0010C8  0E11               	movlw	17
  5447                           
  5448                           ;main.c: 230: } else if (TimerCounterAtOverflow <=168) {
  5449  0010CA  0012               	return	
  5450  0010CC                     l3851:
  5451  0010CC  5038               	movf	_TimerCounterAtOverflow+1,w,c
  5452  0010CE  E106               	bnz	l3859
  5453  0010D0  0EA9               	movlw	169
  5454  0010D2  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5455  0010D4  B0D8               	btfsc	status,0,c
  5456  0010D6  D002               	goto	l3859
  5457                           
  5458                           ;main.c: 231: return 17;
  5459  0010D8  0E11               	movlw	17
  5460                           
  5461                           ;main.c: 232: } else if (TimerCounterAtOverflow <=178) {
  5462  0010DA  0012               	return	
  5463  0010DC                     l3859:
  5464  0010DC  5038               	movf	_TimerCounterAtOverflow+1,w,c
  5465  0010DE  E106               	bnz	l3867
  5466  0010E0  0EB3               	movlw	179
  5467  0010E2  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5468  0010E4  B0D8               	btfsc	status,0,c
  5469  0010E6  D002               	goto	l3867
  5470                           
  5471                           ;main.c: 233: return 16;
  5472  0010E8  0E10               	movlw	16
  5473                           
  5474                           ;main.c: 234: } else if (TimerCounterAtOverflow <=190) {
  5475  0010EA  0012               	return	
  5476  0010EC                     l3867:
  5477  0010EC  5038               	movf	_TimerCounterAtOverflow+1,w,c
  5478  0010EE  E106               	bnz	l3875
  5479  0010F0  0EBF               	movlw	191
  5480  0010F2  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5481  0010F4  B0D8               	btfsc	status,0,c
  5482  0010F6  D002               	goto	l3875
  5483                           
  5484                           ;main.c: 235: return 15;
  5485  0010F8  0E0F               	movlw	15
  5486                           
  5487                           ;main.c: 236: } else if (TimerCounterAtOverflow <=204) {
  5488  0010FA  0012               	return	
  5489  0010FC                     l3875:
  5490  0010FC  5038               	movf	_TimerCounterAtOverflow+1,w,c
  5491  0010FE  E106               	bnz	l3883
  5492  001100  0ECD               	movlw	205
  5493  001102  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5494  001104  B0D8               	btfsc	status,0,c
  5495  001106  D002               	goto	l3883
  5496                           
  5497                           ;main.c: 237: return 14;
  5498  001108  0E0E               	movlw	14
  5499                           
  5500                           ;main.c: 238: } else if (TimerCounterAtOverflow <=219) {
  5501  00110A  0012               	return	
  5502  00110C                     l3883:
  5503  00110C  5038               	movf	_TimerCounterAtOverflow+1,w,c
  5504  00110E  E106               	bnz	l3891
  5505  001110  0EDC               	movlw	220
  5506  001112  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5507  001114  B0D8               	btfsc	status,0,c
  5508  001116  D002               	goto	l3891
  5509                           
  5510                           ;main.c: 239: return 13;
  5511  001118  0E0D               	movlw	13
  5512                           
  5513                           ;main.c: 240: } else if (TimerCounterAtOverflow <=238) {
  5514  00111A  0012               	return	
  5515  00111C                     l3891:
  5516  00111C  5038               	movf	_TimerCounterAtOverflow+1,w,c
  5517  00111E  E106               	bnz	l3899
  5518  001120  0EEF               	movlw	239
  5519  001122  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5520  001124  B0D8               	btfsc	status,0,c
  5521  001126  D002               	goto	l3899
  5522                           
  5523                           ;main.c: 241: return 12;
  5524  001128  0E0C               	movlw	12
  5525                           
  5526                           ;main.c: 242: } else if (TimerCounterAtOverflow <=260) {
  5527  00112A  0012               	return	
  5528  00112C                     l3899:
  5529  00112C  0E05               	movlw	5
  5530  00112E  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5531  001130  0E01               	movlw	1
  5532  001132  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5533  001134  B0D8               	btfsc	status,0,c
  5534  001136  D002               	goto	l3907
  5535                           
  5536                           ;main.c: 243: return 11;
  5537  001138  0E0B               	movlw	11
  5538                           
  5539                           ;main.c: 244: } else if (TimerCounterAtOverflow <=286) {
  5540  00113A  0012               	return	
  5541  00113C                     l3907:
  5542  00113C  0E1F               	movlw	31
  5543  00113E  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5544  001140  0E01               	movlw	1
  5545  001142  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5546  001144  B0D8               	btfsc	status,0,c
  5547  001146  D002               	goto	l3915
  5548                           
  5549                           ;main.c: 245: return 10;
  5550  001148  0E0A               	movlw	10
  5551                           
  5552                           ;main.c: 246: } else if (TimerCounterAtOverflow <=318) {
  5553  00114A  0012               	return	
  5554  00114C                     l3915:
  5555  00114C  0E3F               	movlw	63
  5556  00114E  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5557  001150  0E01               	movlw	1
  5558  001152  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5559  001154  B0D8               	btfsc	status,0,c
  5560  001156  D002               	goto	l3923
  5561                           
  5562                           ;main.c: 247: return 9;
  5563  001158  0E09               	movlw	9
  5564                           
  5565                           ;main.c: 248: } else if (TimerCounterAtOverflow <=358) {
  5566  00115A  0012               	return	
  5567  00115C                     l3923:
  5568  00115C  0E67               	movlw	103
  5569  00115E  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5570  001160  0E01               	movlw	1
  5571  001162  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5572  001164  B0D8               	btfsc	status,0,c
  5573  001166  D002               	goto	l3931
  5574                           
  5575                           ;main.c: 249: return 8;
  5576  001168  0E08               	movlw	8
  5577                           
  5578                           ;main.c: 250: } else if (TimerCounterAtOverflow <=410) {
  5579  00116A  0012               	return	
  5580  00116C                     l3931:
  5581  00116C  0E9B               	movlw	155
  5582  00116E  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5583  001170  0E01               	movlw	1
  5584  001172  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5585  001174  B0D8               	btfsc	status,0,c
  5586  001176  D002               	goto	l3939
  5587                           
  5588                           ;main.c: 251: return 7;
  5589  001178  0E07               	movlw	7
  5590                           
  5591                           ;main.c: 252: } else if (TimerCounterAtOverflow <=479) {
  5592  00117A  0012               	return	
  5593  00117C                     l3939:
  5594  00117C  0EE0               	movlw	224
  5595  00117E  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5596  001180  0E01               	movlw	1
  5597  001182  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5598  001184  B0D8               	btfsc	status,0,c
  5599  001186  D002               	goto	l3947
  5600                           
  5601                           ;main.c: 253: return 6;
  5602  001188  0E06               	movlw	6
  5603                           
  5604                           ;main.c: 254: } else if (TimerCounterAtOverflow <=576) {
  5605  00118A  0012               	return	
  5606  00118C                     l3947:
  5607  00118C  0E41               	movlw	65
  5608  00118E  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5609  001190  0E02               	movlw	2
  5610  001192  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5611  001194  B0D8               	btfsc	status,0,c
  5612  001196  D002               	goto	l3955
  5613                           
  5614                           ;main.c: 255: return 5;
  5615  001198  0E05               	movlw	5
  5616                           
  5617                           ;main.c: 256: } else if (TimerCounterAtOverflow <=722) {
  5618  00119A  0012               	return	
  5619  00119C                     l3955:
  5620  00119C  0ED3               	movlw	211
  5621  00119E  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5622  0011A0  0E02               	movlw	2
  5623  0011A2  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5624  0011A4  B0D8               	btfsc	status,0,c
  5625  0011A6  D002               	goto	l3963
  5626                           
  5627                           ;main.c: 257: return 4;
  5628  0011A8  0E04               	movlw	4
  5629                           
  5630                           ;main.c: 258: } else if (TimerCounterAtOverflow <=966) {
  5631  0011AA  0012               	return	
  5632  0011AC                     l3963:
  5633  0011AC  0EC7               	movlw	199
  5634  0011AE  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5635  0011B0  0E03               	movlw	3
  5636  0011B2  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5637  0011B4  B0D8               	btfsc	status,0,c
  5638  0011B6  D002               	goto	l3971
  5639                           
  5640                           ;main.c: 259: return 3;
  5641  0011B8  0E03               	movlw	3
  5642                           
  5643                           ;main.c: 260: } else if (TimerCounterAtOverflow <=1462) {
  5644  0011BA  0012               	return	
  5645  0011BC                     l3971:
  5646  0011BC  0EB7               	movlw	183
  5647  0011BE  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5648  0011C0  0E05               	movlw	5
  5649  0011C2  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5650  0011C4  B0D8               	btfsc	status,0,c
  5651  0011C6  D002               	goto	l3979
  5652                           
  5653                           ;main.c: 261: return 2;
  5654  0011C8  0E02               	movlw	2
  5655                           
  5656                           ;main.c: 262: } else if (TimerCounterAtOverflow <=3002) {
  5657  0011CA  0012               	return	
  5658  0011CC                     l3979:
  5659  0011CC  0EBB               	movlw	187
  5660  0011CE  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5661  0011D0  0E0B               	movlw	11
  5662  0011D2  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5663  0011D4  B0D8               	btfsc	status,0,c
  5664  0011D6  D002               	goto	l3987
  5665                           
  5666                           ;main.c: 263: return 1;
  5667  0011D8  0E01               	movlw	1
  5668                           
  5669                           ;main.c: 264: } else {
  5670  0011DA  0012               	return	
  5671  0011DC                     l3987:
  5672                           
  5673                           ;main.c: 265: return 0;
  5674  0011DC  0E00               	movlw	0
  5675  0011DE  0012               	return	
  5676  0011E0  0012               	return		;funcret
  5677  0011E2                     __end_of_ConvertTimerOverflowToMPH:
  5678                           	opt stack 0
  5679                           tblptru	equ	0xFF8
  5680                           tblptrh	equ	0xFF7
  5681                           tblptrl	equ	0xFF6
  5682                           tablat	equ	0xFF5
  5683                           prodh	equ	0xFF4
  5684                           prodl	equ	0xFF3
  5685                           intcon	equ	0xFF2
  5686                           intcon2	equ	0xFF1
  5687                           indf0	equ	0xFEF
  5688                           fsr0h	equ	0xFEA
  5689                           fsr0l	equ	0xFE9
  5690                           wreg	equ	0xFE8
  5691                           indf2	equ	0xFDF
  5692                           postinc2	equ	0xFDE
  5693                           postdec2	equ	0xFDD
  5694                           fsr2h	equ	0xFDA
  5695                           fsr2l	equ	0xFD9
  5696                           status	equ	0xFD8
  5697                           
  5698 ;; *************** function _ADC_Convert *****************
  5699 ;; Defined at:
  5700 ;;		line 170 in file "ports.c"
  5701 ;; Parameters:    Size  Location     Type
  5702 ;;		None
  5703 ;; Auto vars:     Size  Location     Type
  5704 ;;		None
  5705 ;; Return value:  Size  Location     Type
  5706 ;;                  1    wreg      unsigned char 
  5707 ;; Registers used:
  5708 ;;		wreg, status,2
  5709 ;; Tracked objects:
  5710 ;;		On entry : 0/0
  5711 ;;		On exit  : 0/0
  5712 ;;		Unchanged: 0/0
  5713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5714 ;;      Params:         0       0       0       0       0       0       0
  5715 ;;      Locals:         0       0       0       0       0       0       0
  5716 ;;      Temps:          0       0       0       0       0       0       0
  5717 ;;      Totals:         0       0       0       0       0       0       0
  5718 ;;Total ram usage:        0 bytes
  5719 ;; Hardware stack levels used:    1
  5720 ;; Hardware stack levels required when called:    2
  5721 ;; This function calls:
  5722 ;;		Nothing
  5723 ;; This function is called by:
  5724 ;;		_main
  5725 ;; This function uses a non-reentrant model
  5726 ;;
  5727                           
  5728                           	psect	text29
  5729  001A3C                     __ptext29:
  5730                           	opt stack 0
  5731  001A3C                     _ADC_Convert:
  5732                           	opt stack 28
  5733                           
  5734                           ;ports.c: 172: ADCON0bits.GO_DONE = 1;
  5735                           
  5736                           ;incstack = 0
  5737  001A3C  82C2               	bsf	4034,1,c	;volatile
  5738                           
  5739                           ;ports.c: 173: while (ADCON0bits.GO_DONE == 1);
  5740  001A3E  D000               	goto	l352
  5741  001A40                     l352:
  5742  001A40  B2C2               	btfsc	4034,1,c	;volatile
  5743  001A42  D7FE               	goto	l352
  5744                           
  5745                           ;ports.c: 174: return ADRESH;
  5746  001A44  50C4               	movf	4036,w,c	;volatile
  5747  001A46  0012               	return	
  5748  001A48  0012               	return		;funcret
  5749  001A4A                     __end_of_ADC_Convert:
  5750                           	opt stack 0
  5751                           tblptru	equ	0xFF8
  5752                           tblptrh	equ	0xFF7
  5753                           tblptrl	equ	0xFF6
  5754                           tablat	equ	0xFF5
  5755                           prodh	equ	0xFF4
  5756                           prodl	equ	0xFF3
  5757                           intcon	equ	0xFF2
  5758                           intcon2	equ	0xFF1
  5759                           indf0	equ	0xFEF
  5760                           fsr0h	equ	0xFEA
  5761                           fsr0l	equ	0xFE9
  5762                           wreg	equ	0xFE8
  5763                           indf2	equ	0xFDF
  5764                           postinc2	equ	0xFDE
  5765                           postdec2	equ	0xFDD
  5766                           fsr2h	equ	0xFDA
  5767                           fsr2l	equ	0xFD9
  5768                           status	equ	0xFD8
  5769                           
  5770 ;; *************** function _XC8_LowISR_Handler *****************
  5771 ;; Defined at:
  5772 ;;		line 164 in file "main.c"
  5773 ;; Parameters:    Size  Location     Type
  5774 ;;		None
  5775 ;; Auto vars:     Size  Location     Type
  5776 ;;		None
  5777 ;; Return value:  Size  Location     Type
  5778 ;;		None               void
  5779 ;; Registers used:
  5780 ;;		None
  5781 ;; Tracked objects:
  5782 ;;		On entry : 0/0
  5783 ;;		On exit  : 0/0
  5784 ;;		Unchanged: 0/0
  5785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5786 ;;      Params:         0       0       0       0       0       0       0
  5787 ;;      Locals:         0       0       0       0       0       0       0
  5788 ;;      Temps:         17       0       0       0       0       0       0
  5789 ;;      Totals:        17       0       0       0       0       0       0
  5790 ;;Total ram usage:       17 bytes
  5791 ;; Hardware stack levels used:    1
  5792 ;; Hardware stack levels required when called:    1
  5793 ;; This function calls:
  5794 ;;		Nothing
  5795 ;; This function is called by:
  5796 ;;		Interrupt level 1
  5797 ;; This function uses a non-reentrant model
  5798 ;;
  5799                           
  5800                           	psect	intcodelo
  5801  000018                     __pintcodelo:
  5802                           	opt stack 0
  5803  000018                     _XC8_LowISR_Handler:
  5804                           	opt stack 23
  5805                           
  5806                           ;incstack = 0
  5807  000018  CFD8 F001          	movff	status,??_XC8_LowISR_Handler
  5808  00001C  CFE8 F002          	movff	wreg,??_XC8_LowISR_Handler+1
  5809  000020  CFE0 F003          	movff	bsr,??_XC8_LowISR_Handler+2
  5810  000024  CFFA F004          	movff	pclath,??_XC8_LowISR_Handler+3
  5811  000028  CFFB F005          	movff	pclatu,??_XC8_LowISR_Handler+4
  5812  00002C  CFE9 F006          	movff	fsr0l,??_XC8_LowISR_Handler+5
  5813  000030  CFEA F007          	movff	fsr0h,??_XC8_LowISR_Handler+6
  5814  000034  CFE1 F008          	movff	fsr1l,??_XC8_LowISR_Handler+7
  5815  000038  CFE2 F009          	movff	fsr1h,??_XC8_LowISR_Handler+8
  5816  00003C  CFD9 F00A          	movff	fsr2l,??_XC8_LowISR_Handler+9
  5817  000040  CFDA F00B          	movff	fsr2h,??_XC8_LowISR_Handler+10
  5818  000044  CFF3 F00C          	movff	prodl,??_XC8_LowISR_Handler+11
  5819  000048  CFF4 F00D          	movff	prodh,??_XC8_LowISR_Handler+12
  5820  00004C  CFF6 F00E          	movff	tblptrl,??_XC8_LowISR_Handler+13
  5821  000050  CFF7 F00F          	movff	tblptrh,??_XC8_LowISR_Handler+14
  5822  000054  CFF8 F010          	movff	tblptru,??_XC8_LowISR_Handler+15
  5823  000058  CFF5 F011          	movff	tablat,??_XC8_LowISR_Handler+16
  5824                           
  5825                           ;main.c: 168: if (INTCON3bits.INT1IF) {
  5826  00005C  A0F0               	btfss	intcon3,0,c	;volatile
  5827  00005E  D002               	goto	i1l73
  5828                           
  5829                           ;main.c: 169: INTCON3bits.INT1IF = 0;
  5830  000060  90F0               	bcf	intcon3,0,c	;volatile
  5831                           
  5832                           ;main.c: 170: LATDbits.LATD1 = ~LATDbits.LATD1;
  5833  000062  728C               	btg	3980,1,c	;volatile
  5834  000064                     i1l73:
  5835                           
  5836                           ;main.c: 171: }
  5837                           ;main.c: 173: if (INTCONbits.RBIF) {
  5838  000064  A0F2               	btfss	intcon,0,c	;volatile
  5839  000066  D009               	goto	i1l77
  5840                           
  5841                           ;main.c: 174: PortBValue = PORTB;
  5842  000068  CF81 F03B          	movff	3969,_PortBValue	;volatile
  5843                           
  5844                           ;main.c: 175: INTCONbits.RBIF = 0;
  5845  00006C  90F2               	bcf	intcon,0,c	;volatile
  5846                           
  5847                           ;main.c: 176: if (PortBValue & 0b00010000) {
  5848  00006E  B83B               	btfsc	_PortBValue,4,c
  5849                           
  5850                           ;main.c: 177: LATDbits.LATD4 = ~LATDbits.LATD4;
  5851  000070  788C               	btg	3980,4,c	;volatile
  5852                           
  5853                           ;main.c: 178: }
  5854                           ;main.c: 179: if (PortBValue & 0b00100000) {
  5855  000072  AA3B               	btfss	_PortBValue,5,c
  5856  000074  D002               	goto	i1l77
  5857                           
  5858                           ;main.c: 180: LATDbits.LATD5 = ~LATDbits.LATD5;
  5859  000076  7A8C               	btg	3980,5,c	;volatile
  5860  000078  D000               	goto	i1l77
  5861  00007A                     i1l77:
  5862  00007A  C011  FFF5         	movff	??_XC8_LowISR_Handler+16,tablat
  5863  00007E  C010  FFF8         	movff	??_XC8_LowISR_Handler+15,tblptru
  5864  000082  C00F  FFF7         	movff	??_XC8_LowISR_Handler+14,tblptrh
  5865  000086  C00E  FFF6         	movff	??_XC8_LowISR_Handler+13,tblptrl
  5866  00008A  C00D  FFF4         	movff	??_XC8_LowISR_Handler+12,prodh
  5867  00008E  C00C  FFF3         	movff	??_XC8_LowISR_Handler+11,prodl
  5868  000092  C00B  FFDA         	movff	??_XC8_LowISR_Handler+10,fsr2h
  5869  000096  C00A  FFD9         	movff	??_XC8_LowISR_Handler+9,fsr2l
  5870  00009A  C009  FFE2         	movff	??_XC8_LowISR_Handler+8,fsr1h
  5871  00009E  C008  FFE1         	movff	??_XC8_LowISR_Handler+7,fsr1l
  5872  0000A2  C007  FFEA         	movff	??_XC8_LowISR_Handler+6,fsr0h
  5873  0000A6  C006  FFE9         	movff	??_XC8_LowISR_Handler+5,fsr0l
  5874  0000AA  C005  FFFB         	movff	??_XC8_LowISR_Handler+4,pclatu
  5875  0000AE  C004  FFFA         	movff	??_XC8_LowISR_Handler+3,pclath
  5876  0000B2  C003  FFE0         	movff	??_XC8_LowISR_Handler+2,bsr
  5877  0000B6  C002  FFE8         	movff	??_XC8_LowISR_Handler+1,wreg
  5878  0000BA  C001  FFD8         	movff	??_XC8_LowISR_Handler,status
  5879  0000BE  0010               	retfie	
  5880  0000C0                     __end_of_XC8_LowISR_Handler:
  5881                           	opt stack 0
  5882                           pclatu	equ	0xFFB
  5883                           pclath	equ	0xFFA
  5884                           tblptru	equ	0xFF8
  5885                           tblptrh	equ	0xFF7
  5886                           tblptrl	equ	0xFF6
  5887                           tablat	equ	0xFF5
  5888                           prodh	equ	0xFF4
  5889                           prodl	equ	0xFF3
  5890                           intcon	equ	0xFF2
  5891                           intcon2	equ	0xFF1
  5892                           intcon3	equ	0xFF0
  5893                           indf0	equ	0xFEF
  5894                           fsr0h	equ	0xFEA
  5895                           fsr0l	equ	0xFE9
  5896                           wreg	equ	0xFE8
  5897                           fsr1h	equ	0xFE2
  5898                           fsr1l	equ	0xFE1
  5899                           bsr	equ	0xFE0
  5900                           indf2	equ	0xFDF
  5901                           postinc2	equ	0xFDE
  5902                           postdec2	equ	0xFDD
  5903                           fsr2h	equ	0xFDA
  5904                           fsr2l	equ	0xFD9
  5905                           status	equ	0xFD8
  5906                           
  5907 ;; *************** function _XC8_HighISR_Handler *****************
  5908 ;; Defined at:
  5909 ;;		line 117 in file "main.c"
  5910 ;; Parameters:    Size  Location     Type
  5911 ;;		None
  5912 ;; Auto vars:     Size  Location     Type
  5913 ;;		None
  5914 ;; Return value:  Size  Location     Type
  5915 ;;		None               void
  5916 ;; Registers used:
  5917 ;;		wreg, status,2, status,0
  5918 ;; Tracked objects:
  5919 ;;		On entry : 0/0
  5920 ;;		On exit  : 0/0
  5921 ;;		Unchanged: 0/0
  5922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5923 ;;      Params:         0       0       0       0       0       0       0
  5924 ;;      Locals:         0       0       0       0       0       0       0
  5925 ;;      Temps:         14       0       0       0       0       0       0
  5926 ;;      Totals:        14       0       0       0       0       0       0
  5927 ;;Total ram usage:       14 bytes
  5928 ;; Hardware stack levels used:    1
  5929 ;; This function calls:
  5930 ;;		Nothing
  5931 ;; This function is called by:
  5932 ;;		Interrupt level 2
  5933 ;; This function uses a non-reentrant model
  5934 ;;
  5935                           
  5936                           	psect	intcode
  5937  000008                     __pintcode:
  5938                           	opt stack 0
  5939  000008                     _XC8_HighISR_Handler:
  5940                           	opt stack 23
  5941                           
  5942                           ;incstack = 0
  5943  000008  CFFA F012          	movff	pclath,??_XC8_HighISR_Handler
  5944  00000C  CFFB F013          	movff	pclatu,??_XC8_HighISR_Handler+1
  5945  000010  CFE9 F014          	movff	fsr0l,??_XC8_HighISR_Handler+2
  5946  000014  EF2E  F00A         	goto	int_func
  5947                           pclatu	equ	0xFFB
  5948                           pclath	equ	0xFFA
  5949                           tblptru	equ	0xFF8
  5950                           tblptrh	equ	0xFF7
  5951                           tblptrl	equ	0xFF6
  5952                           tablat	equ	0xFF5
  5953                           prodh	equ	0xFF4
  5954                           prodl	equ	0xFF3
  5955                           intcon	equ	0xFF2
  5956                           intcon2	equ	0xFF1
  5957                           intcon3	equ	0xFF0
  5958                           indf0	equ	0xFEF
  5959                           fsr0h	equ	0xFEA
  5960                           fsr0l	equ	0xFE9
  5961                           wreg	equ	0xFE8
  5962                           fsr1h	equ	0xFE2
  5963                           fsr1l	equ	0xFE1
  5964                           bsr	equ	0xFE0
  5965                           indf2	equ	0xFDF
  5966                           postinc2	equ	0xFDE
  5967                           postdec2	equ	0xFDD
  5968                           fsr2h	equ	0xFDA
  5969                           fsr2l	equ	0xFD9
  5970                           status	equ	0xFD8
  5971                           
  5972                           	psect	intcode_body
  5973  00145C                     __pintcode_body:
  5974                           	opt stack 23
  5975  00145C                     int_func:
  5976                           	opt stack 23
  5977  00145C  CFEA F015          	movff	fsr0h,??_XC8_HighISR_Handler+3
  5978  001460  CFE1 F016          	movff	fsr1l,??_XC8_HighISR_Handler+4
  5979  001464  CFE2 F017          	movff	fsr1h,??_XC8_HighISR_Handler+5
  5980  001468  CFD9 F018          	movff	fsr2l,??_XC8_HighISR_Handler+6
  5981  00146C  CFDA F019          	movff	fsr2h,??_XC8_HighISR_Handler+7
  5982  001470  CFF3 F01A          	movff	prodl,??_XC8_HighISR_Handler+8
  5983  001474  CFF4 F01B          	movff	prodh,??_XC8_HighISR_Handler+9
  5984  001478  CFF6 F01C          	movff	tblptrl,??_XC8_HighISR_Handler+10
  5985  00147C  CFF7 F01D          	movff	tblptrh,??_XC8_HighISR_Handler+11
  5986  001480  CFF8 F01E          	movff	tblptru,??_XC8_HighISR_Handler+12
  5987  001484  CFF5 F01F          	movff	tablat,??_XC8_HighISR_Handler+13
  5988                           
  5989                           ;main.c: 124: if (INTCONbits.INT0IF )
  5990  001488  A2F2               	btfss	intcon,1,c	;volatile
  5991  00148A  D012               	goto	i2l4073
  5992                           
  5993                           ;main.c: 125: {
  5994                           ;main.c: 128: INTCONbits.INT0IF = 0;
  5995  00148C  92F2               	bcf	intcon,1,c	;volatile
  5996                           
  5997                           ;main.c: 130: TimerValueAtOverflow = TMR0L;
  5998  00148E  CFD6 F03C          	movff	4054,_TimerValueAtOverflow	;volatile
  5999                           
  6000                           ;main.c: 131: TimerCounterAtOverflow = TimerOverflowCounter;
  6001  001492  C039  F037         	movff	_TimerOverflowCounter,_TimerCounterAtOverflow
  6002  001496  C03A  F038         	movff	_TimerOverflowCounter+1,_TimerCounterAtOverflow+1
  6003                           
  6004                           ;main.c: 132: TimerOverflowCounter = 0;
  6005  00149A  0E00               	movlw	0
  6006  00149C  6E3A               	movwf	_TimerOverflowCounter+1,c
  6007  00149E  0E00               	movlw	0
  6008  0014A0  6E39               	movwf	_TimerOverflowCounter,c
  6009                           
  6010                           ;main.c: 133: TMR0H = 0xFF;
  6011  0014A2  68D7               	setf	4055,c	;volatile
  6012                           
  6013                           ;main.c: 134: TMR0L = 0x83;
  6014  0014A4  0E83               	movlw	131
  6015  0014A6  6ED6               	movwf	4054,c	;volatile
  6016                           
  6017                           ;main.c: 135: CanCalculateSpeed = 1;
  6018  0014A8  0E01               	movlw	1
  6019  0014AA  0100               	movlb	0	; () banked
  6020  0014AC  6F7F               	movwf	_CanCalculateSpeed& (0+255),b
  6021  0014AE  D000               	goto	i2l4073
  6022  0014B0                     i2l4073:
  6023                           
  6024                           ;main.c: 136: }
  6025                           ;main.c: 137: if (INTCONbits.TMR0IF)
  6026  0014B0  A4F2               	btfss	intcon,2,c	;volatile
  6027  0014B2  D00B               	goto	i2l70
  6028                           
  6029                           ;main.c: 138: {
  6030                           ;main.c: 139: INTCONbits.TMR0IF = 0;
  6031  0014B4  94F2               	bcf	intcon,2,c	;volatile
  6032                           
  6033                           ;main.c: 140: TimerOverflowCounter = TimerOverflowCounter + 1;
  6034  0014B6  0E01               	movlw	1
  6035  0014B8  2439               	addwf	_TimerOverflowCounter,w,c
  6036  0014BA  6E39               	movwf	_TimerOverflowCounter,c
  6037  0014BC  0E00               	movlw	0
  6038  0014BE  203A               	addwfc	_TimerOverflowCounter+1,w,c
  6039  0014C0  6E3A               	movwf	_TimerOverflowCounter+1,c
  6040                           
  6041                           ;main.c: 141: TMR0H = 0xFF;
  6042  0014C2  68D7               	setf	4055,c	;volatile
  6043                           
  6044                           ;main.c: 142: TMR0L = 0x83;
  6045  0014C4  0E83               	movlw	131
  6046  0014C6  6ED6               	movwf	4054,c	;volatile
  6047  0014C8  D000               	goto	i2l70
  6048  0014CA                     i2l70:
  6049  0014CA  C01F  FFF5         	movff	??_XC8_HighISR_Handler+13,tablat
  6050  0014CE  C01E  FFF8         	movff	??_XC8_HighISR_Handler+12,tblptru
  6051  0014D2  C01D  FFF7         	movff	??_XC8_HighISR_Handler+11,tblptrh
  6052  0014D6  C01C  FFF6         	movff	??_XC8_HighISR_Handler+10,tblptrl
  6053  0014DA  C01B  FFF4         	movff	??_XC8_HighISR_Handler+9,prodh
  6054  0014DE  C01A  FFF3         	movff	??_XC8_HighISR_Handler+8,prodl
  6055  0014E2  C019  FFDA         	movff	??_XC8_HighISR_Handler+7,fsr2h
  6056  0014E6  C018  FFD9         	movff	??_XC8_HighISR_Handler+6,fsr2l
  6057  0014EA  C017  FFE2         	movff	??_XC8_HighISR_Handler+5,fsr1h
  6058  0014EE  C016  FFE1         	movff	??_XC8_HighISR_Handler+4,fsr1l
  6059  0014F2  C015  FFEA         	movff	??_XC8_HighISR_Handler+3,fsr0h
  6060  0014F6  C014  FFE9         	movff	??_XC8_HighISR_Handler+2,fsr0l
  6061  0014FA  C013  FFFB         	movff	??_XC8_HighISR_Handler+1,pclatu
  6062  0014FE  C012  FFFA         	movff	??_XC8_HighISR_Handler,pclath
  6063  001502  0011               	retfie		f
  6064  001504                     __end_of_XC8_HighISR_Handler:
  6065                           	opt stack 0
  6066                           pclatu	equ	0xFFB
  6067                           pclath	equ	0xFFA
  6068                           tblptru	equ	0xFF8
  6069                           tblptrh	equ	0xFF7
  6070                           tblptrl	equ	0xFF6
  6071                           tablat	equ	0xFF5
  6072                           prodh	equ	0xFF4
  6073                           prodl	equ	0xFF3
  6074                           intcon	equ	0xFF2
  6075                           intcon2	equ	0xFF1
  6076                           intcon3	equ	0xFF0
  6077                           indf0	equ	0xFEF
  6078                           fsr0h	equ	0xFEA
  6079                           fsr0l	equ	0xFE9
  6080                           wreg	equ	0xFE8
  6081                           fsr1h	equ	0xFE2
  6082                           fsr1l	equ	0xFE1
  6083                           bsr	equ	0xFE0
  6084                           indf2	equ	0xFDF
  6085                           postinc2	equ	0xFDE
  6086                           postdec2	equ	0xFDD
  6087                           fsr2h	equ	0xFDA
  6088                           fsr2l	equ	0xFD9
  6089                           status	equ	0xFD8
  6090                           pclatu	equ	0xFFB
  6091                           pclath	equ	0xFFA
  6092                           tblptru	equ	0xFF8
  6093                           tblptrh	equ	0xFF7
  6094                           tblptrl	equ	0xFF6
  6095                           tablat	equ	0xFF5
  6096                           prodh	equ	0xFF4
  6097                           prodl	equ	0xFF3
  6098                           intcon	equ	0xFF2
  6099                           intcon2	equ	0xFF1
  6100                           intcon3	equ	0xFF0
  6101                           indf0	equ	0xFEF
  6102                           fsr0h	equ	0xFEA
  6103                           fsr0l	equ	0xFE9
  6104                           wreg	equ	0xFE8
  6105                           fsr1h	equ	0xFE2
  6106                           fsr1l	equ	0xFE1
  6107                           bsr	equ	0xFE0
  6108                           indf2	equ	0xFDF
  6109                           postinc2	equ	0xFDE
  6110                           postdec2	equ	0xFDD
  6111                           fsr2h	equ	0xFDA
  6112                           fsr2l	equ	0xFD9
  6113                           status	equ	0xFD8
  6114                           
  6115                           	psect	rparam
  6116  0000                     pclatu	equ	0xFFB
  6117                           pclath	equ	0xFFA
  6118                           tblptru	equ	0xFF8
  6119                           tblptrh	equ	0xFF7
  6120                           tblptrl	equ	0xFF6
  6121                           tablat	equ	0xFF5
  6122                           prodh	equ	0xFF4
  6123                           prodl	equ	0xFF3
  6124                           intcon	equ	0xFF2
  6125                           intcon2	equ	0xFF1
  6126                           intcon3	equ	0xFF0
  6127                           indf0	equ	0xFEF
  6128                           fsr0h	equ	0xFEA
  6129                           fsr0l	equ	0xFE9
  6130                           wreg	equ	0xFE8
  6131                           fsr1h	equ	0xFE2
  6132                           fsr1l	equ	0xFE1
  6133                           bsr	equ	0xFE0
  6134                           indf2	equ	0xFDF
  6135                           postinc2	equ	0xFDE
  6136                           postdec2	equ	0xFDD
  6137                           fsr2h	equ	0xFDA
  6138                           fsr2l	equ	0xFD9
  6139                           status	equ	0xFD8


Data Sizes:
    Strings     67
    Constant    10
    Data        0
    BSS         11
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     54      60
    BANK0           160     29      34
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_9(CODE[3]), STR_8(CODE[5]), STR_7(CODE[5]), STR_6(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 4
		 -> putIntLCD@result_958(BANK0[3]), putIntLCD@result_956(BANK0[4]), putIntLCD@result_954(BANK0[3]), putIntLCD@result(BANK0[2]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    putLCD@buffer	PTR unsigned char  size(2) Largest target is 17
		 -> putIntLCD@result_958(BANK0[3]), putIntLCD@result_956(BANK0[4]), putIntLCD@result_954(BANK0[3]), putIntLCD@result(BANK0[2]), 
		 -> STR_5(CODE[8]), STR_4(CODE[4]), STR_3(CODE[7]), STR_2(CODE[17]), 
		 -> STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_LCDUpdate
    _putIntLCD->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _LCDInitialDisplay->_SetLCDCGRamAddr
    _LCDInitialDisplay->_SetLCDDDRamAddr
    _putLCD->_WriteDataLCD
    _InitLCD->_OpenLCD
    _OpenLCD->_SetLCDDDRamAddr
    _DelayFor18TCY->_Delay1TCYx

Critical Paths under _XC8_HighISR_Handler in COMRAM

    None.

Critical Paths under _XC8_LowISR_Handler in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_LCDUpdate
    _LCDUpdate->_putIntLCD
    _putIntLCD->_sprintf

Critical Paths under _XC8_HighISR_Handler in BANK0

    None.

Critical Paths under _XC8_LowISR_Handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _XC8_HighISR_Handler in BANK1

    None.

Critical Paths under _XC8_LowISR_Handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _XC8_HighISR_Handler in BANK2

    None.

Critical Paths under _XC8_LowISR_Handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _XC8_HighISR_Handler in BANK3

    None.

Critical Paths under _XC8_LowISR_Handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _XC8_HighISR_Handler in BANK4

    None.

Critical Paths under _XC8_LowISR_Handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _XC8_HighISR_Handler in BANK5

    None.

Critical Paths under _XC8_LowISR_Handler in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    7753
                        _ADC_Convert
          _ConvertTimerOverflowToMPH
     _ConvertTimerOverflowToWheelRPM
                        _Delay1KTCYx
                 _InitAnalogueInputs
                     _InitInterrupts
                            _InitLCD
                       _InitMotorPWM
                          _InitPorts
                  _LCDInitialDisplay
                          _LCDUpdate
 ---------------------------------------------------------------------------------
 (1) _LCDUpdate                                            5     1      4    6406
                                             53 COMRAM     1     1      0
                                             25 BANK0      4     0      4
                            _BusyLCD
                    _SetLCDDDRamAddr
                        _WriteCmdLCD
                          _putIntLCD
                             _putLCD
 ---------------------------------------------------------------------------------
 (2) _putIntLCD                                           16    12      4    5188
                                              9 BANK0     16    12      4
                             _putLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             28    22      6    3206
                                             43 COMRAM    10     4      6
                                              0 BANK0      9     9      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                             31 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     386
                                             31 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     386
                                             38 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     395
                                             31 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _LCDInitialDisplay                                    0     0      0     995
                            _BusyLCD
                    _SetLCDCGRamAddr
                    _SetLCDDDRamAddr
                        _WriteCmdLCD
                       _WriteDataLCD
                             _putLCD
 ---------------------------------------------------------------------------------
 (2) _putLCD                                               2     0      2     709
                                             33 COMRAM     2     0      2
                            _BusyLCD
                       _WriteDataLCD
 ---------------------------------------------------------------------------------
 (3) _WriteDataLCD                                         1     1      0      66
                                             32 COMRAM     1     1      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (2) _SetLCDCGRamAddr                                      4     4      0      66
                                             32 COMRAM     4     4      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (1) _InitPorts                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitLCD                                              0     0      0     330
                            _BusyLCD
                            _OpenLCD
                        _WriteCmdLCD
 ---------------------------------------------------------------------------------
 (2) _OpenLCD                                              1     1      0     242
                                             36 COMRAM     1     1      0
                            _BusyLCD
                           _BusyXLCD
                       _Delay100TCYx
                       _Delay10KTCYx
                    _SetLCDDDRamAddr
                        _WriteCmdLCD
 ---------------------------------------------------------------------------------
 (2) _WriteCmdLCD                                          1     1      0      66
                                             32 COMRAM     1     1      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (2) _SetLCDDDRamAddr                                      4     4      0      66
                                             32 COMRAM     4     4      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (3) _Delay10KTCYx                                         2     2      0      22
                                             31 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _Delay100TCYx                                         1     1      0      22
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _BusyXLCD                                             0     0      0      22
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (3) _BusyLCD                                              0     0      0      22
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (4) _DelayFor18TCY                                        0     0      0      22
                         _Delay1TCYx
 ---------------------------------------------------------------------------------
 (5) _Delay1TCYx                                           1     1      0      22
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitInterrupts                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitAnalogueInputs                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Delay1KTCYx                                          1     1      0      22
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ConvertTimerOverflowToWheelRPM                       2     0      2       0
                                             31 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _ConvertTimerOverflowToMPH                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_Convert                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _XC8_LowISR_Handler                                  17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _XC8_HighISR_Handler                                 14    14      0       0
                                             17 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Convert
   _ConvertTimerOverflowToMPH
   _ConvertTimerOverflowToWheelRPM
   _Delay1KTCYx
   _InitAnalogueInputs
   _InitInterrupts
   _InitLCD
     _BusyLCD
       _DelayFor18TCY
         _Delay1TCYx
     _OpenLCD
       _BusyLCD
         _DelayFor18TCY
           _Delay1TCYx
       _BusyXLCD
         _DelayFor18TCY
           _Delay1TCYx
       _Delay100TCYx
       _Delay10KTCYx
       _SetLCDDDRamAddr
         _DelayFor18TCY
           _Delay1TCYx
       _WriteCmdLCD
         _DelayFor18TCY
           _Delay1TCYx
     _WriteCmdLCD
       _DelayFor18TCY
         _Delay1TCYx
   _InitMotorPWM
   _InitPorts
   _LCDInitialDisplay
     _BusyLCD
       _DelayFor18TCY
         _Delay1TCYx
     _SetLCDCGRamAddr
       _DelayFor18TCY
         _Delay1TCYx
     _SetLCDDDRamAddr
       _DelayFor18TCY
         _Delay1TCYx
     _WriteCmdLCD
       _DelayFor18TCY
         _Delay1TCYx
     _WriteDataLCD
       _DelayFor18TCY
         _Delay1TCYx
     _putLCD
       _BusyLCD
         _DelayFor18TCY
           _Delay1TCYx
       _WriteDataLCD
         _DelayFor18TCY
           _Delay1TCYx
   _LCDUpdate
     _BusyLCD
       _DelayFor18TCY
         _Delay1TCYx
     _SetLCDDDRamAddr
       _DelayFor18TCY
         _Delay1TCYx
     _WriteCmdLCD
       _DelayFor18TCY
         _Delay1TCYx
     _putIntLCD
       _putLCD
         _BusyLCD
           _DelayFor18TCY
             _Delay1TCYx
         _WriteDataLCD
           _DelayFor18TCY
             _Delay1TCYx
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _putLCD
       _BusyLCD
         _DelayFor18TCY
           _Delay1TCYx
       _WriteDataLCD
         _DelayFor18TCY
           _Delay1TCYx

 _XC8_LowISR_Handler (ROOT)

 _XC8_HighISR_Handler (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     1D      22       5       21.3%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     36      3C       1       63.2%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      5E      15        0.0%
DATA                 0      0      5E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Apr 22 20:36:44 2015

                   __size_of_WriteCmdLCD 0040                                       bsr 000FE0  
                    ___wmul@multiplicand 0022                             __CFG_CP0$OFF 000000  
                           __CFG_CP1$OFF 000000                             __CFG_CP2$OFF 000000  
                           __CFG_CP3$OFF 000000                                      l352 1A40  
                                    l467 191C                                      l556 18E0  
                                    l805 1A4C                             __CFG_CPB$OFF 000000  
                                    _PR2 000FCB                             __CFG_CPD$OFF 000000  
                                    _RPM 007D                             __CFG_BORV$30 000000  
                  __size_of_WriteDataLCD 0040                                      wreg 000FE8  
             ?_ConvertTimerOverflowToMPH 0001                             __CFG_LVP$OFF 000000  
                   __size_of_ADC_Convert 000E                               _Delay1TCYx 1A4A  
                                   l1112 16E6                                     l1122 1830  
                                   l3111 17B8                                     l3051 13EE  
                                   l3115 17CA                                     l3107 17A6  
                                   l3131 1584                                     l3311 081E  
                                   l3303 0808                                     l3231 0742  
                                   l3223 072C                                     l3215 0716  
                                   l3207 0700                                     l3151 0666  
                                   l4023 1A1C                                     l3071 1448  
                                   l3063 1424                                     l3055 1400  
                                   l3119 17DC                                     l4111 16BC  
                                   l3049 13E0                                     l4201 0E76  
                                   l3067 1436                                     l3059 1412  
                                   l4107 16AA                                     l4131 180E  
                                   l4109 16B4                                     l4205 0EAA  
                                   l4141 0CDA                                     l3511 0A42  
                                   l3503 0A2C                                     l3431 0966  
                                   l3423 0950                                     l3415 093A  
                                   l3407 0924                                     l3351 088C  
                                   l3343 0876                                     l3335 0860  
                                   l3327 084A                                     l3319 0834  
                                   l3271 07B0                                     l3263 079A  
                                   l3255 0784                                     l3247 076E  
                                   l3239 0758                                     l3191 06D4  
                                   l3183 06BE                                     l3175 06A8  
                                   l3167 0692                                     l3159 067C  
                                   l4119 16DA                                     l4135 1824  
                                   l4127 17FC                                     l4231 0F42  
                                   l4215 0EDA                                     l4223 0F0E  
                                   l4207 0EB6                                     l4303 12A8  
                                   l4129 1806                                     l4225 0F1A  
                                   l4217 0EE6                                     l4153 0D14  
                                   l4091 1994                                     l4171 0DDE  
                                   l4155 0D2A                                     l4147 0CF6  
                                   l4245 0FBE                                     l4237 0F60  
                                   l4181 0E10                                     l4149 0D08  
                                   l4341 1610                                     l3711 0C68  
                                   l3703 0C52                                     l3631 0B8C  
                                   l3623 0B76                                     l3615 0B60  
                                   l3607 0B4A                                     l3551 0AB0  
                                   l3543 0A9A                                     l3535 0A84  
                                   l3527 0A6E                                     l3519 0A58  
                                   l3471 09D4                                     l3463 09BE  
                                   l3455 09A8                                     l3447 0992  
                                   l3439 097C                                     l3391 08FA  
                                   l3383 08E4                                     l3375 08CE  
                                   l3367 08B8                                     l3359 08A2  
                                   l3295 07F2                                     l3287 07DC  
                                   l3279 07C6                                     l3199 06EA  
                                   l2823 19DE                                     l4239 0F66  
                                   l4191 0E4E                                     l4183 0E16  
                                   l4159 0D4A                                     l4247 0FCE  
                                   l4271 1372                                     l4249 0FEC  
                                   l4169 0DB6                                     l4265 133A  
                                   l4329 15D6                                     l3811 107C  
                                   l3803 106C                                     l2819 1A0A  
                                   l4195 0E54                                     l4187 0E24  
                                   l4259 1302                                     l4283 1222  
                                   l4277 11F2                                     l3743 0CC0  
                                   l3735 0CAA                                     l3727 0C94  
                                   l3719 0C7E                                     l3671 0BFA  
                                   l3663 0BE4                                     l3655 0BCE  
                                   l3647 0BB8                                     l3639 0BA2  
                                   l3591 0B1E                                     l3583 0B08  
                                   l3575 0AF2                                     l3567 0ADC  
                                   l3559 0AC6                                     l3495 0A16  
                                   l3487 0A00                                     l3479 09EA  
                                   l3399 090E                                     l4295 126E  
                                   l4287 123A                                     l4279 1200  
                                   l2793 166C                                     l3931 116C  
                                   l3923 115C                                     l3915 114C  
                                   l3907 113C                                     l3851 10CC  
                                   l3843 10BC                                     l3835 10AC  
                                   l3827 109C                                     l3819 108C  
                                   l3771 102C                                     l3763 101C  
                                   l3755 100C                                     l2787 1638  
                                   l4299 1290                                     l3695 0C3C  
                                   l3687 0C26                                     l3679 0C10  
                                   l3599 0B34                                     l3971 11BC  
                                   l3963 11AC                                     l3955 119C  
                                   l3947 118C                                     l3939 117C  
                                   l3891 111C                                     l3883 110C  
                                   l3875 10FC                                     l3867 10EC  
                                   l3859 10DC                                     l3795 105C  
                                   l3787 104C                                     l3779 103C  
                                   l3987 11DC                                     l3979 11CC  
                                   l3899 112C                                     STR_1 060B  
                                   STR_2 061C                                     STR_3 0635  
                                   STR_4 0618                                     STR_5 062D  
                                   STR_6 063C                                     STR_7 0641  
                                   STR_8 0646                                     STR_9 064B  
                                   u2055 170C                                     _LATC 000F8B  
                                   _LATD 000F8C                                     u1810 1662  
                                   u1820 168C                                     u1817 1658  
                                   u1827 1682                                     u1845 1760  
                                   u3757 19E4                                     u3767 1A0C  
                                   i1l73 0064                                     u3777 1A1E  
                                   i1l77 007A                                     i2l70 14CA  
                                   _main 15A2                    SetLCDDDRamAddr@DDaddr 0024  
                                   fsr0h 000FEA                                     fsr1h 000FE2  
                                   indf0 000FEF                                     fsr0l 000FE9  
                                   fsr2h 000FDA                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                                   pclat 000FFA                                     prodh 000FF4  
                                   prodl 000FF3                                     start 00C0  
                     __size_of_LCDUpdate 00E8                            __CFG_IESO$OFF 000000  
                           ___param_bank 000010                          __end_of_BusyLCD 1932  
                        __end_of_InitLCD 17EE                            ?_InitMotorPWM 0001  
                        __end_of_OpenLCD 145C                             _WriteDataLCD 183A  
                            _Delay1KTCYx 1A1A                                    ?_main 0001  
                  __size_of_Delay100TCYx 0012                                    _ANSEL 000F7E  
                                  _T0CON 000FD5                                    _T2CON 000FCA  
                        __end_of___lwdiv 16F0                          __end_of___lwmod 183A  
                                  _TMR0H 000FD7                                    _TMR0L 000FD6  
                                  _PORTB 000F81                                    _PORTD 000F83  
                                  _TRISA 000F92                                    _TRISB 000F93  
                                  _TRISD 000F95                    __size_of_Delay10KTCYx 0018  
                          __CFG_PWRT$OFF 000000                            __CFG_WRT0$OFF 000000  
                          __CFG_WRT1$OFF 000000                            __CFG_WRT2$OFF 000000  
                          __CFG_WRT3$OFF 000000                           __CFG_EBTR0$OFF 000000  
                         __CFG_FCMEN$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                           __CFG_EBTR3$OFF 000000  
                                  _Speed 0080                            __CFG_WRTB$OFF 000000  
                          __CFG_WRTC$OFF 000000                            __CFG_WRTD$OFF 000000  
      __end_of_ConvertTimerOverflowToMPH 11E2                           __CFG_EBTRB$OFF 000000  
                        __end_of_dpowers 060B                          __end_of_isdigit 199E  
                                  tablat 000FF5                                    status 000FD8  
                        __end_of_sprintf 0FFC                           __CFG_PBADEN$ON 000000  
                      ??_SetLCDDDRamAddr 0021                           __CFG_MCLRE$OFF 000000  
                      ??_SetLCDCGRamAddr 0021                          __initialization 195A  
                           _Delay100TCYx 1A08                           ??_InitMotorPWM 0020  
                           __end_of_main 1634                           _InitInterrupts 19BE  
                       __end_of_BusyXLCD 18F6                           WriteCmdLCD@cmd 0021  
                           _Delay10KTCYx 19DC                                   ??_main 0037  
                          __activetblptr 000002                        __end_of_LCDUpdate 12CA  
                                 _ADCON0 000FC2                                   _ADCON1 000FC1  
                                 _ADCON2 000FC0                                   _ADRESH 000FC4  
                            ?_Delay1TCYx 0001                                   _CCPR1L 000FBE  
                                 _ANSELH 000F7F                           __CFG_WDTEN$OFF 000000  
                                 i2l4073 14B0                             LCDUpdate@RPM 0079  
                           LCDUpdate@PWM 007C                       __size_of_InitPorts 0020  
                              ??_BusyLCD 0021                                ??_InitLCD 0026  
                              ??_OpenLCD 0025                   __end_of_InitInterrupts 19DC  
                         __CFG_XINST$OFF 000000                               _PortBValue 003B  
                                 ___wmul 1932                           __CFG_STVREN$ON 000000  
                              ??___lwdiv 0024                                ??___lwmod 002B  
             __end_of_InitAnalogueInputs 1A08               __end_of_XC8_LowISR_Handler 00C0  
                                 _putLCD 1634                      putIntLCD@result_954 0071  
                    putIntLCD@result_956 006D                      putIntLCD@result_958 0074  
                              ??_isdigit 0020                             __mediumconst 0000  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8                                ??_sprintf 0032  
                             __accesstop 0060                  __end_of__initialization 1972  
                          ___rparam_used 000001                          ?_InitInterrupts 0001  
                         __pcstackCOMRAM 0001                      __size_of_Delay1TCYx 000C  
                      __end_of_InitPorts 19BE              ??_ConvertTimerOverflowToMPH 0020  
            __end_of_XC8_HighISR_Handler 1504                          __CFG_LPT1OSC$ON 000000  
                   __end_of_InitMotorPWM 1A3C                   __size_of_DelayFor18TCY 0008  
                           sprintf@width 0066                               __pbssBANK0 007D  
                              ?_BusyXLCD 0001                   _TimerCounterAtOverflow 0037  
                  SetLCDCGRamAddr@CGaddr 0024                            ??_WriteCmdLCD 0021  
                                ?___wmul 0020                                  _CCP1CON 000FBD  
                           ?_Delay1KTCYx 0001                                  ?_putLCD 0022  
                     __size_of_putIntLCD 00D4                            ??_ADC_Convert 0020  
                        _SetLCDDDRamAddr 174A                          _SetLCDCGRamAddr 16F0  
                             ??_BusyXLCD 0021                                  _BusyLCD 18F6  
                                _InitLCD 179E                                  _OpenLCD 139E  
                                __Hparam 0000                _ConvertTimerOverflowToMPH 0FFC  
                                __Lparam 0000                            _DelayFor18TCY 1A56  
                        __size_of___wmul 0028                                  ___lwdiv 1694  
                                ___lwmod 17EE                             __psmallconst 0600  
                                __pcinit 195A                                  __ramtop 0600  
                        __size_of_putLCD 0060                                  __ptext0 15A2  
                                __ptext1 11E2                                  __ptext2 12CA  
                                __ptext3 0CCC                                  __ptext4 197C  
                                __ptext5 1932                                  __ptext6 17EE  
                                __ptext7 1694                                  __ptext8 1504  
                                __ptext9 1634                      __end_of_WriteCmdLCD 18BA  
                              _T0CONbits 000FD5                                  _dpowers 0601  
                                _isdigit 197C                             ??_Delay1TCYx 0020  
                                _sprintf 0CCC                                _LCDUpdate 11E2  
                         __pintcode_body 145C                     end_of_initialization 1972  
                    __end_of_ADC_Convert 1A4A   __end_of_ConvertTimerOverflowToWheelRPM 0CCC  
__size_of_ConvertTimerOverflowToWheelRPM 067C           _ConvertTimerOverflowToWheelRPM 0650  
                      _LCDInitialDisplay 1504                            __Lmediumconst 0000  
                                int_func 145C                       ?_LCDInitialDisplay 0001  
                      __end_of_putIntLCD 139E                           ?_DelayFor18TCY 0001  
                                postdec2 000FDD                                  postinc2 000FDE  
                    ??_LCDInitialDisplay 0025                       __end_of_Delay1TCYx 1A56  
                __end_of_SetLCDDDRamAddr 179E                    __size_of_InitMotorPWM 0010  
                __end_of_SetLCDCGRamAddr 174A                                _TRISAbits 000F92  
                              _TRISCbits 000F94                                _TRISEbits 000F96  
                     _InitAnalogueInputs 19F4                       _XC8_LowISR_Handler 0018  
                             ?_LCDUpdate 0079                __end_of_LCDInitialDisplay 15A2  
                       ??_InitInterrupts 0020                      ?_InitAnalogueInputs 0001  
                    ?_XC8_LowISR_Handler 0001                         Delay100TCYx@unit 0020  
                            _WriteCmdLCD 187A                             _InitMotorPWM 1A2C  
                         __end_of___wmul 195A                     ??_InitAnalogueInputs 0020  
                   ??_XC8_LowISR_Handler 0001                     __size_of_Delay1KTCYx 0012  
                         __end_of_putLCD 1694                      start_initialization 195A  
                            _ADC_Convert 1A3C                                _InitPorts 199E  
                      __size_of_BusyXLCD 003C                          ??_DelayFor18TCY 0021  
                               ??___wmul 0024                            ?_WriteDataLCD 0001  
                      _CanCalculateSpeed 007F                                 ??_putLCD 0024  
     __size_of_ConvertTimerOverflowToMPH 01E6                           OpenLCD@lcdtype 0025  
                       ?_SetLCDDDRamAddr 0001                         ?_SetLCDCGRamAddr 0001  
                            __pbssCOMRAM 0037                            __pcstackBANK0 0060  
                             ?_InitPorts 0001                         WriteDataLCD@data 0021  
                           _isdigit$1370 0021                              ??_LCDUpdate 0036  
             __size_of_LCDInitialDisplay 009E                          Delay1KTCYx@unit 0020  
                            sprintf@flag 0065             __size_of_XC8_HighISR_Handler 14FC  
                            sprintf@prec 0062                                 ?_BusyLCD 0001  
                               ?_InitLCD 0001                                 ?_OpenLCD 0001  
                       ___lwdiv@dividend 0020                        __CFG_CCP2MX$PORTC 000000  
                          ?_Delay100TCYx 0001                                __pintcode 0008  
                         ??_WriteDataLCD 0021                            ?_Delay10KTCYx 0001  
                               ?___lwdiv 0020                                 ?___lwmod 0027  
                            __pintcodelo 0018                              __smallconst 0600  
                               ?_isdigit 0001                         ___lwdiv@quotient 0025  
                               ?_sprintf 002C                           ___wmul@product 0024  
                               _LATBbits 000F8A                     _TimerOverflowCounter 0039  
                               _LATDbits 000F8C                                 _LATEbits 000F8D  
                         LCDUpdate@Speed 0036                           ??_Delay100TCYx 0020  
                               _RCONbits 000FD0                         __CFG_WDTPS$32768 000000  
                         ??_Delay10KTCYx 0020                                _putIntLCD 12CA  
       ??_ConvertTimerOverflowToWheelRPM 0022          ?_ConvertTimerOverflowToWheelRPM 0020  
                             putIntLCD@n 0069                               _ADCON0bits 000FC2  
                      ___wmul@multiplier 0020                             putLCD@buffer 0022  
                               _WPUBbits 000F7C                         Delay10KTCYx@unit 0021  
                            ??_InitPorts 0020                              _INTCON2bits 000FF1  
                            _INTCON3bits 000FF0                                 _BusyXLCD 18BA  
                       __size_of_BusyLCD 003C                         __size_of_InitLCD 0050  
                               __Hrparam 0000                         __size_of_OpenLCD 00BE  
                               __Lrparam 0000                       __CFG_BOREN$SBORDIS 000000  
                           ?_WriteCmdLCD 0001                               ?_putIntLCD 0069  
                               _Throttle 0081                         __size_of___lwdiv 005C  
                       __size_of___lwmod 004C                               sprintf@val 0063  
                           ?_ADC_Convert 0001                        LCDUpdate@Throttle 007B  
                       __size_of_isdigit 0022                          ___lwdiv@divisor 0022  
                        ___lwdiv@counter 0024                                 __ptext10 183A  
                               __ptext11 16F0                                 __ptext20 18BA  
                               __ptext12 199E                                 __ptext21 18F6  
                               __ptext13 1A2C                                 __ptext22 1A56  
                               __ptext14 179E                                 __ptext23 1A4A  
                               __ptext15 139E                                 __ptext24 19BE  
                               __ptext16 187A                                 __ptext25 19F4  
                               __ptext17 174A                                 __ptext26 1A1A  
                               __ptext18 19DC                                 __ptext27 0650  
                               __ptext19 1A08                                 __ptext28 0FFC  
                               __ptext29 1A3C                     __end_of_WriteDataLCD 187A  
                       __size_of_sprintf 0330                            __size_of_main 0092  
                         Delay1TCYx@unit 0020                            ??_Delay1KTCYx 0020  
                    _XC8_HighISR_Handler 0008              __size_of_InitAnalogueInputs 0014  
            __size_of_XC8_LowISR_Handler 00A8                               _INTCONbits 000FF2  
                   __end_of_Delay100TCYx 1A1A                                 isdigit@c 0022  
                   __end_of_Delay10KTCYx 19F4                                 intlevel1 0000  
                               intlevel2 0000                                sprintf@ap 0060  
                              sprintf@sp 002C                     ?_XC8_HighISR_Handler 0001  
                       ___lwmod@dividend 0027                    __end_of_DelayFor18TCY 1A5E  
                            ??_putIntLCD 0036                  __size_of_InitInterrupts 001E  
                   _TimerValueAtOverflow 003C                          putIntLCD@result 0077  
                               sprintf@c 0068                                 sprintf@f 002E  
                        ___lwmod@divisor 0029                      __end_of_Delay1KTCYx 1A2C  
                        ___lwmod@counter 002B                 __size_of_SetLCDDDRamAddr 0054  
                  ??_XC8_HighISR_Handler 0012                 __size_of_SetLCDCGRamAddr 005A  
                      __CFG_FOSC$INTIO67 000000                             putIntLCD@pad 006B  
