

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Apr 22 20:49:05 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F45K20
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    43                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    44                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    45                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    46  0000                     
    47                           	psect	smallconst
    48  000600                     __psmallconst:
    49                           	opt stack 0
    50  000600  00                 	db	0
    51  000601                     _dpowers:
    52                           	opt stack 0
    53  000601  0001               	dw	1
    54  000603  000A               	dw	10
    55  000605  0064               	dw	100
    56  000607  03E8               	dw	1000
    57  000609  2710               	dw	10000
    58  00060B                     __end_of_dpowers:
    59                           	opt stack 0
    60  0000                     _ADCON0	set	4034
    61  0000                     _ADCON0bits	set	4034
    62  0000                     _ADCON1	set	4033
    63  0000                     _ADCON2	set	4032
    64  0000                     _ADRESH	set	4036
    65  0000                     _ANSEL	set	3966
    66  0000                     _ANSELH	set	3967
    67  0000                     _CCP1CON	set	4029
    68  0000                     _CCPR1L	set	4030
    69  0000                     _INTCON2bits	set	4081
    70  0000                     _INTCON3bits	set	4080
    71  0000                     _INTCONbits	set	4082
    72  0000                     _LATBbits	set	3978
    73  0000                     _LATC	set	3979
    74  0000                     _LATD	set	3980
    75  0000                     _LATDbits	set	3980
    76  0000                     _LATEbits	set	3981
    77  0000                     _PORTB	set	3969
    78  0000                     _PORTD	set	3971
    79  0000                     _PR2	set	4043
    80  0000                     _RCONbits	set	4048
    81  0000                     _T0CON	set	4053
    82  0000                     _T0CONbits	set	4053
    83  0000                     _T2CON	set	4042
    84  0000                     _TMR0H	set	4055
    85  0000                     _TMR0L	set	4054
    86  0000                     _TRISA	set	3986
    87  0000                     _TRISAbits	set	3986
    88  0000                     _TRISB	set	3987
    89  0000                     _TRISCbits	set	3988
    90  0000                     _TRISD	set	3989
    91  0000                     _TRISEbits	set	3990
    92  0000                     _WPUBbits	set	3964
    93  00060B                     STR_1:
    94  00060B  20                 	db	32
    95  00060C  2D                 	db	45
    96  00060D  2D                 	db	45
    97  00060E  6D                 	db	109	;'m'
    98  00060F  70                 	db	112	;'p'
    99  000610  68                 	db	104	;'h'
   100  000611  20                 	db	32
   101  000612  20                 	db	32
   102  000613  20                 	db	32
   103  000614  20                 	db	32
   104  000615  2D                 	db	45
   105  000616  2D                 	db	45
   106  000617  2D                 	db	45
   107  000618  72                 	db	114	;'r'
   108  000619  70                 	db	112	;'p'
   109  00061A  6D                 	db	109	;'m'
   110  00061B  00                 	db	0
   111  00061C                     STR_2:
   112  00061C  2D                 	db	45
   113  00061D  2D                 	db	45
   114  00061E  2D                 	db	45
   115  00061F  70                 	db	112	;'p'
   116  000620  77                 	db	119	;'w'
   117  000621  72                 	db	114	;'r'
   118  000622  20                 	db	32
   119  000623  20                 	db	32
   120  000624  20                 	db	32
   121  000625  20                 	db	32
   122  000626  2D                 	db	45
   123  000627  2D                 	db	45
   124  000628  2D                 	db	45
   125  000629  70                 	db	112	;'p'
   126  00062A  77                 	db	119	;'w'
   127  00062B  6D                 	db	109	;'m'
   128  00062C  00                 	db	0
   129  00062D                     STR_5:
   130  00062D  70                 	db	112	;'p'
   131  00062E  77                 	db	119	;'w'
   132  00062F  72                 	db	114	;'r'
   133  000630  20                 	db	32
   134  000631  20                 	db	32
   135  000632  20                 	db	32
   136  000633  20                 	db	32
   137  000634  00                 	db	0
   138  000635                     STR_3:
   139  000635  6D                 	db	109	;'m'
   140  000636  70                 	db	112	;'p'
   141  000637  68                 	db	104	;'h'
   142  000638  20                 	db	32
   143  000639  20                 	db	32
   144  00063A  20                 	db	32
   145  00063B  00                 	db	0
   146  00063C                     STR_6:
   147  00063C  25                 	db	37
   148  00063D  30                 	db	48	;'0'
   149  00063E  32                 	db	50	;'2'
   150  00063F  64                 	db	100	;'d'
   151  000640  00                 	db	0
   152  000641                     STR_7:
   153  000641  25                 	db	37
   154  000642  30                 	db	48	;'0'
   155  000643  33                 	db	51	;'3'
   156  000644  64                 	db	100	;'d'
   157  000645  00                 	db	0
   158  000646                     STR_8:
   159  000646  25                 	db	37
   160  000647  30                 	db	48	;'0'
   161  000648  34                 	db	52	;'4'
   162  000649  64                 	db	100	;'d'
   163  00064A  00                 	db	0
   164  00064B                     STR_9:
   165  00064B  25                 	db	37
   166  00064C  64                 	db	100	;'d'
   167  00064D  00                 	db	0
   168  0000                     
   169                           ; #config settings
   170  00064E  00                 	db	0	; dummy byte at the end
   171  0000                     
   172                           	psect	cinit
   173  001998                     __pcinit:
   174                           	opt stack 0
   175  001998                     start_initialization:
   176                           	opt stack 0
   177  001998                     __initialization:
   178                           	opt stack 0
   179                           
   180                           ; Clear objects allocated to BANK0 (5 bytes)
   181  001998  0100               	movlb	0
   182  00199A  6B81               	clrf	(__pbssBANK0+4)& (0+255),b
   183  00199C  6B80               	clrf	(__pbssBANK0+3)& (0+255),b
   184  00199E  6B7F               	clrf	(__pbssBANK0+2)& (0+255),b
   185  0019A0  6B7E               	clrf	(__pbssBANK0+1)& (0+255),b
   186  0019A2  6B7D               	clrf	__pbssBANK0& (0+255),b
   187                           
   188                           ; Clear objects allocated to COMRAM (6 bytes)
   189  0019A4  6A3C               	clrf	(__pbssCOMRAM+5)& (0+255),c
   190  0019A6  6A3B               	clrf	(__pbssCOMRAM+4)& (0+255),c
   191  0019A8  6A3A               	clrf	(__pbssCOMRAM+3)& (0+255),c
   192  0019AA  6A39               	clrf	(__pbssCOMRAM+2)& (0+255),c
   193  0019AC  6A38               	clrf	(__pbssCOMRAM+1)& (0+255),c
   194  0019AE  6A37               	clrf	__pbssCOMRAM& (0+255),c
   195  0019B0                     end_of_initialization:
   196                           	opt stack 0
   197  0019B0                     __end_of__initialization:
   198                           	opt stack 0
   199  0019B0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   200  0019B2  6EF8               	movwf	tblptru,c
   201  0019B4  0100               	movlb	0
   202  0019B6  EFF0  F00A         	goto	_main	;jump to C main() function
   203                           tblptru	equ	0xFF8
   204                           
   205                           	psect	bssCOMRAM
   206  000037                     __pbssCOMRAM:
   207                           	opt stack 0
   208  000037                     _TimerCounterAtOverflow:
   209                           	opt stack 0
   210  000037                     	ds	2
   211  000039                     _TimerOverflowCounter:
   212                           	opt stack 0
   213  000039                     	ds	2
   214  00003B                     _PortBValue:
   215                           	opt stack 0
   216  00003B                     	ds	1
   217  00003C                     _TimerValueAtOverflow:
   218                           	opt stack 0
   219  00003C                     	ds	1
   220                           tblptru	equ	0xFF8
   221                           
   222                           	psect	bssBANK0
   223  00007D                     __pbssBANK0:
   224                           	opt stack 0
   225  00007D                     _RPM:
   226                           	opt stack 0
   227  00007D                     	ds	2
   228  00007F                     _CanCalculateSpeed:
   229                           	opt stack 0
   230  00007F                     	ds	1
   231  000080                     _Speed:
   232                           	opt stack 0
   233  000080                     	ds	1
   234  000081                     _Throttle:
   235                           	opt stack 0
   236  000081                     	ds	1
   237                           tblptru	equ	0xFF8
   238                           
   239                           	psect	cstackBANK0
   240  000060                     __pcstackBANK0:
   241                           	opt stack 0
   242  000060                     sprintf@ap:
   243                           	opt stack 0
   244                           
   245                           ; 2 bytes @ 0x0
   246  000060                     	ds	2
   247  000062                     sprintf@prec:
   248                           	opt stack 0
   249                           
   250                           ; 1 bytes @ 0x2
   251  000062                     	ds	1
   252  000063                     sprintf@val:
   253                           	opt stack 0
   254                           
   255                           ; 2 bytes @ 0x3
   256  000063                     	ds	2
   257  000065                     sprintf@flag:
   258                           	opt stack 0
   259                           
   260                           ; 1 bytes @ 0x5
   261  000065                     	ds	1
   262  000066                     sprintf@width:
   263                           	opt stack 0
   264                           
   265                           ; 2 bytes @ 0x6
   266  000066                     	ds	2
   267  000068                     sprintf@c:
   268                           	opt stack 0
   269                           
   270                           ; 1 bytes @ 0x8
   271  000068                     	ds	1
   272  000069                     putIntLCD@n:
   273                           	opt stack 0
   274                           
   275                           ; 2 bytes @ 0x9
   276  000069                     	ds	2
   277  00006B                     putIntLCD@pad:
   278                           	opt stack 0
   279                           
   280                           ; 2 bytes @ 0xB
   281  00006B                     	ds	2
   282  00006D                     putIntLCD@result_956:
   283                           	opt stack 0
   284                           
   285                           ; 4 bytes @ 0xD
   286  00006D                     	ds	4
   287  000071                     putIntLCD@result_954:
   288                           	opt stack 0
   289                           
   290                           ; 3 bytes @ 0x11
   291  000071                     	ds	3
   292  000074                     putIntLCD@result_958:
   293                           	opt stack 0
   294                           
   295                           ; 3 bytes @ 0x14
   296  000074                     	ds	3
   297  000077                     putIntLCD@result:
   298                           	opt stack 0
   299                           
   300                           ; 2 bytes @ 0x17
   301  000077                     	ds	2
   302  000079                     LCDUpdate@RPM:
   303                           	opt stack 0
   304                           
   305                           ; 2 bytes @ 0x19
   306  000079                     	ds	2
   307  00007B                     LCDUpdate@Throttle:
   308                           	opt stack 0
   309                           
   310                           ; 1 bytes @ 0x1B
   311  00007B                     	ds	1
   312  00007C                     LCDUpdate@PWM:
   313                           	opt stack 0
   314                           
   315                           ; 1 bytes @ 0x1C
   316  00007C                     	ds	1
   317                           tblptru	equ	0xFF8
   318                           
   319                           	psect	cstackCOMRAM
   320  000001                     __pcstackCOMRAM:
   321                           	opt stack 0
   322  000001                     ??_XC8_LowISR_Handler:
   323  000001                     
   324                           ; 1 bytes @ 0x0
   325  000001                     	ds	17
   326  000012                     ??_XC8_HighISR_Handler:
   327                           
   328                           ; 0 bytes @ 0x11
   329  000012                     	ds	14
   330  000020                     ??_Delay10KTCYx:
   331  000020                     ??_isdigit:
   332  000020                     ?_ConvertTimerOverflowToWheelRPM:
   333                           	opt stack 0
   334  000020                     ?___wmul:
   335                           	opt stack 0
   336  000020                     ?___lwdiv:
   337                           	opt stack 0
   338  000020                     Delay100TCYx@unit:
   339                           	opt stack 0
   340  000020                     Delay1KTCYx@unit:
   341                           	opt stack 0
   342  000020                     Delay1TCYx@unit:
   343                           	opt stack 0
   344  000020                     ___wmul@multiplier:
   345                           	opt stack 0
   346  000020                     ___lwdiv@dividend:
   347                           	opt stack 0
   348                           
   349                           ; 2 bytes @ 0x1F
   350  000020                     	ds	1
   351  000021                     ??_SetLCDCGRamAddr:
   352  000021                     ??_SetLCDDDRamAddr:
   353  000021                     WriteCmdLCD@cmd:
   354                           	opt stack 0
   355  000021                     WriteDataLCD@data:
   356                           	opt stack 0
   357  000021                     Delay10KTCYx@unit:
   358                           	opt stack 0
   359  000021                     _isdigit$1370:
   360                           	opt stack 0
   361                           
   362                           ; 1 bytes @ 0x20
   363  000021                     	ds	1
   364  000022                     isdigit@c:
   365                           	opt stack 0
   366  000022                     putLCD@buffer:
   367                           	opt stack 0
   368  000022                     ___wmul@multiplicand:
   369                           	opt stack 0
   370  000022                     ___lwdiv@divisor:
   371                           	opt stack 0
   372                           
   373                           ; 2 bytes @ 0x21
   374  000022                     	ds	2
   375  000024                     SetLCDDDRamAddr@DDaddr:
   376                           	opt stack 0
   377  000024                     SetLCDCGRamAddr@CGaddr:
   378                           	opt stack 0
   379  000024                     ___lwdiv@counter:
   380                           	opt stack 0
   381  000024                     ___wmul@product:
   382                           	opt stack 0
   383                           
   384                           ; 2 bytes @ 0x23
   385  000024                     	ds	1
   386  000025                     OpenLCD@lcdtype:
   387                           	opt stack 0
   388  000025                     ___lwdiv@quotient:
   389                           	opt stack 0
   390                           
   391                           ; 2 bytes @ 0x24
   392  000025                     	ds	1
   393  000026                     
   394                           ; 0 bytes @ 0x25
   395  000026                     	ds	1
   396  000027                     ?___lwmod:
   397                           	opt stack 0
   398  000027                     ___lwmod@dividend:
   399                           	opt stack 0
   400                           
   401                           ; 2 bytes @ 0x26
   402  000027                     	ds	2
   403  000029                     ___lwmod@divisor:
   404                           	opt stack 0
   405                           
   406                           ; 2 bytes @ 0x28
   407  000029                     	ds	2
   408  00002B                     ___lwmod@counter:
   409                           	opt stack 0
   410                           
   411                           ; 1 bytes @ 0x2A
   412  00002B                     	ds	1
   413  00002C                     ?_sprintf:
   414                           	opt stack 0
   415  00002C                     sprintf@sp:
   416                           	opt stack 0
   417                           
   418                           ; 2 bytes @ 0x2B
   419  00002C                     	ds	2
   420  00002E                     sprintf@f:
   421                           	opt stack 0
   422                           
   423                           ; 2 bytes @ 0x2D
   424  00002E                     	ds	4
   425  000032                     ??_sprintf:
   426                           
   427                           ; 0 bytes @ 0x31
   428  000032                     	ds	4
   429  000036                     LCDUpdate@Speed:
   430                           	opt stack 0
   431                           
   432                           ; 1 bytes @ 0x35
   433  000036                     	ds	1
   434  000037                     tblptru	equ	0xFF8
   435                           
   436                           ; 0 bytes @ 0x36
   437 ;;
   438 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   439 ;;
   440 ;; *************** function _main *****************
   441 ;; Defined at:
   442 ;;		line 67 in file "main.c"
   443 ;; Parameters:    Size  Location     Type
   444 ;;		None
   445 ;; Auto vars:     Size  Location     Type
   446 ;;		None
   447 ;; Return value:  Size  Location     Type
   448 ;;		None               void
   449 ;; Registers used:
   450 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   451 ;; Tracked objects:
   452 ;;		On entry : 0/0
   453 ;;		On exit  : 0/0
   454 ;;		Unchanged: 0/0
   455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   456 ;;      Params:         0       0       0       0       0       0       0
   457 ;;      Locals:         0       0       0       0       0       0       0
   458 ;;      Temps:          0       0       0       0       0       0       0
   459 ;;      Totals:         0       0       0       0       0       0       0
   460 ;;Total ram usage:        0 bytes
   461 ;; Hardware stack levels required when called:    8
   462 ;; This function calls:
   463 ;;		_ADC_Convert
   464 ;;		_ConvertTimerOverflowToMPH
   465 ;;		_ConvertTimerOverflowToWheelRPM
   466 ;;		_Delay1KTCYx
   467 ;;		_InitAnalogueInputs
   468 ;;		_InitInterrupts
   469 ;;		_InitLCD
   470 ;;		_InitMotorPWM
   471 ;;		_InitPorts
   472 ;;		_LCDInitialDisplay
   473 ;;		_LCDUpdate
   474 ;; This function is called by:
   475 ;;		Startup code after reset
   476 ;; This function uses a non-reentrant model
   477 ;;
   478                           
   479                           	psect	text0
   480  0015E0                     __ptext0:
   481                           	opt stack 0
   482  0015E0                     _main:
   483                           	opt stack 23
   484                           
   485                           ;main.c: 69: InitPorts();
   486                           
   487                           ;incstack = 0
   488  0015E0  ECEE  F00C         	call	_InitPorts	;wreg free
   489                           
   490                           ;main.c: 70: InitInterrupts();
   491  0015E4  ECFE  F00C         	call	_InitInterrupts	;wreg free
   492                           
   493                           ;main.c: 71: InitMotorPWM();
   494  0015E8  EC35  F00D         	call	_InitMotorPWM	;wreg free
   495                           
   496                           ;main.c: 72: InitLCD();
   497  0015EC  ECEE  F00B         	call	_InitLCD	;wreg free
   498                           
   499                           ;main.c: 73: InitAnalogueInputs();
   500  0015F0  EC19  F00D         	call	_InitAnalogueInputs	;wreg free
   501                           
   502                           ;main.c: 74: LCDInitialDisplay();
   503  0015F4  ECA1  F00A         	call	_LCDInitialDisplay	;wreg free
   504                           
   505                           ;main.c: 76: CCPR1L = 16;
   506  0015F8  0E10               	movlw	16
   507  0015FA  6EBE               	movwf	4030,c	;volatile
   508                           
   509                           ;main.c: 79: LATD = 0;
   510  0015FC  0E00               	movlw	0
   511  0015FE  6E8C               	movwf	3980,c	;volatile
   512                           
   513                           ;main.c: 80: LATC = 0;
   514  001600  0E00               	movlw	0
   515  001602  6E8B               	movwf	3979,c	;volatile
   516                           
   517                           ;main.c: 85: TMR0H = 0xFF;
   518  001604  68D7               	setf	4055,c	;volatile
   519                           
   520                           ;main.c: 86: TMR0L = 0x83;
   521  001606  0E83               	movlw	131
   522  001608  6ED6               	movwf	4054,c	;volatile
   523                           
   524                           ;main.c: 87: T0CONbits.TMR0ON = 1;
   525  00160A  8ED5               	bsf	4053,7,c	;volatile
   526                           
   527                           ;main.c: 89: CanCalculateSpeed = 0;
   528  00160C  0E00               	movlw	0
   529  00160E  0100               	movlb	0	; () banked
   530  001610  6F7F               	movwf	_CanCalculateSpeed& (0+255),b
   531  001612  D000               	goto	l4370
   532  001614                     l4370:
   533                           
   534                           ;main.c: 91: {
   535                           ;main.c: 93: CCPR1L = CCPR1L + 1;
   536  001614  28BE               	incf	4030,w,c	;volatile
   537  001616  6EBE               	movwf	4030,c	;volatile
   538                           
   539                           ;main.c: 94: Throttle = ADC_Convert();
   540  001618  EC3D  F00D         	call	_ADC_Convert	;wreg free
   541  00161C  0100               	movlb	0	; () banked
   542  00161E  6F81               	movwf	_Throttle& (0+255),b
   543                           
   544                           ; BSR set to: 0
   545                           ;main.c: 95: Throttle = Throttle >> 4;
   546  001620  0100               	movlb	0	; () banked
   547  001622  3981               	swapf	_Throttle& (0+255),w,b
   548  001624  0B0F               	andlw	15
   549  001626  0100               	movlb	0	; () banked
   550  001628  6F81               	movwf	_Throttle& (0+255),b
   551                           
   552                           ; BSR set to: 0
   553                           ;main.c: 96: if (CanCalculateSpeed) {
   554  00162A  0100               	movlb	0	; () banked
   555  00162C  517F               	movf	_CanCalculateSpeed& (0+255),w,b
   556  00162E  B4D8               	btfsc	status,2,c
   557  001630  D00E               	goto	l4382
   558                           
   559                           ; BSR set to: 0
   560                           ;main.c: 97: RPM = ConvertTimerOverflowToWheelRPM();
   561  001632  EC28  F003         	call	_ConvertTimerOverflowToWheelRPM	;wreg free
   562  001636  C020  F07D         	movff	?_ConvertTimerOverflowToWheelRPM,_RPM
   563  00163A  C021  F07E         	movff	?_ConvertTimerOverflowToWheelRPM+1,_RPM+1
   564                           
   565                           ;main.c: 98: Speed = ConvertTimerOverflowToMPH();
   566  00163E  EC09  F008         	call	_ConvertTimerOverflowToMPH	;wreg free
   567  001642  0100               	movlb	0	; () banked
   568  001644  6F80               	movwf	_Speed& (0+255),b
   569                           
   570                           ; BSR set to: 0
   571                           ;main.c: 99: CanCalculateSpeed = 0;
   572  001646  0E00               	movlw	0
   573  001648  0100               	movlb	0	; () banked
   574  00164A  6F7F               	movwf	_CanCalculateSpeed& (0+255),b
   575  00164C  D000               	goto	l4382
   576  00164E                     l4382:
   577                           
   578                           ; BSR set to: 0
   579                           ;main.c: 100: }
   580                           ;main.c: 103: LCDUpdate(Speed, RPM, Throttle, CCPR1L);
   581  00164E  C07D  F079         	movff	_RPM,LCDUpdate@RPM
   582  001652  C07E  F07A         	movff	_RPM+1,LCDUpdate@RPM+1
   583  001656  C081  F07B         	movff	_Throttle,LCDUpdate@Throttle
   584  00165A  CFBE F07C          	movff	4030,LCDUpdate@PWM	;volatile
   585  00165E  0100               	movlb	0	; () banked
   586  001660  5180               	movf	_Speed& (0+255),w,b
   587  001662  EC04  F009         	call	_LCDUpdate
   588                           
   589                           ;main.c: 107: Delay1KTCYx(1);
   590  001666  0E01               	movlw	1
   591  001668  EC2C  F00D         	call	_Delay1KTCYx
   592  00166C  D7D3               	goto	l4370
   593  00166E  EF60  F000         	goto	start
   594  001672                     __end_of_main:
   595                           	opt stack 0
   596                           tblptru	equ	0xFF8
   597                           status	equ	0xFD8
   598                           
   599 ;; *************** function _LCDUpdate *****************
   600 ;; Defined at:
   601 ;;		line 46 in file "lcddisplay.c"
   602 ;; Parameters:    Size  Location     Type
   603 ;;  Speed           1    wreg     unsigned char 
   604 ;;  RPM             2   25[BANK0 ] unsigned short 
   605 ;;  Throttle        1   27[BANK0 ] unsigned char 
   606 ;;  PWM             1   28[BANK0 ] unsigned char 
   607 ;; Auto vars:     Size  Location     Type
   608 ;;  Speed           1   53[COMRAM] unsigned char 
   609 ;; Return value:  Size  Location     Type
   610 ;;		None               void
   611 ;; Registers used:
   612 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   613 ;; Tracked objects:
   614 ;;		On entry : 0/0
   615 ;;		On exit  : 0/0
   616 ;;		Unchanged: 0/0
   617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   618 ;;      Params:         0       4       0       0       0       0       0
   619 ;;      Locals:         1       0       0       0       0       0       0
   620 ;;      Temps:          0       0       0       0       0       0       0
   621 ;;      Totals:         1       4       0       0       0       0       0
   622 ;;Total ram usage:        5 bytes
   623 ;; Hardware stack levels used:    1
   624 ;; Hardware stack levels required when called:    7
   625 ;; This function calls:
   626 ;;		_BusyLCD
   627 ;;		_SetLCDDDRamAddr
   628 ;;		_WriteCmdLCD
   629 ;;		_putIntLCD
   630 ;;		_putLCD
   631 ;; This function is called by:
   632 ;;		_main
   633 ;; This function uses a non-reentrant model
   634 ;;
   635                           
   636                           	psect	text1
   637  001208                     __ptext1:
   638                           	opt stack 0
   639  001208                     _LCDUpdate:
   640                           	opt stack 23
   641                           
   642                           ;incstack = 0
   643                           ;LCDUpdate@Speed stored from wreg
   644  001208  6E36               	movwf	LCDUpdate@Speed,c
   645                           
   646                           ;lcddisplay.c: 47: WriteCmdLCD(0x02);
   647  00120A  0E02               	movlw	2
   648  00120C  EC5C  F00C         	call	_WriteCmdLCD
   649                           
   650                           ;lcddisplay.c: 50: SetLCDDDRamAddr(0x00);
   651  001210  0E00               	movlw	0
   652  001212  ECC4  F00B         	call	_SetLCDDDRamAddr
   653                           
   654                           ;lcddisplay.c: 51: while(BusyLCD());
   655  001216  D000               	goto	l4318
   656  001218                     l4318:
   657  001218  EC9A  F00C         	call	_BusyLCD	;wreg free
   658  00121C  0900               	iorlw	0
   659  00121E  B4D8               	btfsc	status,2,c
   660  001220  D002               	goto	l4320
   661  001222  D7FA               	goto	l4318
   662                           
   663                           ;lcddisplay.c: 53: while(BusyLCD());
   664  001224  D000               	goto	l4320
   665  001226                     l4320:
   666  001226  EC9A  F00C         	call	_BusyLCD	;wreg free
   667  00122A  0900               	iorlw	0
   668  00122C  A4D8               	btfss	status,2,c
   669  00122E  D7FB               	goto	l4320
   670                           
   671                           ;lcddisplay.c: 54: putIntLCD(Speed,3);
   672  001230  C036  F069         	movff	LCDUpdate@Speed,putIntLCD@n
   673  001234  0100               	movlb	0	; () banked
   674  001236  6B6A               	clrf	(putIntLCD@n+1)& (0+255),b
   675  001238  0E00               	movlw	0
   676  00123A  0100               	movlb	0	; () banked
   677  00123C  6F6C               	movwf	(putIntLCD@pad+1)& (0+255),b
   678  00123E  0E03               	movlw	3
   679  001240  6F6B               	movwf	putIntLCD@pad& (0+255),b
   680  001242  EC78  F009         	call	_putIntLCD	;wreg free
   681                           
   682                           ;lcddisplay.c: 55: while(BusyLCD());
   683  001246  D000               	goto	l4324
   684  001248                     l4324:
   685  001248  EC9A  F00C         	call	_BusyLCD	;wreg free
   686  00124C  0900               	iorlw	0
   687  00124E  A4D8               	btfss	status,2,c
   688  001250  D7FB               	goto	l4324
   689                           
   690                           ;lcddisplay.c: 56: putLCD("mph   ");
   691  001252  0E35               	movlw	low STR_3
   692  001254  6E22               	movwf	putLCD@buffer,c
   693  001256  0E06               	movlw	high STR_3
   694  001258  6E23               	movwf	putLCD@buffer+1,c
   695  00125A  EC39  F00B         	call	_putLCD	;wreg free
   696                           
   697                           ;lcddisplay.c: 57: while(BusyLCD());
   698  00125E  D000               	goto	l4328
   699  001260                     l4328:
   700  001260  EC9A  F00C         	call	_BusyLCD	;wreg free
   701  001264  0900               	iorlw	0
   702  001266  A4D8               	btfss	status,2,c
   703  001268  D7FB               	goto	l4328
   704                           
   705                           ;lcddisplay.c: 58: putIntLCD(RPM, 4);
   706  00126A  C079  F069         	movff	LCDUpdate@RPM,putIntLCD@n
   707  00126E  C07A  F06A         	movff	LCDUpdate@RPM+1,putIntLCD@n+1
   708  001272  0E00               	movlw	0
   709  001274  0100               	movlb	0	; () banked
   710  001276  6F6C               	movwf	(putIntLCD@pad+1)& (0+255),b
   711  001278  0E04               	movlw	4
   712  00127A  6F6B               	movwf	putIntLCD@pad& (0+255),b
   713  00127C  EC78  F009         	call	_putIntLCD	;wreg free
   714                           
   715                           ;lcddisplay.c: 59: putLCD("rpm");
   716  001280  0E18               	movlw	low (STR_1+13)
   717  001282  6E22               	movwf	putLCD@buffer,c
   718  001284  0E06               	movlw	high (STR_1+13)
   719  001286  6E23               	movwf	putLCD@buffer+1,c
   720  001288  EC39  F00B         	call	_putLCD	;wreg free
   721                           
   722                           ;lcddisplay.c: 61: SetLCDDDRamAddr(0x040);
   723  00128C  0E40               	movlw	64
   724  00128E  ECC4  F00B         	call	_SetLCDDDRamAddr
   725                           
   726                           ;lcddisplay.c: 64: while(BusyLCD());
   727  001292  D000               	goto	l4336
   728  001294                     l4336:
   729  001294  EC9A  F00C         	call	_BusyLCD	;wreg free
   730  001298  0900               	iorlw	0
   731  00129A  A4D8               	btfss	status,2,c
   732  00129C  D7FB               	goto	l4336
   733                           
   734                           ;lcddisplay.c: 66: putIntLCD(Throttle,3);
   735  00129E  C07B  F069         	movff	LCDUpdate@Throttle,putIntLCD@n
   736  0012A2  0100               	movlb	0	; () banked
   737  0012A4  6B6A               	clrf	(putIntLCD@n+1)& (0+255),b
   738  0012A6  0E00               	movlw	0
   739  0012A8  0100               	movlb	0	; () banked
   740  0012AA  6F6C               	movwf	(putIntLCD@pad+1)& (0+255),b
   741  0012AC  0E03               	movlw	3
   742  0012AE  6F6B               	movwf	putIntLCD@pad& (0+255),b
   743  0012B0  EC78  F009         	call	_putIntLCD	;wreg free
   744                           
   745                           ;lcddisplay.c: 67: while(BusyLCD());
   746  0012B4  D000               	goto	l4340
   747  0012B6                     l4340:
   748  0012B6  EC9A  F00C         	call	_BusyLCD	;wreg free
   749  0012BA  0900               	iorlw	0
   750  0012BC  A4D8               	btfss	status,2,c
   751  0012BE  D7FB               	goto	l4340
   752                           
   753                           ;lcddisplay.c: 68: putLCD("pwr    ");
   754  0012C0  0E2D               	movlw	low STR_5
   755  0012C2  6E22               	movwf	putLCD@buffer,c
   756  0012C4  0E06               	movlw	high STR_5
   757  0012C6  6E23               	movwf	putLCD@buffer+1,c
   758  0012C8  EC39  F00B         	call	_putLCD	;wreg free
   759                           
   760                           ;lcddisplay.c: 69: while(BusyLCD());
   761  0012CC  D000               	goto	l4344
   762  0012CE                     l4344:
   763  0012CE  EC9A  F00C         	call	_BusyLCD	;wreg free
   764  0012D2  0900               	iorlw	0
   765  0012D4  A4D8               	btfss	status,2,c
   766  0012D6  D7FB               	goto	l4344
   767                           
   768                           ;lcddisplay.c: 70: putIntLCD(PWM, 3);
   769  0012D8  C07C  F069         	movff	LCDUpdate@PWM,putIntLCD@n
   770  0012DC  0100               	movlb	0	; () banked
   771  0012DE  6B6A               	clrf	(putIntLCD@n+1)& (0+255),b
   772  0012E0  0E00               	movlw	0
   773  0012E2  0100               	movlb	0	; () banked
   774  0012E4  6F6C               	movwf	(putIntLCD@pad+1)& (0+255),b
   775  0012E6  0E03               	movlw	3
   776  0012E8  6F6B               	movwf	putIntLCD@pad& (0+255),b
   777  0012EA  EC78  F009         	call	_putIntLCD	;wreg free
   778  0012EE  0012               	return		;funcret
   779  0012F0                     __end_of_LCDUpdate:
   780                           	opt stack 0
   781                           tblptru	equ	0xFF8
   782                           status	equ	0xFD8
   783                           
   784 ;; *************** function _putIntLCD *****************
   785 ;; Defined at:
   786 ;;		line 408 in file "lcddisplay.c"
   787 ;; Parameters:    Size  Location     Type
   788 ;;  n               2    9[BANK0 ] short 
   789 ;;  pad             2   11[BANK0 ] short 
   790 ;; Auto vars:     Size  Location     Type
   791 ;;  result          3   20[BANK0 ] unsigned char [3]
   792 ;;  result          4   13[BANK0 ] unsigned char [4]
   793 ;;  result          3   17[BANK0 ] unsigned char [3]
   794 ;;  result          2   23[BANK0 ] unsigned char [2]
   795 ;; Return value:  Size  Location     Type
   796 ;;		None               void
   797 ;; Registers used:
   798 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   799 ;; Tracked objects:
   800 ;;		On entry : 0/0
   801 ;;		On exit  : 0/0
   802 ;;		Unchanged: 0/0
   803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   804 ;;      Params:         0       4       0       0       0       0       0
   805 ;;      Locals:         0      12       0       0       0       0       0
   806 ;;      Temps:          0       0       0       0       0       0       0
   807 ;;      Totals:         0      16       0       0       0       0       0
   808 ;;Total ram usage:       16 bytes
   809 ;; Hardware stack levels used:    1
   810 ;; Hardware stack levels required when called:    6
   811 ;; This function calls:
   812 ;;		_putLCD
   813 ;;		_sprintf
   814 ;; This function is called by:
   815 ;;		_LCDUpdate
   816 ;; This function uses a non-reentrant model
   817 ;;
   818                           
   819                           	psect	text2
   820  0012F0                     __ptext2:
   821                           	opt stack 0
   822  0012F0                     _putIntLCD:
   823                           	opt stack 23
   824                           
   825                           ;lcddisplay.c: 410: if (pad == 2) {
   826                           
   827                           ;incstack = 0
   828  0012F0  0E02               	movlw	2
   829  0012F2  0100               	movlb	0	; () banked
   830  0012F4  196B               	xorwf	putIntLCD@pad& (0+255),w,b
   831  0012F6  0100               	movlb	0	; () banked
   832  0012F8  116C               	iorwf	(putIntLCD@pad+1)& (0+255),w,b
   833  0012FA  A4D8               	btfss	status,2,c
   834  0012FC  D015               	goto	l4300
   835                           
   836                           ; BSR set to: 0
   837                           ;lcddisplay.c: 411: unsigned char result[2];
   838                           ;lcddisplay.c: 412: sprintf(result, "%02d", n);
   839  0012FE  0E77               	movlw	low putIntLCD@result
   840  001300  6E2C               	movwf	sprintf@sp,c
   841  001302  0E00               	movlw	high putIntLCD@result
   842  001304  6E2D               	movwf	sprintf@sp+1,c
   843  001306  0E3C               	movlw	low STR_6
   844  001308  6E2E               	movwf	sprintf@f,c
   845  00130A  0E06               	movlw	high STR_6
   846  00130C  6E2F               	movwf	sprintf@f+1,c
   847  00130E  C069  F030         	movff	putIntLCD@n,?_sprintf+4
   848  001312  C06A  F031         	movff	putIntLCD@n+1,?_sprintf+5
   849  001316  EC71  F006         	call	_sprintf	;wreg free
   850                           
   851                           ;lcddisplay.c: 413: putLCD(result);
   852  00131A  0E77               	movlw	low putIntLCD@result
   853  00131C  6E22               	movwf	putLCD@buffer,c
   854  00131E  0E00               	movlw	high putIntLCD@result
   855  001320  6E23               	movwf	putLCD@buffer+1,c
   856  001322  EC39  F00B         	call	_putLCD	;wreg free
   857                           
   858                           ;lcddisplay.c: 414: } else if (pad == 3) {
   859  001326  0012               	return	
   860  001328                     l4300:
   861  001328  0E03               	movlw	3
   862  00132A  0100               	movlb	0	; () banked
   863  00132C  196B               	xorwf	putIntLCD@pad& (0+255),w,b
   864  00132E  0100               	movlb	0	; () banked
   865  001330  116C               	iorwf	(putIntLCD@pad+1)& (0+255),w,b
   866  001332  A4D8               	btfss	status,2,c
   867  001334  D015               	goto	l4306
   868                           
   869                           ; BSR set to: 0
   870                           ;lcddisplay.c: 415: unsigned char result[3];
   871                           ;lcddisplay.c: 416: sprintf(result, "%03d", n);
   872  001336  0E71               	movlw	low putIntLCD@result_954
   873  001338  6E2C               	movwf	sprintf@sp,c
   874  00133A  0E00               	movlw	high putIntLCD@result_954
   875  00133C  6E2D               	movwf	sprintf@sp+1,c
   876  00133E  0E41               	movlw	low STR_7
   877  001340  6E2E               	movwf	sprintf@f,c
   878  001342  0E06               	movlw	high STR_7
   879  001344  6E2F               	movwf	sprintf@f+1,c
   880  001346  C069  F030         	movff	putIntLCD@n,?_sprintf+4
   881  00134A  C06A  F031         	movff	putIntLCD@n+1,?_sprintf+5
   882  00134E  EC71  F006         	call	_sprintf	;wreg free
   883                           
   884                           ;lcddisplay.c: 417: putLCD(result);
   885  001352  0E71               	movlw	low putIntLCD@result_954
   886  001354  6E22               	movwf	putLCD@buffer,c
   887  001356  0E00               	movlw	high putIntLCD@result_954
   888  001358  6E23               	movwf	putLCD@buffer+1,c
   889  00135A  EC39  F00B         	call	_putLCD	;wreg free
   890                           
   891                           ;lcddisplay.c: 418: } else if (pad == 4) {
   892  00135E  0012               	return	
   893  001360                     l4306:
   894  001360  0E04               	movlw	4
   895  001362  0100               	movlb	0	; () banked
   896  001364  196B               	xorwf	putIntLCD@pad& (0+255),w,b
   897  001366  0100               	movlb	0	; () banked
   898  001368  116C               	iorwf	(putIntLCD@pad+1)& (0+255),w,b
   899  00136A  A4D8               	btfss	status,2,c
   900  00136C  D015               	goto	l4312
   901                           
   902                           ; BSR set to: 0
   903                           ;lcddisplay.c: 419: unsigned char result[4];
   904                           ;lcddisplay.c: 420: sprintf(result, "%04d", n);
   905  00136E  0E6D               	movlw	low putIntLCD@result_956
   906  001370  6E2C               	movwf	sprintf@sp,c
   907  001372  0E00               	movlw	high putIntLCD@result_956
   908  001374  6E2D               	movwf	sprintf@sp+1,c
   909  001376  0E46               	movlw	low STR_8
   910  001378  6E2E               	movwf	sprintf@f,c
   911  00137A  0E06               	movlw	high STR_8
   912  00137C  6E2F               	movwf	sprintf@f+1,c
   913  00137E  C069  F030         	movff	putIntLCD@n,?_sprintf+4
   914  001382  C06A  F031         	movff	putIntLCD@n+1,?_sprintf+5
   915  001386  EC71  F006         	call	_sprintf	;wreg free
   916                           
   917                           ;lcddisplay.c: 421: putLCD(result);
   918  00138A  0E6D               	movlw	low putIntLCD@result_956
   919  00138C  6E22               	movwf	putLCD@buffer,c
   920  00138E  0E00               	movlw	high putIntLCD@result_956
   921  001390  6E23               	movwf	putLCD@buffer+1,c
   922  001392  EC39  F00B         	call	_putLCD	;wreg free
   923                           
   924                           ;lcddisplay.c: 422: } else {
   925  001396  0012               	return	
   926  001398                     l4312:
   927                           
   928                           ;lcddisplay.c: 423: unsigned char result[3];
   929                           ;lcddisplay.c: 424: sprintf(result, "%d", n);
   930  001398  0E74               	movlw	low putIntLCD@result_958
   931  00139A  6E2C               	movwf	sprintf@sp,c
   932  00139C  0E00               	movlw	high putIntLCD@result_958
   933  00139E  6E2D               	movwf	sprintf@sp+1,c
   934  0013A0  0E4B               	movlw	low STR_9
   935  0013A2  6E2E               	movwf	sprintf@f,c
   936  0013A4  0E06               	movlw	high STR_9
   937  0013A6  6E2F               	movwf	sprintf@f+1,c
   938  0013A8  C069  F030         	movff	putIntLCD@n,?_sprintf+4
   939  0013AC  C06A  F031         	movff	putIntLCD@n+1,?_sprintf+5
   940  0013B0  EC71  F006         	call	_sprintf	;wreg free
   941                           
   942                           ;lcddisplay.c: 425: putLCD(result);
   943  0013B4  0E74               	movlw	low putIntLCD@result_958
   944  0013B6  6E22               	movwf	putLCD@buffer,c
   945  0013B8  0E00               	movlw	high putIntLCD@result_958
   946  0013BA  6E23               	movwf	putLCD@buffer+1,c
   947  0013BC  EC39  F00B         	call	_putLCD	;wreg free
   948  0013C0  0012               	return	
   949  0013C2  0012               	return		;funcret
   950  0013C4                     __end_of_putIntLCD:
   951                           	opt stack 0
   952                           tblptru	equ	0xFF8
   953                           status	equ	0xFD8
   954                           
   955 ;; *************** function _sprintf *****************
   956 ;; Defined at:
   957 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
   958 ;; Parameters:    Size  Location     Type
   959 ;;  sp              2   43[COMRAM] PTR unsigned char 
   960 ;;		 -> putIntLCD@result_958(3), putIntLCD@result_956(4), putIntLCD@result_954(3), putIntLCD@result(2), 
   961 ;;  f               2   45[COMRAM] PTR const unsigned char 
   962 ;;		 -> STR_9(3), STR_8(5), STR_7(5), STR_6(5), 
   963 ;; Auto vars:     Size  Location     Type
   964 ;;  tmpval          4    0        struct .
   965 ;;  cp              3    0        PTR const unsigned char 
   966 ;;  width           2    6[BANK0 ] int 
   967 ;;  val             2    3[BANK0 ] unsigned int 
   968 ;;  ap              2    0[BANK0 ] PTR void [1]
   969 ;;		 -> ?_sprintf(2), 
   970 ;;  len             2    0        unsigned int 
   971 ;;  c               1    8[BANK0 ] char 
   972 ;;  flag            1    5[BANK0 ] unsigned char 
   973 ;;  prec            1    2[BANK0 ] char 
   974 ;; Return value:  Size  Location     Type
   975 ;;                  2   43[COMRAM] int 
   976 ;; Registers used:
   977 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   978 ;; Tracked objects:
   979 ;;		On entry : 0/0
   980 ;;		On exit  : 0/0
   981 ;;		Unchanged: 0/0
   982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   983 ;;      Params:         6       0       0       0       0       0       0
   984 ;;      Locals:         0       9       0       0       0       0       0
   985 ;;      Temps:          4       0       0       0       0       0       0
   986 ;;      Totals:        10       9       0       0       0       0       0
   987 ;;Total ram usage:       19 bytes
   988 ;; Hardware stack levels used:    1
   989 ;; Hardware stack levels required when called:    3
   990 ;; This function calls:
   991 ;;		___lwdiv
   992 ;;		___lwmod
   993 ;;		___wmul
   994 ;;		_isdigit
   995 ;; This function is called by:
   996 ;;		_putIntLCD
   997 ;; This function uses a non-reentrant model
   998 ;;
   999                           
  1000                           	psect	text3
  1001  000CE2                     __ptext3:
  1002                           	opt stack 0
  1003  000CE2                     _sprintf:
  1004                           	opt stack 25
  1005                           
  1006                           ;doprnt.c: 494: va_list ap;
  1007                           ;doprnt.c: 499: signed char c;
  1008                           ;doprnt.c: 501: int width;
  1009                           ;doprnt.c: 506: signed char prec;
  1010                           ;doprnt.c: 508: unsigned char flag;
  1011                           ;doprnt.c: 523: union {
  1012                           ;doprnt.c: 524: unsigned long vd;
  1013                           ;doprnt.c: 525: double integ;
  1014                           ;doprnt.c: 526: } tmpval;
  1015                           ;doprnt.c: 528: unsigned int val;
  1016                           ;doprnt.c: 529: unsigned len;
  1017                           ;doprnt.c: 530: const char * cp;
  1018                           ;doprnt.c: 533: *ap = __va_start();
  1019                           
  1020                           ;incstack = 0
  1021  000CE2  0E30               	movlw	low (?_sprintf+4)
  1022  000CE4  0100               	movlb	0	; () banked
  1023  000CE6  6F60               	movwf	sprintf@ap& (0+255),b
  1024  000CE8  0E00               	movlw	high (?_sprintf+4)
  1025  000CEA  0100               	movlb	0	; () banked
  1026  000CEC  6F61               	movwf	(sprintf@ap+1)& (0+255),b
  1027                           
  1028                           ;doprnt.c: 536: while(c = *f++) {
  1029  000CEE  D17A               	goto	l4288
  1030  000CF0                     l4182:
  1031                           
  1032                           ; BSR set to: 0
  1033                           ;doprnt.c: 538: if(c != '%')
  1034  000CF0  0E25               	movlw	37
  1035  000CF2  0100               	movlb	0	; () banked
  1036  000CF4  1968               	xorwf	sprintf@c& (0+255),w,b
  1037  000CF6  B4D8               	btfsc	status,2,c
  1038  000CF8  D009               	goto	l4188
  1039                           
  1040                           ; BSR set to: 0
  1041                           ;doprnt.c: 540: {
  1042                           ;doprnt.c: 541: ((*sp++ = (c)));
  1043  000CFA  C02C  FFD9         	movff	sprintf@sp,fsr2l
  1044  000CFE  C02D  FFDA         	movff	sprintf@sp+1,fsr2h
  1045  000D02  C068  FFDF         	movff	sprintf@c,indf2
  1046                           
  1047                           ; BSR set to: 0
  1048  000D06  4A2C               	infsnz	sprintf@sp,f,c
  1049  000D08  2A2D               	incf	sprintf@sp+1,f,c
  1050                           
  1051                           ;doprnt.c: 542: continue;
  1052  000D0A  D16C               	goto	l4288
  1053  000D0C                     l4188:
  1054                           
  1055                           ; BSR set to: 0
  1056                           ;doprnt.c: 543: }
  1057                           ;doprnt.c: 546: width = 0;
  1058  000D0C  0E00               	movlw	0
  1059  000D0E  0100               	movlb	0	; () banked
  1060  000D10  6F67               	movwf	(sprintf@width+1)& (0+255),b
  1061  000D12  0E00               	movlw	0
  1062  000D14  6F66               	movwf	sprintf@width& (0+255),b
  1063                           
  1064                           ;doprnt.c: 548: flag = 0;
  1065  000D16  0E00               	movlw	0
  1066  000D18  0100               	movlb	0	; () banked
  1067  000D1A  6F65               	movwf	sprintf@flag& (0+255),b
  1068                           
  1069                           ; BSR set to: 0
  1070                           ;doprnt.c: 551: switch(*f) {
  1071                           
  1072                           ;doprnt.c: 550: for(;;) {
  1073  000D1C  D006               	goto	l4194
  1074  000D1E                     l4190:
  1075                           
  1076                           ;doprnt.c: 580: flag |= 0x04;
  1077  000D1E  0100               	movlb	0	; () banked
  1078  000D20  8565               	bsf	sprintf@flag& (0+255),2,b
  1079                           
  1080                           ;doprnt.c: 581: f++;
  1081  000D22  4A2E               	infsnz	sprintf@f,f,c
  1082  000D24  2A2F               	incf	sprintf@f+1,f,c
  1083                           
  1084                           ;doprnt.c: 582: continue;
  1085  000D26  D001               	goto	l4194
  1086                           
  1087                           ; BSR set to: 0
  1088                           ;doprnt.c: 584: }
  1089  000D28  D00B               	goto	l4196
  1090  000D2A                     l4194:
  1091  000D2A  C02E  FFF6         	movff	sprintf@f,tblptrl
  1092  000D2E  C02F  FFF7         	movff	sprintf@f+1,tblptrh
  1093  000D32                     	if	0	;tblptru may be non-zero
  1094  000D32                     	endif
  1095  000D32                     	if	0	;tblptru may be non-zero
  1096  000D32                     	endif
  1097  000D32  0008               	tblrd		*
  1098  000D34  50F5               	movf	tablat,w,c
  1099                           
  1100                           ; Switch size 1, requested type "space"
  1101                           ; Number of cases is 1, Range of values is 48 to 48
  1102                           ; switch strategies available:
  1103                           ; Name         Instructions Cycles
  1104                           ; simple_byte            4     3 (average)
  1105                           ;	Chosen strategy is simple_byte
  1106  000D36  0A30               	xorlw	48	; case 48
  1107  000D38  B4D8               	btfsc	status,2,c
  1108  000D3A  D7F1               	goto	l4190
  1109                           
  1110                           ;doprnt.c: 585: break;
  1111  000D3C  D001               	goto	l4196
  1112                           
  1113                           ;doprnt.c: 586: }
  1114  000D3E  D7F5               	goto	l4194
  1115  000D40                     l4196:
  1116                           
  1117                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1118  000D40  C02E  FFF6         	movff	sprintf@f,tblptrl
  1119  000D44  C02F  FFF7         	movff	sprintf@f+1,tblptrh
  1120  000D48                     	if	0	;tblptru may be non-zero
  1121  000D48                     	endif
  1122  000D48                     	if	0	;tblptru may be non-zero
  1123  000D48                     	endif
  1124  000D48  0008               	tblrd		*
  1125  000D4A  50F5               	movf	tablat,w,c
  1126  000D4C  ECDD  F00C         	call	_isdigit
  1127  000D50  A0D8               	btfss	status,0,c
  1128  000D52  D03C               	goto	l4210
  1129                           
  1130                           ;doprnt.c: 598: width = 0;
  1131  000D54  0E00               	movlw	0
  1132  000D56  0100               	movlb	0	; () banked
  1133  000D58  6F67               	movwf	(sprintf@width+1)& (0+255),b
  1134  000D5A  0E00               	movlw	0
  1135  000D5C  6F66               	movwf	sprintf@width& (0+255),b
  1136  000D5E  D000               	goto	l4200
  1137  000D60                     l4200:
  1138                           
  1139                           ;doprnt.c: 600: width *= 10;
  1140  000D60  C066  F020         	movff	sprintf@width,___wmul@multiplier
  1141  000D64  C067  F021         	movff	sprintf@width+1,___wmul@multiplier+1
  1142  000D68  0E00               	movlw	0
  1143  000D6A  6E23               	movwf	___wmul@multiplicand+1,c
  1144  000D6C  0E0A               	movlw	10
  1145  000D6E  6E22               	movwf	___wmul@multiplicand,c
  1146  000D70  ECB8  F00C         	call	___wmul	;wreg free
  1147  000D74  C020  F066         	movff	?___wmul,sprintf@width
  1148  000D78  C021  F067         	movff	?___wmul+1,sprintf@width+1
  1149                           
  1150                           ;doprnt.c: 601: width += *f++ - '0';
  1151  000D7C  0ED0               	movlw	208
  1152  000D7E  6E32               	movwf	??_sprintf& (0+255),c
  1153  000D80  0EFF               	movlw	255
  1154  000D82  6E33               	movwf	(??_sprintf+1)& (0+255),c
  1155  000D84  C02E  FFF6         	movff	sprintf@f,tblptrl
  1156  000D88  C02F  FFF7         	movff	sprintf@f+1,tblptrh
  1157  000D8C                     	if	0	;tblptru may be non-zero
  1158  000D8C                     	endif
  1159  000D8C                     	if	0	;tblptru may be non-zero
  1160  000D8C                     	endif
  1161  000D8C  0008               	tblrd		*
  1162  000D8E  50F5               	movf	tablat,w,c
  1163  000D90  6E34               	movwf	(??_sprintf+2)& (0+255),c
  1164  000D92  6A35               	clrf	(??_sprintf+3)& (0+255),c
  1165  000D94  5032               	movf	??_sprintf,w,c
  1166  000D96  2634               	addwf	??_sprintf+2,f,c
  1167  000D98  5033               	movf	??_sprintf+1,w,c
  1168  000D9A  2235               	addwfc	??_sprintf+3,f,c
  1169  000D9C  5034               	movf	??_sprintf+2,w,c
  1170  000D9E  0100               	movlb	0	; () banked
  1171  000DA0  2766               	addwf	sprintf@width& (0+255),f,b
  1172  000DA2  5035               	movf	??_sprintf+3,w,c
  1173  000DA4  0100               	movlb	0	; () banked
  1174  000DA6  2367               	addwfc	(sprintf@width+1)& (0+255),f,b
  1175                           
  1176                           ; BSR set to: 0
  1177  000DA8  4A2E               	infsnz	sprintf@f,f,c
  1178  000DAA  2A2F               	incf	sprintf@f+1,f,c
  1179                           
  1180                           ; BSR set to: 0
  1181                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1182  000DAC  C02E  FFF6         	movff	sprintf@f,tblptrl
  1183  000DB0  C02F  FFF7         	movff	sprintf@f+1,tblptrh
  1184  000DB4                     	if	0	;tblptru may be non-zero
  1185  000DB4                     	endif
  1186  000DB4                     	if	0	;tblptru may be non-zero
  1187  000DB4                     	endif
  1188  000DB4  0008               	tblrd		*
  1189  000DB6  50F5               	movf	tablat,w,c
  1190  000DB8  ECDD  F00C         	call	_isdigit
  1191  000DBC  A0D8               	btfss	status,0,c
  1192  000DBE  D006               	goto	l4210
  1193  000DC0  D7CF               	goto	l4200
  1194                           
  1195                           ;doprnt.c: 608: }
  1196                           ;doprnt.c: 635: switch(c = *f++) {
  1197  000DC2  D004               	goto	l4210
  1198                           
  1199                           ;doprnt.c: 638: goto alldone;
  1200                           
  1201                           ;doprnt.c: 637: case 0:
  1202  000DC4  D11E               	goto	l4290
  1203                           
  1204                           ;doprnt.c: 698: case 'i':
  1205                           ;doprnt.c: 699: break;
  1206                           
  1207                           ;doprnt.c: 697: case 'd':
  1208  000DC6  D016               	goto	l4212
  1209                           
  1210                           ;doprnt.c: 813: continue;
  1211                           
  1212                           ;doprnt.c: 802: default:
  1213  000DC8  D10D               	goto	l4288
  1214                           
  1215                           ;doprnt.c: 822: }
  1216  000DCA  D014               	goto	l4212
  1217  000DCC                     l4210:
  1218  000DCC  C02E  FFF6         	movff	sprintf@f,tblptrl
  1219  000DD0  C02F  FFF7         	movff	sprintf@f+1,tblptrh
  1220  000DD4  4A2E               	infsnz	sprintf@f,f,c
  1221  000DD6  2A2F               	incf	sprintf@f+1,f,c
  1222  000DD8                     	if	0	;tblptru may be non-zero
  1223  000DD8                     	endif
  1224  000DD8                     	if	0	;tblptru may be non-zero
  1225  000DD8                     	endif
  1226  000DD8  0008               	tblrd		*
  1227  000DDA  CFF5 F068          	movff	tablat,sprintf@c
  1228  000DDE  0100               	movlb	0	; () banked
  1229  000DE0  5168               	movf	sprintf@c& (0+255),w,b
  1230                           
  1231                           ; Switch size 1, requested type "space"
  1232                           ; Number of cases is 3, Range of values is 0 to 105
  1233                           ; switch strategies available:
  1234                           ; Name         Instructions Cycles
  1235                           ; simple_byte           10     6 (average)
  1236                           ;	Chosen strategy is simple_byte
  1237  000DE2  0A00               	xorlw	0	; case 0
  1238  000DE4  B4D8               	btfsc	status,2,c
  1239  000DE6  D10D               	goto	l4290
  1240  000DE8  0A64               	xorlw	100	; case 100
  1241  000DEA  B4D8               	btfsc	status,2,c
  1242  000DEC  D003               	goto	l4212
  1243  000DEE  0A0D               	xorlw	13	; case 105
  1244  000DF0  A4D8               	btfss	status,2,c
  1245  000DF2  D0F8               	goto	l4288
  1246  000DF4                     l4212:
  1247                           
  1248                           ;doprnt.c: 1253: {
  1249                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1250  000DF4  C060  FFD9         	movff	sprintf@ap,fsr2l
  1251  000DF8  C061  FFDA         	movff	sprintf@ap+1,fsr2h
  1252  000DFC  CFDE F063          	movff	postinc2,sprintf@val
  1253  000E00  CFDD F064          	movff	postdec2,sprintf@val+1
  1254  000E04  0E02               	movlw	2
  1255  000E06  0100               	movlb	0	; () banked
  1256  000E08  2760               	addwf	sprintf@ap& (0+255),f,b
  1257  000E0A  0E00               	movlw	0
  1258  000E0C  2361               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1259                           
  1260                           ; BSR set to: 0
  1261                           ;doprnt.c: 1261: if((int)val < 0) {
  1262  000E0E  0100               	movlb	0	; () banked
  1263  000E10  AF64               	btfss	(sprintf@val+1)& (0+255),7,b
  1264  000E12  D009               	goto	l4222
  1265                           
  1266                           ; BSR set to: 0
  1267                           ;doprnt.c: 1262: flag |= 0x03;
  1268  000E14  0E03               	movlw	3
  1269  000E16  0100               	movlb	0	; () banked
  1270  000E18  1365               	iorwf	sprintf@flag& (0+255),f,b
  1271                           
  1272                           ; BSR set to: 0
  1273                           ;doprnt.c: 1263: val = -val;
  1274  000E1A  0100               	movlb	0	; () banked
  1275  000E1C  6D63               	negf	sprintf@val& (0+255),b
  1276  000E1E  1F64               	comf	(sprintf@val+1)& (0+255),f,b
  1277  000E20  B0D8               	btfsc	status,0,c
  1278  000E22  2B64               	incf	(sprintf@val+1)& (0+255),f,b
  1279  000E24  D000               	goto	l4222
  1280  000E26                     l4222:
  1281                           
  1282                           ; BSR set to: 0
  1283                           ;doprnt.c: 1264: }
  1284                           ;doprnt.c: 1266: }
  1285                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1286  000E26  0E01               	movlw	1
  1287  000E28  0100               	movlb	0	; () banked
  1288  000E2A  6F68               	movwf	sprintf@c& (0+255),b
  1289  000E2C                     l4224:
  1290                           
  1291                           ; BSR set to: 0
  1292  000E2C  0E05               	movlw	5
  1293  000E2E  0100               	movlb	0	; () banked
  1294  000E30  1968               	xorwf	sprintf@c& (0+255),w,b
  1295  000E32  B4D8               	btfsc	status,2,c
  1296  000E34  D01A               	goto	l4236
  1297  000E36  D001               	goto	l4228
  1298                           
  1299                           ; BSR set to: 0
  1300  000E38  D018               	goto	l4236
  1301  000E3A                     l4228:
  1302                           
  1303                           ; BSR set to: 0
  1304                           ;doprnt.c: 1306: if(val < dpowers[c])
  1305  000E3A  0100               	movlb	0	; () banked
  1306  000E3C  5168               	movf	sprintf@c& (0+255),w,b
  1307  000E3E  0D02               	mullw	2
  1308  000E40  0E01               	movlw	low _dpowers
  1309  000E42  24F3               	addwf	prodl,w,c
  1310  000E44  6EF6               	movwf	tblptrl,c
  1311  000E46  0E06               	movlw	high _dpowers
  1312  000E48  20F4               	addwfc	prodh,w,c
  1313  000E4A  6EF7               	movwf	tblptrh,c
  1314  000E4C                     	if	0	;There are less than 3 active tblptr bytes
  1315  000E4C                     	endif
  1316  000E4C  0009               	tblrd		*+
  1317  000E4E  50F5               	movf	tablat,w,c
  1318  000E50  0100               	movlb	0	; () banked
  1319  000E52  5D63               	subwf	sprintf@val& (0+255),w,b
  1320  000E54  0009               	tblrd		*+
  1321  000E56  50F5               	movf	tablat,w,c
  1322  000E58  0100               	movlb	0	; () banked
  1323  000E5A  5964               	subwfb	(sprintf@val+1)& (0+255),w,b
  1324  000E5C  A0D8               	btfss	status,0,c
  1325  000E5E  D005               	goto	l4236
  1326  000E60  D001               	goto	l4232
  1327                           
  1328                           ; BSR set to: 0
  1329                           ;doprnt.c: 1307: break;
  1330  000E62  D003               	goto	l4236
  1331  000E64                     l4232:
  1332                           
  1333                           ; BSR set to: 0
  1334  000E64  0100               	movlb	0	; () banked
  1335  000E66  2B68               	incf	sprintf@c& (0+255),f,b
  1336  000E68  D7E1               	goto	l4224
  1337  000E6A                     l4236:
  1338                           
  1339                           ; BSR set to: 0
  1340                           ;doprnt.c: 1345: if(width && flag & 0x03)
  1341  000E6A  0100               	movlb	0	; () banked
  1342  000E6C  5166               	movf	sprintf@width& (0+255),w,b
  1343  000E6E  0100               	movlb	0	; () banked
  1344  000E70  1167               	iorwf	(sprintf@width+1)& (0+255),w,b
  1345  000E72  B4D8               	btfsc	status,2,c
  1346  000E74  D00B               	goto	l4242
  1347                           
  1348                           ; BSR set to: 0
  1349  000E76  C065  F032         	movff	sprintf@flag,??_sprintf
  1350  000E7A  0E03               	movlw	3
  1351  000E7C  1632               	andwf	??_sprintf,f,c
  1352  000E7E  B4D8               	btfsc	status,2,c
  1353  000E80  D005               	goto	l4242
  1354                           
  1355                           ; BSR set to: 0
  1356                           ;doprnt.c: 1346: width--;
  1357  000E82  0100               	movlb	0	; () banked
  1358  000E84  0766               	decf	sprintf@width& (0+255),f,b
  1359  000E86  A0D8               	btfss	status,0,c
  1360  000E88  0767               	decf	(sprintf@width+1)& (0+255),f,b
  1361  000E8A  D000               	goto	l4242
  1362  000E8C                     l4242:
  1363                           
  1364                           ; BSR set to: 0
  1365                           ;doprnt.c: 1381: if(width > c)
  1366  000E8C  0E80               	movlw	128
  1367  000E8E  0100               	movlb	0	; () banked
  1368  000E90  BF68               	btfsc	sprintf@c& (0+255),7,b
  1369  000E92  0E7F               	movlw	127
  1370  000E94  6E32               	movwf	??_sprintf& (0+255),c
  1371  000E96  0100               	movlb	0	; () banked
  1372  000E98  5166               	movf	sprintf@width& (0+255),w,b
  1373  000E9A  0100               	movlb	0	; () banked
  1374  000E9C  5D68               	subwf	sprintf@c& (0+255),w,b
  1375  000E9E  0100               	movlb	0	; () banked
  1376  000EA0  5167               	movf	(sprintf@width+1)& (0+255),w,b
  1377  000EA2  0A80               	xorlw	128
  1378  000EA4  5832               	subwfb	??_sprintf& (0+255),w,c
  1379  000EA6  B0D8               	btfsc	status,0,c
  1380  000EA8  D00B               	goto	l4246
  1381                           
  1382                           ; BSR set to: 0
  1383                           ;doprnt.c: 1382: width -= c;
  1384  000EAA  0100               	movlb	0	; () banked
  1385  000EAC  5168               	movf	sprintf@c& (0+255),w,b
  1386  000EAE  0100               	movlb	0	; () banked
  1387  000EB0  5F66               	subwf	sprintf@width& (0+255),f,b
  1388  000EB2  0E00               	movlw	0
  1389  000EB4  0100               	movlb	0	; () banked
  1390  000EB6  BF68               	btfsc	sprintf@c& (0+255),7,b
  1391  000EB8  0EFF               	movlw	255
  1392  000EBA  0100               	movlb	0	; () banked
  1393  000EBC  5B67               	subwfb	(sprintf@width+1)& (0+255),f,b
  1394  000EBE  D006               	goto	l4248
  1395  000EC0                     l4246:
  1396                           
  1397                           ; BSR set to: 0
  1398                           ;doprnt.c: 1383: else
  1399                           ;doprnt.c: 1384: width = 0;
  1400  000EC0  0E00               	movlw	0
  1401  000EC2  0100               	movlb	0	; () banked
  1402  000EC4  6F67               	movwf	(sprintf@width+1)& (0+255),b
  1403  000EC6  0E00               	movlw	0
  1404  000EC8  6F66               	movwf	sprintf@width& (0+255),b
  1405  000ECA  D000               	goto	l4248
  1406  000ECC                     l4248:
  1407                           
  1408                           ; BSR set to: 0
  1409                           ;doprnt.c: 1387: if(flag & 0x04) {
  1410  000ECC  0100               	movlb	0	; () banked
  1411  000ECE  A565               	btfss	sprintf@flag& (0+255),2,b
  1412  000ED0  D029               	goto	l4264
  1413                           
  1414                           ; BSR set to: 0
  1415                           ;doprnt.c: 1392: if(flag & 0x03)
  1416  000ED2  C065  F032         	movff	sprintf@flag,??_sprintf
  1417  000ED6  0E03               	movlw	3
  1418  000ED8  1632               	andwf	??_sprintf,f,c
  1419  000EDA  B4D8               	btfsc	status,2,c
  1420  000EDC  D009               	goto	l4256
  1421                           
  1422                           ; BSR set to: 0
  1423                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  1424  000EDE  C02C  FFD9         	movff	sprintf@sp,fsr2l
  1425  000EE2  C02D  FFDA         	movff	sprintf@sp+1,fsr2h
  1426  000EE6  0E2D               	movlw	45
  1427  000EE8  6EDF               	movwf	indf2,c
  1428                           
  1429                           ; BSR set to: 0
  1430  000EEA  4A2C               	infsnz	sprintf@sp,f,c
  1431  000EEC  2A2D               	incf	sprintf@sp+1,f,c
  1432  000EEE  D000               	goto	l4256
  1433  000EF0                     l4256:
  1434                           
  1435                           ; BSR set to: 0
  1436                           ;doprnt.c: 1415: if(width)
  1437  000EF0  0100               	movlb	0	; () banked
  1438  000EF2  5166               	movf	sprintf@width& (0+255),w,b
  1439  000EF4  0100               	movlb	0	; () banked
  1440  000EF6  1167               	iorwf	(sprintf@width+1)& (0+255),w,b
  1441  000EF8  B4D8               	btfsc	status,2,c
  1442  000EFA  D03D               	goto	l4278
  1443  000EFC                     l4258:
  1444                           
  1445                           ; BSR set to: 0
  1446                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  1447  000EFC  C02C  FFD9         	movff	sprintf@sp,fsr2l
  1448  000F00  C02D  FFDA         	movff	sprintf@sp+1,fsr2h
  1449  000F04  0E30               	movlw	48
  1450  000F06  6EDF               	movwf	indf2,c
  1451                           
  1452                           ; BSR set to: 0
  1453  000F08  4A2C               	infsnz	sprintf@sp,f,c
  1454  000F0A  2A2D               	incf	sprintf@sp+1,f,c
  1455                           
  1456                           ; BSR set to: 0
  1457                           ;doprnt.c: 1418: while(--width);
  1458  000F0C  0100               	movlb	0	; () banked
  1459  000F0E  0766               	decf	sprintf@width& (0+255),f,b
  1460  000F10  A0D8               	btfss	status,0,c
  1461  000F12  0767               	decf	(sprintf@width+1)& (0+255),f,b
  1462  000F14  0100               	movlb	0	; () banked
  1463  000F16  5166               	movf	sprintf@width& (0+255),w,b
  1464  000F18  0100               	movlb	0	; () banked
  1465  000F1A  1167               	iorwf	(sprintf@width+1)& (0+255),w,b
  1466  000F1C  B4D8               	btfsc	status,2,c
  1467  000F1E  D02B               	goto	l4278
  1468  000F20  D7ED               	goto	l4258
  1469                           
  1470                           ; BSR set to: 0
  1471                           ;doprnt.c: 1420: } else
  1472                           
  1473                           ; BSR set to: 0
  1474  000F22  D029               	goto	l4278
  1475  000F24                     l4264:
  1476                           
  1477                           ; BSR set to: 0
  1478                           ;doprnt.c: 1422: {
  1479                           ;doprnt.c: 1424: if(width
  1480                           ;doprnt.c: 1428: )
  1481  000F24  0100               	movlb	0	; () banked
  1482  000F26  5166               	movf	sprintf@width& (0+255),w,b
  1483  000F28  0100               	movlb	0	; () banked
  1484  000F2A  1167               	iorwf	(sprintf@width+1)& (0+255),w,b
  1485  000F2C  B4D8               	btfsc	status,2,c
  1486  000F2E  D014               	goto	l4272
  1487  000F30                     l4266:
  1488                           
  1489                           ; BSR set to: 0
  1490                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  1491  000F30  C02C  FFD9         	movff	sprintf@sp,fsr2l
  1492  000F34  C02D  FFDA         	movff	sprintf@sp+1,fsr2h
  1493  000F38  0E20               	movlw	32
  1494  000F3A  6EDF               	movwf	indf2,c
  1495                           
  1496                           ; BSR set to: 0
  1497  000F3C  4A2C               	infsnz	sprintf@sp,f,c
  1498  000F3E  2A2D               	incf	sprintf@sp+1,f,c
  1499                           
  1500                           ; BSR set to: 0
  1501                           ;doprnt.c: 1431: while(--width);
  1502  000F40  0100               	movlb	0	; () banked
  1503  000F42  0766               	decf	sprintf@width& (0+255),f,b
  1504  000F44  A0D8               	btfss	status,0,c
  1505  000F46  0767               	decf	(sprintf@width+1)& (0+255),f,b
  1506  000F48  0100               	movlb	0	; () banked
  1507  000F4A  5166               	movf	sprintf@width& (0+255),w,b
  1508  000F4C  0100               	movlb	0	; () banked
  1509  000F4E  1167               	iorwf	(sprintf@width+1)& (0+255),w,b
  1510  000F50  B4D8               	btfsc	status,2,c
  1511  000F52  D002               	goto	l4272
  1512  000F54  D7ED               	goto	l4266
  1513                           
  1514                           ; BSR set to: 0
  1515  000F56  D000               	goto	l4272
  1516  000F58                     l4272:
  1517                           
  1518                           ; BSR set to: 0
  1519                           ;doprnt.c: 1438: if(flag & 0x03)
  1520  000F58  C065  F032         	movff	sprintf@flag,??_sprintf
  1521  000F5C  0E03               	movlw	3
  1522  000F5E  1632               	andwf	??_sprintf,f,c
  1523  000F60  B4D8               	btfsc	status,2,c
  1524  000F62  D009               	goto	l4278
  1525                           
  1526                           ; BSR set to: 0
  1527                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  1528  000F64  C02C  FFD9         	movff	sprintf@sp,fsr2l
  1529  000F68  C02D  FFDA         	movff	sprintf@sp+1,fsr2h
  1530  000F6C  0E2D               	movlw	45
  1531  000F6E  6EDF               	movwf	indf2,c
  1532                           
  1533                           ; BSR set to: 0
  1534  000F70  4A2C               	infsnz	sprintf@sp,f,c
  1535  000F72  2A2D               	incf	sprintf@sp+1,f,c
  1536                           
  1537                           ; BSR set to: 0
  1538  000F74  D000               	goto	l4278
  1539  000F76                     l4278:
  1540                           
  1541                           ; BSR set to: 0
  1542                           ;doprnt.c: 1469: }
  1543                           ;doprnt.c: 1472: prec = c;
  1544  000F76  C068  F062         	movff	sprintf@c,sprintf@prec
  1545                           
  1546                           ;doprnt.c: 1474: while(prec--) {
  1547  000F7A  D02C               	goto	l4286
  1548  000F7C                     l4280:
  1549                           
  1550                           ; BSR set to: 0
  1551                           ;doprnt.c: 1478: {
  1552                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1553  000F7C  0100               	movlb	0	; () banked
  1554  000F7E  5162               	movf	sprintf@prec& (0+255),w,b
  1555  000F80  0D02               	mullw	2
  1556  000F82  0E01               	movlw	low _dpowers
  1557  000F84  24F3               	addwf	prodl,w,c
  1558  000F86  6EF6               	movwf	tblptrl,c
  1559  000F88  0E06               	movlw	high _dpowers
  1560  000F8A  20F4               	addwfc	prodh,w,c
  1561  000F8C  6EF7               	movwf	tblptrh,c
  1562  000F8E                     	if	0	;There are less than 3 active tblptr bytes
  1563  000F8E                     	endif
  1564  000F8E  0009               	tblrd		*+
  1565  000F90  CFF5 F022          	movff	tablat,___lwdiv@divisor
  1566  000F94  000A               	tblrd		*-
  1567  000F96  CFF5 F023          	movff	tablat,___lwdiv@divisor+1
  1568  000F9A  C063  F020         	movff	sprintf@val,___lwdiv@dividend
  1569  000F9E  C064  F021         	movff	sprintf@val+1,___lwdiv@dividend+1
  1570  000FA2  EC69  F00B         	call	___lwdiv	;wreg free
  1571  000FA6  C020  F027         	movff	?___lwdiv,___lwmod@dividend
  1572  000FAA  C021  F028         	movff	?___lwdiv+1,___lwmod@dividend+1
  1573  000FAE  0E00               	movlw	0
  1574  000FB0  6E2A               	movwf	___lwmod@divisor+1,c
  1575  000FB2  0E0A               	movlw	10
  1576  000FB4  6E29               	movwf	___lwmod@divisor,c
  1577  000FB6  EC16  F00C         	call	___lwmod	;wreg free
  1578  000FBA  5027               	movf	?___lwmod,w,c
  1579  000FBC  0F30               	addlw	48
  1580  000FBE  0100               	movlb	0	; () banked
  1581  000FC0  6F68               	movwf	sprintf@c& (0+255),b
  1582                           
  1583                           ; BSR set to: 0
  1584                           ;doprnt.c: 1523: }
  1585                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1586  000FC2  C02C  FFD9         	movff	sprintf@sp,fsr2l
  1587  000FC6  C02D  FFDA         	movff	sprintf@sp+1,fsr2h
  1588  000FCA  C068  FFDF         	movff	sprintf@c,indf2
  1589                           
  1590                           ; BSR set to: 0
  1591  000FCE  4A2C               	infsnz	sprintf@sp,f,c
  1592  000FD0  2A2D               	incf	sprintf@sp+1,f,c
  1593  000FD2  D000               	goto	l4286
  1594  000FD4                     l4286:
  1595                           
  1596                           ; BSR set to: 0
  1597  000FD4  0100               	movlb	0	; () banked
  1598  000FD6  0762               	decf	sprintf@prec& (0+255),f,b
  1599  000FD8  0100               	movlb	0	; () banked
  1600  000FDA  2962               	incf	sprintf@prec& (0+255),w,b
  1601  000FDC  B4D8               	btfsc	status,2,c
  1602  000FDE  D002               	goto	l4288
  1603  000FE0  D7CD               	goto	l4280
  1604                           
  1605                           ; BSR set to: 0
  1606  000FE2  D000               	goto	l4288
  1607  000FE4                     l4288:
  1608  000FE4  C02E  FFF6         	movff	sprintf@f,tblptrl
  1609  000FE8  C02F  FFF7         	movff	sprintf@f+1,tblptrh
  1610  000FEC  4A2E               	infsnz	sprintf@f,f,c
  1611  000FEE  2A2F               	incf	sprintf@f+1,f,c
  1612  000FF0                     	if	0	;tblptru may be non-zero
  1613  000FF0                     	endif
  1614  000FF0                     	if	0	;tblptru may be non-zero
  1615  000FF0                     	endif
  1616  000FF0  0008               	tblrd		*
  1617  000FF2  CFF5 F068          	movff	tablat,sprintf@c
  1618  000FF6  0100               	movlb	0	; () banked
  1619  000FF8  5168               	movf	sprintf@c& (0+255),w,b
  1620  000FFA  B4D8               	btfsc	status,2,c
  1621  000FFC  D002               	goto	l4290
  1622  000FFE  D678               	goto	l4182
  1623                           
  1624                           ; BSR set to: 0
  1625  001000  D000               	goto	l4290
  1626  001002                     l4290:
  1627                           
  1628                           ;doprnt.c: 1538: *sp = 0;
  1629  001002  C02C  FFD9         	movff	sprintf@sp,fsr2l
  1630  001006  C02D  FFDA         	movff	sprintf@sp+1,fsr2h
  1631  00100A  0E00               	movlw	0
  1632  00100C  6EDF               	movwf	indf2,c
  1633  00100E  0012               	return	
  1634                           
  1635                           ;doprnt.c: 1540: return 0;
  1636                           ;	Return value of _sprintf is never used
  1637  001010  0012               	return		;funcret
  1638  001012                     __end_of_sprintf:
  1639                           	opt stack 0
  1640                           tblptru	equ	0xFF8
  1641                           tblptrh	equ	0xFF7
  1642                           tblptrl	equ	0xFF6
  1643                           tablat	equ	0xFF5
  1644                           prodh	equ	0xFF4
  1645                           prodl	equ	0xFF3
  1646                           indf2	equ	0xFDF
  1647                           postinc2	equ	0xFDE
  1648                           postdec2	equ	0xFDD
  1649                           fsr2h	equ	0xFDA
  1650                           fsr2l	equ	0xFD9
  1651                           status	equ	0xFD8
  1652                           
  1653 ;; *************** function _isdigit *****************
  1654 ;; Defined at:
  1655 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  1656 ;; Parameters:    Size  Location     Type
  1657 ;;  c               1    wreg     unsigned char 
  1658 ;; Auto vars:     Size  Location     Type
  1659 ;;  c               1   33[COMRAM] unsigned char 
  1660 ;; Return value:  Size  Location     Type
  1661 ;;		None               void
  1662 ;; Registers used:
  1663 ;;		wreg, status,2, status,0
  1664 ;; Tracked objects:
  1665 ;;		On entry : 0/0
  1666 ;;		On exit  : 0/0
  1667 ;;		Unchanged: 0/0
  1668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1669 ;;      Params:         0       0       0       0       0       0       0
  1670 ;;      Locals:         2       0       0       0       0       0       0
  1671 ;;      Temps:          1       0       0       0       0       0       0
  1672 ;;      Totals:         3       0       0       0       0       0       0
  1673 ;;Total ram usage:        3 bytes
  1674 ;; Hardware stack levels used:    1
  1675 ;; Hardware stack levels required when called:    2
  1676 ;; This function calls:
  1677 ;;		Nothing
  1678 ;; This function is called by:
  1679 ;;		_sprintf
  1680 ;; This function uses a non-reentrant model
  1681 ;;
  1682                           
  1683                           	psect	text4
  1684  0019BA                     __ptext4:
  1685                           	opt stack 0
  1686  0019BA                     _isdigit:
  1687                           	opt stack 25
  1688                           
  1689                           ;incstack = 0
  1690                           ;isdigit@c stored from wreg
  1691  0019BA  6E22               	movwf	isdigit@c,c
  1692  0019BC  0E00               	movlw	0
  1693  0019BE  6E21               	movwf	_isdigit$1370,c
  1694  0019C0  0E3A               	movlw	58
  1695  0019C2  6022               	cpfslt	isdigit@c,c
  1696  0019C4  D006               	goto	l4132
  1697  0019C6  0E2F               	movlw	47
  1698  0019C8  6422               	cpfsgt	isdigit@c,c
  1699  0019CA  D003               	goto	l4132
  1700  0019CC  0E01               	movlw	1
  1701  0019CE  6E21               	movwf	_isdigit$1370,c
  1702  0019D0  D000               	goto	l4132
  1703  0019D2                     l4132:
  1704  0019D2  C021  F020         	movff	_isdigit$1370,??_isdigit
  1705  0019D6  3020               	rrcf	??_isdigit,w,c
  1706  0019D8  0012               	return	
  1707  0019DA  0012               	return		;funcret
  1708  0019DC                     __end_of_isdigit:
  1709                           	opt stack 0
  1710                           tblptru	equ	0xFF8
  1711                           tblptrh	equ	0xFF7
  1712                           tblptrl	equ	0xFF6
  1713                           tablat	equ	0xFF5
  1714                           prodh	equ	0xFF4
  1715                           prodl	equ	0xFF3
  1716                           indf2	equ	0xFDF
  1717                           postinc2	equ	0xFDE
  1718                           postdec2	equ	0xFDD
  1719                           fsr2h	equ	0xFDA
  1720                           fsr2l	equ	0xFD9
  1721                           status	equ	0xFD8
  1722                           
  1723 ;; *************** function ___wmul *****************
  1724 ;; Defined at:
  1725 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  1726 ;; Parameters:    Size  Location     Type
  1727 ;;  multiplier      2   31[COMRAM] unsigned int 
  1728 ;;  multiplicand    2   33[COMRAM] unsigned int 
  1729 ;; Auto vars:     Size  Location     Type
  1730 ;;  product         2   35[COMRAM] unsigned int 
  1731 ;; Return value:  Size  Location     Type
  1732 ;;                  2   31[COMRAM] unsigned int 
  1733 ;; Registers used:
  1734 ;;		wreg, status,2, status,0, prodl, prodh
  1735 ;; Tracked objects:
  1736 ;;		On entry : 0/0
  1737 ;;		On exit  : 0/0
  1738 ;;		Unchanged: 0/0
  1739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1740 ;;      Params:         4       0       0       0       0       0       0
  1741 ;;      Locals:         2       0       0       0       0       0       0
  1742 ;;      Temps:          0       0       0       0       0       0       0
  1743 ;;      Totals:         6       0       0       0       0       0       0
  1744 ;;Total ram usage:        6 bytes
  1745 ;; Hardware stack levels used:    1
  1746 ;; Hardware stack levels required when called:    2
  1747 ;; This function calls:
  1748 ;;		Nothing
  1749 ;; This function is called by:
  1750 ;;		_sprintf
  1751 ;; This function uses a non-reentrant model
  1752 ;;
  1753                           
  1754                           	psect	text5
  1755  001970                     __ptext5:
  1756                           	opt stack 0
  1757  001970                     ___wmul:
  1758                           	opt stack 25
  1759                           
  1760                           ;incstack = 0
  1761  001970  5020               	movf	___wmul@multiplier,w,c
  1762  001972  0222               	mulwf	___wmul@multiplicand,c
  1763  001974  CFF3 F024          	movff	prodl,___wmul@product
  1764  001978  CFF4 F025          	movff	prodh,___wmul@product+1
  1765  00197C  5020               	movf	___wmul@multiplier,w,c
  1766  00197E  0223               	mulwf	___wmul@multiplicand+1,c
  1767  001980  50F3               	movf	prodl,w,c
  1768  001982  2625               	addwf	___wmul@product+1,f,c
  1769  001984  5021               	movf	___wmul@multiplier+1,w,c
  1770  001986  0222               	mulwf	___wmul@multiplicand,c
  1771  001988  50F3               	movf	prodl,w,c
  1772  00198A  2625               	addwf	___wmul@product+1,f,c
  1773  00198C  C024  F020         	movff	___wmul@product,?___wmul
  1774  001990  C025  F021         	movff	___wmul@product+1,?___wmul+1
  1775  001994  0012               	return	
  1776  001996  0012               	return		;funcret
  1777  001998                     __end_of___wmul:
  1778                           	opt stack 0
  1779                           tblptru	equ	0xFF8
  1780                           tblptrh	equ	0xFF7
  1781                           tblptrl	equ	0xFF6
  1782                           tablat	equ	0xFF5
  1783                           prodh	equ	0xFF4
  1784                           prodl	equ	0xFF3
  1785                           indf2	equ	0xFDF
  1786                           postinc2	equ	0xFDE
  1787                           postdec2	equ	0xFDD
  1788                           fsr2h	equ	0xFDA
  1789                           fsr2l	equ	0xFD9
  1790                           status	equ	0xFD8
  1791                           
  1792 ;; *************** function ___lwmod *****************
  1793 ;; Defined at:
  1794 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  1795 ;; Parameters:    Size  Location     Type
  1796 ;;  dividend        2   38[COMRAM] unsigned int 
  1797 ;;  divisor         2   40[COMRAM] unsigned int 
  1798 ;; Auto vars:     Size  Location     Type
  1799 ;;  counter         1   42[COMRAM] unsigned char 
  1800 ;; Return value:  Size  Location     Type
  1801 ;;                  2   38[COMRAM] unsigned int 
  1802 ;; Registers used:
  1803 ;;		wreg, status,2, status,0
  1804 ;; Tracked objects:
  1805 ;;		On entry : 0/0
  1806 ;;		On exit  : 0/0
  1807 ;;		Unchanged: 0/0
  1808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1809 ;;      Params:         4       0       0       0       0       0       0
  1810 ;;      Locals:         1       0       0       0       0       0       0
  1811 ;;      Temps:          0       0       0       0       0       0       0
  1812 ;;      Totals:         5       0       0       0       0       0       0
  1813 ;;Total ram usage:        5 bytes
  1814 ;; Hardware stack levels used:    1
  1815 ;; Hardware stack levels required when called:    2
  1816 ;; This function calls:
  1817 ;;		Nothing
  1818 ;; This function is called by:
  1819 ;;		_sprintf
  1820 ;; This function uses a non-reentrant model
  1821 ;;
  1822                           
  1823                           	psect	text6
  1824  00182C                     __ptext6:
  1825                           	opt stack 0
  1826  00182C                     ___lwmod:
  1827                           	opt stack 25
  1828                           
  1829                           ;incstack = 0
  1830  00182C  5029               	movf	___lwmod@divisor,w,c
  1831  00182E  102A               	iorwf	___lwmod@divisor+1,w,c
  1832  001830  B4D8               	btfsc	status,2,c
  1833  001832  D01D               	goto	l1127
  1834  001834  0E01               	movlw	1
  1835  001836  6E2B               	movwf	___lwmod@counter,c
  1836  001838  D005               	goto	l4170
  1837  00183A                     l4168:
  1838  00183A  90D8               	bcf	status,0,c
  1839  00183C  3629               	rlcf	___lwmod@divisor,f,c
  1840  00183E  362A               	rlcf	___lwmod@divisor+1,f,c
  1841  001840  2A2B               	incf	___lwmod@counter,f,c
  1842  001842  D000               	goto	l4170
  1843  001844                     l4170:
  1844  001844  BE2A               	btfsc	___lwmod@divisor+1,7,c
  1845  001846  D002               	goto	l4172
  1846  001848  D7F8               	goto	l4168
  1847  00184A  D000               	goto	l4172
  1848  00184C                     l4172:
  1849  00184C  5029               	movf	___lwmod@divisor,w,c
  1850  00184E  5C27               	subwf	___lwmod@dividend,w,c
  1851  001850  502A               	movf	___lwmod@divisor+1,w,c
  1852  001852  5828               	subwfb	___lwmod@dividend+1,w,c
  1853  001854  A0D8               	btfss	status,0,c
  1854  001856  D005               	goto	l4176
  1855  001858  5029               	movf	___lwmod@divisor,w,c
  1856  00185A  5E27               	subwf	___lwmod@dividend,f,c
  1857  00185C  502A               	movf	___lwmod@divisor+1,w,c
  1858  00185E  5A28               	subwfb	___lwmod@dividend+1,f,c
  1859  001860  D000               	goto	l4176
  1860  001862                     l4176:
  1861  001862  90D8               	bcf	status,0,c
  1862  001864  322A               	rrcf	___lwmod@divisor+1,f,c
  1863  001866  3229               	rrcf	___lwmod@divisor,f,c
  1864  001868  2E2B               	decfsz	___lwmod@counter,f,c
  1865  00186A  D7F0               	goto	l4172
  1866  00186C  D000               	goto	l1127
  1867  00186E                     l1127:
  1868  00186E  C027  F027         	movff	___lwmod@dividend,?___lwmod
  1869  001872  C028  F028         	movff	___lwmod@dividend+1,?___lwmod+1
  1870  001876  0012               	return		;funcret
  1871  001878                     __end_of___lwmod:
  1872                           	opt stack 0
  1873                           tblptru	equ	0xFF8
  1874                           tblptrh	equ	0xFF7
  1875                           tblptrl	equ	0xFF6
  1876                           tablat	equ	0xFF5
  1877                           prodh	equ	0xFF4
  1878                           prodl	equ	0xFF3
  1879                           indf2	equ	0xFDF
  1880                           postinc2	equ	0xFDE
  1881                           postdec2	equ	0xFDD
  1882                           fsr2h	equ	0xFDA
  1883                           fsr2l	equ	0xFD9
  1884                           status	equ	0xFD8
  1885                           
  1886 ;; *************** function ___lwdiv *****************
  1887 ;; Defined at:
  1888 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  1889 ;; Parameters:    Size  Location     Type
  1890 ;;  dividend        2   31[COMRAM] unsigned int 
  1891 ;;  divisor         2   33[COMRAM] unsigned int 
  1892 ;; Auto vars:     Size  Location     Type
  1893 ;;  quotient        2   36[COMRAM] unsigned int 
  1894 ;;  counter         1   35[COMRAM] unsigned char 
  1895 ;; Return value:  Size  Location     Type
  1896 ;;                  2   31[COMRAM] unsigned int 
  1897 ;; Registers used:
  1898 ;;		wreg, status,2, status,0
  1899 ;; Tracked objects:
  1900 ;;		On entry : 0/0
  1901 ;;		On exit  : 0/0
  1902 ;;		Unchanged: 0/0
  1903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1904 ;;      Params:         4       0       0       0       0       0       0
  1905 ;;      Locals:         3       0       0       0       0       0       0
  1906 ;;      Temps:          0       0       0       0       0       0       0
  1907 ;;      Totals:         7       0       0       0       0       0       0
  1908 ;;Total ram usage:        7 bytes
  1909 ;; Hardware stack levels used:    1
  1910 ;; Hardware stack levels required when called:    2
  1911 ;; This function calls:
  1912 ;;		Nothing
  1913 ;; This function is called by:
  1914 ;;		_sprintf
  1915 ;; This function uses a non-reentrant model
  1916 ;;
  1917                           
  1918                           	psect	text7
  1919  0016D2                     __ptext7:
  1920                           	opt stack 0
  1921  0016D2                     ___lwdiv:
  1922                           	opt stack 25
  1923                           
  1924                           ;incstack = 0
  1925  0016D2  0E00               	movlw	0
  1926  0016D4  6E26               	movwf	___lwdiv@quotient+1,c
  1927  0016D6  0E00               	movlw	0
  1928  0016D8  6E25               	movwf	___lwdiv@quotient,c
  1929  0016DA  5022               	movf	___lwdiv@divisor,w,c
  1930  0016DC  1023               	iorwf	___lwdiv@divisor+1,w,c
  1931  0016DE  B4D8               	btfsc	status,2,c
  1932  0016E0  D021               	goto	l1117
  1933  0016E2  0E01               	movlw	1
  1934  0016E4  6E24               	movwf	___lwdiv@counter,c
  1935  0016E6  D005               	goto	l4150
  1936  0016E8                     l4148:
  1937  0016E8  90D8               	bcf	status,0,c
  1938  0016EA  3622               	rlcf	___lwdiv@divisor,f,c
  1939  0016EC  3623               	rlcf	___lwdiv@divisor+1,f,c
  1940  0016EE  2A24               	incf	___lwdiv@counter,f,c
  1941  0016F0  D000               	goto	l4150
  1942  0016F2                     l4150:
  1943  0016F2  BE23               	btfsc	___lwdiv@divisor+1,7,c
  1944  0016F4  D002               	goto	l4152
  1945  0016F6  D7F8               	goto	l4148
  1946  0016F8  D000               	goto	l4152
  1947  0016FA                     l4152:
  1948  0016FA  90D8               	bcf	status,0,c
  1949  0016FC  3625               	rlcf	___lwdiv@quotient,f,c
  1950  0016FE  3626               	rlcf	___lwdiv@quotient+1,f,c
  1951  001700  5022               	movf	___lwdiv@divisor,w,c
  1952  001702  5C20               	subwf	___lwdiv@dividend,w,c
  1953  001704  5023               	movf	___lwdiv@divisor+1,w,c
  1954  001706  5821               	subwfb	___lwdiv@dividend+1,w,c
  1955  001708  A0D8               	btfss	status,0,c
  1956  00170A  D006               	goto	l4160
  1957  00170C  5022               	movf	___lwdiv@divisor,w,c
  1958  00170E  5E20               	subwf	___lwdiv@dividend,f,c
  1959  001710  5023               	movf	___lwdiv@divisor+1,w,c
  1960  001712  5A21               	subwfb	___lwdiv@dividend+1,f,c
  1961  001714  8025               	bsf	___lwdiv@quotient,0,c
  1962  001716  D000               	goto	l4160
  1963  001718                     l4160:
  1964  001718  90D8               	bcf	status,0,c
  1965  00171A  3223               	rrcf	___lwdiv@divisor+1,f,c
  1966  00171C  3222               	rrcf	___lwdiv@divisor,f,c
  1967  00171E  2E24               	decfsz	___lwdiv@counter,f,c
  1968  001720  D7EC               	goto	l4152
  1969  001722  D000               	goto	l1117
  1970  001724                     l1117:
  1971  001724  C025  F020         	movff	___lwdiv@quotient,?___lwdiv
  1972  001728  C026  F021         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1973  00172C  0012               	return		;funcret
  1974  00172E                     __end_of___lwdiv:
  1975                           	opt stack 0
  1976                           tblptru	equ	0xFF8
  1977                           tblptrh	equ	0xFF7
  1978                           tblptrl	equ	0xFF6
  1979                           tablat	equ	0xFF5
  1980                           prodh	equ	0xFF4
  1981                           prodl	equ	0xFF3
  1982                           indf2	equ	0xFDF
  1983                           postinc2	equ	0xFDE
  1984                           postdec2	equ	0xFDD
  1985                           fsr2h	equ	0xFDA
  1986                           fsr2l	equ	0xFD9
  1987                           status	equ	0xFD8
  1988                           
  1989 ;; *************** function _LCDInitialDisplay *****************
  1990 ;; Defined at:
  1991 ;;		line 10 in file "lcddisplay.c"
  1992 ;; Parameters:    Size  Location     Type
  1993 ;;		None
  1994 ;; Auto vars:     Size  Location     Type
  1995 ;;		None
  1996 ;; Return value:  Size  Location     Type
  1997 ;;		None               void
  1998 ;; Registers used:
  1999 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2000 ;; Tracked objects:
  2001 ;;		On entry : 0/0
  2002 ;;		On exit  : 0/0
  2003 ;;		Unchanged: 0/0
  2004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2005 ;;      Params:         0       0       0       0       0       0       0
  2006 ;;      Locals:         0       0       0       0       0       0       0
  2007 ;;      Temps:          0       0       0       0       0       0       0
  2008 ;;      Totals:         0       0       0       0       0       0       0
  2009 ;;Total ram usage:        0 bytes
  2010 ;; Hardware stack levels used:    1
  2011 ;; Hardware stack levels required when called:    6
  2012 ;; This function calls:
  2013 ;;		_BusyLCD
  2014 ;;		_SetLCDCGRamAddr
  2015 ;;		_SetLCDDDRamAddr
  2016 ;;		_WriteCmdLCD
  2017 ;;		_WriteDataLCD
  2018 ;;		_putLCD
  2019 ;; This function is called by:
  2020 ;;		_main
  2021 ;; This function uses a non-reentrant model
  2022 ;;
  2023                           
  2024                           	psect	text8
  2025  001542                     __ptext8:
  2026                           	opt stack 0
  2027  001542                     _LCDInitialDisplay:
  2028                           	opt stack 24
  2029                           
  2030                           ;lcddisplay.c: 13: SetLCDCGRamAddr(0x00);
  2031                           
  2032                           ;incstack = 0
  2033  001542  0E00               	movlw	0
  2034  001544  EC97  F00B         	call	_SetLCDCGRamAddr
  2035                           
  2036                           ;lcddisplay.c: 14: WriteDataLCD(0b00000);
  2037  001548  0E00               	movlw	0
  2038  00154A  EC3C  F00C         	call	_WriteDataLCD
  2039                           
  2040                           ;lcddisplay.c: 15: WriteDataLCD(0b01111);
  2041  00154E  0E0F               	movlw	15
  2042  001550  EC3C  F00C         	call	_WriteDataLCD
  2043                           
  2044                           ;lcddisplay.c: 16: WriteDataLCD(0b10001);
  2045  001554  0E11               	movlw	17
  2046  001556  EC3C  F00C         	call	_WriteDataLCD
  2047                           
  2048                           ;lcddisplay.c: 17: WriteDataLCD(0b10001);
  2049  00155A  0E11               	movlw	17
  2050  00155C  EC3C  F00C         	call	_WriteDataLCD
  2051                           
  2052                           ;lcddisplay.c: 18: WriteDataLCD(0b10001);
  2053  001560  0E11               	movlw	17
  2054  001562  EC3C  F00C         	call	_WriteDataLCD
  2055                           
  2056                           ;lcddisplay.c: 19: WriteDataLCD(0b01111);
  2057  001566  0E0F               	movlw	15
  2058  001568  EC3C  F00C         	call	_WriteDataLCD
  2059                           
  2060                           ;lcddisplay.c: 20: WriteDataLCD(0b00111);
  2061  00156C  0E07               	movlw	7
  2062  00156E  EC3C  F00C         	call	_WriteDataLCD
  2063                           
  2064                           ;lcddisplay.c: 21: WriteDataLCD(0b00111);
  2065  001572  0E07               	movlw	7
  2066  001574  EC3C  F00C         	call	_WriteDataLCD
  2067                           
  2068                           ;lcddisplay.c: 24: SetLCDCGRamAddr(0x08);
  2069  001578  0E08               	movlw	8
  2070  00157A  EC97  F00B         	call	_SetLCDCGRamAddr
  2071                           
  2072                           ;lcddisplay.c: 25: WriteDataLCD(0b11111);
  2073  00157E  0E1F               	movlw	31
  2074  001580  EC3C  F00C         	call	_WriteDataLCD
  2075                           
  2076                           ;lcddisplay.c: 26: WriteDataLCD(0b10001);
  2077  001584  0E11               	movlw	17
  2078  001586  EC3C  F00C         	call	_WriteDataLCD
  2079                           
  2080                           ;lcddisplay.c: 27: WriteDataLCD(0b10001);
  2081  00158A  0E11               	movlw	17
  2082  00158C  EC3C  F00C         	call	_WriteDataLCD
  2083                           
  2084                           ;lcddisplay.c: 28: WriteDataLCD(0b10101);
  2085  001590  0E15               	movlw	21
  2086  001592  EC3C  F00C         	call	_WriteDataLCD
  2087                           
  2088                           ;lcddisplay.c: 29: WriteDataLCD(0b10001);
  2089  001596  0E11               	movlw	17
  2090  001598  EC3C  F00C         	call	_WriteDataLCD
  2091                           
  2092                           ;lcddisplay.c: 30: WriteDataLCD(0b10001);
  2093  00159C  0E11               	movlw	17
  2094  00159E  EC3C  F00C         	call	_WriteDataLCD
  2095                           
  2096                           ;lcddisplay.c: 31: WriteDataLCD(0b10001);
  2097  0015A2  0E11               	movlw	17
  2098  0015A4  EC3C  F00C         	call	_WriteDataLCD
  2099                           
  2100                           ;lcddisplay.c: 32: WriteDataLCD(0b11111);
  2101  0015A8  0E1F               	movlw	31
  2102  0015AA  EC3C  F00C         	call	_WriteDataLCD
  2103                           
  2104                           ;lcddisplay.c: 34: WriteCmdLCD(0b00000010);
  2105  0015AE  0E02               	movlw	2
  2106  0015B0  EC5C  F00C         	call	_WriteCmdLCD
  2107                           
  2108                           ;lcddisplay.c: 35: putLCD( (unsigned char *)" --mph    ---rpm");
  2109  0015B4  0E0B               	movlw	low STR_1
  2110  0015B6  6E22               	movwf	putLCD@buffer,c
  2111  0015B8  0E06               	movlw	high STR_1
  2112  0015BA  6E23               	movwf	putLCD@buffer+1,c
  2113  0015BC  EC39  F00B         	call	_putLCD	;wreg free
  2114                           
  2115                           ;lcddisplay.c: 38: while(BusyLCD());
  2116  0015C0  D000               	goto	l3154
  2117  0015C2                     l3154:
  2118  0015C2  EC9A  F00C         	call	_BusyLCD	;wreg free
  2119  0015C6  0900               	iorlw	0
  2120  0015C8  A4D8               	btfss	status,2,c
  2121  0015CA  D7FB               	goto	l3154
  2122                           
  2123                           ;lcddisplay.c: 39: SetLCDDDRamAddr(0x040);
  2124  0015CC  0E40               	movlw	64
  2125  0015CE  ECC4  F00B         	call	_SetLCDDDRamAddr
  2126                           
  2127                           ;lcddisplay.c: 40: putLCD( (unsigned char *)"---pwr    ---pwm");
  2128  0015D2  0E1C               	movlw	low STR_2
  2129  0015D4  6E22               	movwf	putLCD@buffer,c
  2130  0015D6  0E06               	movlw	high STR_2
  2131  0015D8  6E23               	movwf	putLCD@buffer+1,c
  2132  0015DA  EC39  F00B         	call	_putLCD	;wreg free
  2133  0015DE  0012               	return		;funcret
  2134  0015E0                     __end_of_LCDInitialDisplay:
  2135                           	opt stack 0
  2136                           tblptru	equ	0xFF8
  2137                           tblptrh	equ	0xFF7
  2138                           tblptrl	equ	0xFF6
  2139                           tablat	equ	0xFF5
  2140                           prodh	equ	0xFF4
  2141                           prodl	equ	0xFF3
  2142                           indf2	equ	0xFDF
  2143                           postinc2	equ	0xFDE
  2144                           postdec2	equ	0xFDD
  2145                           fsr2h	equ	0xFDA
  2146                           fsr2l	equ	0xFD9
  2147                           status	equ	0xFD8
  2148                           
  2149 ;; *************** function _putLCD *****************
  2150 ;; Defined at:
  2151 ;;		line 435 in file "lcddisplay.c"
  2152 ;; Parameters:    Size  Location     Type
  2153 ;;  buffer          2   33[COMRAM] PTR unsigned char 
  2154 ;;		 -> putIntLCD@result_958(3), putIntLCD@result_956(4), putIntLCD@result_954(3), putIntLCD@result(2), 
  2155 ;;		 -> STR_5(8), STR_4(4), STR_3(7), STR_2(17), 
  2156 ;;		 -> STR_1(17), 
  2157 ;; Auto vars:     Size  Location     Type
  2158 ;;		None
  2159 ;; Return value:  Size  Location     Type
  2160 ;;		None               void
  2161 ;; Registers used:
  2162 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2163 ;; Tracked objects:
  2164 ;;		On entry : 0/0
  2165 ;;		On exit  : 0/0
  2166 ;;		Unchanged: 0/0
  2167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2168 ;;      Params:         2       0       0       0       0       0       0
  2169 ;;      Locals:         0       0       0       0       0       0       0
  2170 ;;      Temps:          0       0       0       0       0       0       0
  2171 ;;      Totals:         2       0       0       0       0       0       0
  2172 ;;Total ram usage:        2 bytes
  2173 ;; Hardware stack levels used:    1
  2174 ;; Hardware stack levels required when called:    5
  2175 ;; This function calls:
  2176 ;;		_BusyLCD
  2177 ;;		_WriteDataLCD
  2178 ;; This function is called by:
  2179 ;;		_LCDInitialDisplay
  2180 ;;		_LCDUpdate
  2181 ;;		_putIntLCD
  2182 ;; This function uses a non-reentrant model
  2183 ;;
  2184                           
  2185                           	psect	text9
  2186  001672                     __ptext9:
  2187                           	opt stack 0
  2188  001672                     _putLCD:
  2189                           	opt stack 24
  2190                           
  2191                           ;lcddisplay.c: 437: while(*buffer)
  2192                           
  2193                           ;incstack = 0
  2194  001672  D01B               	goto	l2816
  2195                           
  2196                           ;lcddisplay.c: 438: {
  2197                           ;lcddisplay.c: 439: while(BusyLCD());
  2198  001674  D000               	goto	l2810
  2199  001676                     l2810:
  2200  001676  EC9A  F00C         	call	_BusyLCD	;wreg free
  2201  00167A  0900               	iorlw	0
  2202  00167C  A4D8               	btfss	status,2,c
  2203  00167E  D7FB               	goto	l2810
  2204                           
  2205                           ;lcddisplay.c: 440: WriteDataLCD(*buffer);
  2206  001680  C022  FFF6         	movff	putLCD@buffer,tblptrl
  2207  001684  C023  FFF7         	movff	putLCD@buffer+1,tblptrh
  2208  001688  6AF8               	clrf	tblptru,c
  2209  00168A  0E05               	movlw	(high __ramtop+-1)
  2210  00168C  64F7               	cpfsgt	tblptrh,c
  2211  00168E  D003               	bra	u1847
  2212  001690  0008               	tblrd		*
  2213  001692  50F5               	movf	tablat,w,c
  2214  001694  D005               	bra	u1840
  2215  001696                     u1847:
  2216  001696  CFF6 FFE9          	movff	tblptrl,fsr0l
  2217  00169A  CFF7 FFEA          	movff	tblptrh,fsr0h
  2218  00169E  50EF               	movf	indf0,w,c
  2219  0016A0                     u1840:
  2220  0016A0  EC3C  F00C         	call	_WriteDataLCD
  2221                           
  2222                           ;lcddisplay.c: 441: buffer++;
  2223  0016A4  4A22               	infsnz	putLCD@buffer,f,c
  2224  0016A6  2A23               	incf	putLCD@buffer+1,f,c
  2225  0016A8  D000               	goto	l2816
  2226  0016AA                     l2816:
  2227  0016AA  C022  FFF6         	movff	putLCD@buffer,tblptrl
  2228  0016AE  C023  FFF7         	movff	putLCD@buffer+1,tblptrh
  2229  0016B2  6AF8               	clrf	tblptru,c
  2230  0016B4  0E05               	movlw	(high __ramtop+-1)
  2231  0016B6  64F7               	cpfsgt	tblptrh,c
  2232  0016B8  D003               	bra	u1857
  2233  0016BA  0008               	tblrd		*
  2234  0016BC  50F5               	movf	tablat,w,c
  2235  0016BE  D005               	bra	u1850
  2236  0016C0                     u1857:
  2237  0016C0  CFF6 FFE9          	movff	tblptrl,fsr0l
  2238  0016C4  CFF7 FFEA          	movff	tblptrh,fsr0h
  2239  0016C8  50EF               	movf	indf0,w,c
  2240  0016CA                     u1850:
  2241  0016CA  0900               	iorlw	0
  2242  0016CC  A4D8               	btfss	status,2,c
  2243  0016CE  D7D3               	goto	l2810
  2244                           
  2245                           ;lcddisplay.c: 442: }
  2246                           ;lcddisplay.c: 443: return;
  2247  0016D0  0012               	return		;funcret
  2248  0016D2                     __end_of_putLCD:
  2249                           	opt stack 0
  2250                           tblptru	equ	0xFF8
  2251                           tblptrh	equ	0xFF7
  2252                           tblptrl	equ	0xFF6
  2253                           tablat	equ	0xFF5
  2254                           prodh	equ	0xFF4
  2255                           prodl	equ	0xFF3
  2256                           indf0	equ	0xFEF
  2257                           fsr0h	equ	0xFEA
  2258                           fsr0l	equ	0xFE9
  2259                           indf2	equ	0xFDF
  2260                           postinc2	equ	0xFDE
  2261                           postdec2	equ	0xFDD
  2262                           fsr2h	equ	0xFDA
  2263                           fsr2l	equ	0xFD9
  2264                           status	equ	0xFD8
  2265                           
  2266 ;; *************** function _WriteDataLCD *****************
  2267 ;; Defined at:
  2268 ;;		line 446 in file "lcddisplay.c"
  2269 ;; Parameters:    Size  Location     Type
  2270 ;;  data            1    wreg     unsigned char 
  2271 ;; Auto vars:     Size  Location     Type
  2272 ;;  data            1   32[COMRAM] unsigned char 
  2273 ;; Return value:  Size  Location     Type
  2274 ;;		None               void
  2275 ;; Registers used:
  2276 ;;		wreg, status,2, status,0, cstack
  2277 ;; Tracked objects:
  2278 ;;		On entry : 0/0
  2279 ;;		On exit  : 0/0
  2280 ;;		Unchanged: 0/0
  2281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2282 ;;      Params:         0       0       0       0       0       0       0
  2283 ;;      Locals:         1       0       0       0       0       0       0
  2284 ;;      Temps:          0       0       0       0       0       0       0
  2285 ;;      Totals:         1       0       0       0       0       0       0
  2286 ;;Total ram usage:        1 bytes
  2287 ;; Hardware stack levels used:    1
  2288 ;; Hardware stack levels required when called:    4
  2289 ;; This function calls:
  2290 ;;		_DelayFor18TCY
  2291 ;; This function is called by:
  2292 ;;		_LCDInitialDisplay
  2293 ;;		_putLCD
  2294 ;; This function uses a non-reentrant model
  2295 ;;
  2296                           
  2297                           	psect	text10
  2298  001878                     __ptext10:
  2299                           	opt stack 0
  2300  001878                     _WriteDataLCD:
  2301                           	opt stack 24
  2302                           
  2303                           ;incstack = 0
  2304                           ;WriteDataLCD@data stored from wreg
  2305  001878  6E21               	movwf	WriteDataLCD@data,c
  2306                           
  2307                           ;lcddisplay.c: 465: TRISD &= 0xf0;
  2308  00187A  0EF0               	movlw	240
  2309  00187C  1695               	andwf	3989,f,c	;volatile
  2310                           
  2311                           ;lcddisplay.c: 466: PORTD &= 0xf0;
  2312  00187E  0EF0               	movlw	240
  2313  001880  1683               	andwf	3971,f,c	;volatile
  2314                           
  2315                           ;lcddisplay.c: 467: PORTD |= ((data>>4)&0x0f);
  2316  001882  3821               	swapf	WriteDataLCD@data,w,c
  2317  001884  0B0F               	andlw	15
  2318  001886  0B0F               	andlw	15
  2319  001888  1283               	iorwf	3971,f,c	;volatile
  2320                           
  2321                           ;lcddisplay.c: 469: LATEbits.LATE0 = 1;
  2322  00188A  808D               	bsf	3981,0,c	;volatile
  2323                           
  2324                           ;lcddisplay.c: 470: LATEbits.LATE1 = 0;
  2325  00188C  928D               	bcf	3981,1,c	;volatile
  2326                           
  2327                           ;lcddisplay.c: 471: DelayFor18TCY();
  2328  00188E  EC4A  F00D         	call	_DelayFor18TCY	;wreg free
  2329                           
  2330                           ;lcddisplay.c: 472: LATEbits.LATE2 = 1;
  2331  001892  848D               	bsf	3981,2,c	;volatile
  2332                           
  2333                           ;lcddisplay.c: 473: DelayFor18TCY();
  2334  001894  EC4A  F00D         	call	_DelayFor18TCY	;wreg free
  2335                           
  2336                           ;lcddisplay.c: 474: LATEbits.LATE2 = 0;
  2337  001898  948D               	bcf	3981,2,c	;volatile
  2338                           
  2339                           ;lcddisplay.c: 479: PORTD &= 0xf0;
  2340  00189A  0EF0               	movlw	240
  2341  00189C  1683               	andwf	3971,f,c	;volatile
  2342                           
  2343                           ;lcddisplay.c: 480: PORTD |= (data&0x0f);
  2344  00189E  5021               	movf	WriteDataLCD@data,w,c
  2345  0018A0  0B0F               	andlw	15
  2346  0018A2  1283               	iorwf	3971,f,c	;volatile
  2347                           
  2348                           ;lcddisplay.c: 482: DelayFor18TCY();
  2349  0018A4  EC4A  F00D         	call	_DelayFor18TCY	;wreg free
  2350                           
  2351                           ;lcddisplay.c: 483: LATEbits.LATE2 = 1;
  2352  0018A8  848D               	bsf	3981,2,c	;volatile
  2353                           
  2354                           ;lcddisplay.c: 484: DelayFor18TCY();
  2355  0018AA  EC4A  F00D         	call	_DelayFor18TCY	;wreg free
  2356                           
  2357                           ;lcddisplay.c: 485: LATEbits.LATE2 = 0;
  2358  0018AE  948D               	bcf	3981,2,c	;volatile
  2359                           
  2360                           ;lcddisplay.c: 489: TRISD |= 0x0f;
  2361  0018B0  0E0F               	movlw	15
  2362  0018B2  1295               	iorwf	3989,f,c	;volatile
  2363  0018B4  0012               	return	
  2364                           
  2365                           ;lcddisplay.c: 493: return;
  2366  0018B6  0012               	return		;funcret
  2367  0018B8                     __end_of_WriteDataLCD:
  2368                           	opt stack 0
  2369                           tblptru	equ	0xFF8
  2370                           tblptrh	equ	0xFF7
  2371                           tblptrl	equ	0xFF6
  2372                           tablat	equ	0xFF5
  2373                           prodh	equ	0xFF4
  2374                           prodl	equ	0xFF3
  2375                           indf0	equ	0xFEF
  2376                           fsr0h	equ	0xFEA
  2377                           fsr0l	equ	0xFE9
  2378                           indf2	equ	0xFDF
  2379                           postinc2	equ	0xFDE
  2380                           postdec2	equ	0xFDD
  2381                           fsr2h	equ	0xFDA
  2382                           fsr2l	equ	0xFD9
  2383                           status	equ	0xFD8
  2384                           
  2385 ;; *************** function _SetLCDCGRamAddr *****************
  2386 ;; Defined at:
  2387 ;;		line 357 in file "lcddisplay.c"
  2388 ;; Parameters:    Size  Location     Type
  2389 ;;  CGaddr          1    wreg     unsigned char 
  2390 ;; Auto vars:     Size  Location     Type
  2391 ;;  CGaddr          1   35[COMRAM] unsigned char 
  2392 ;; Return value:  Size  Location     Type
  2393 ;;		None               void
  2394 ;; Registers used:
  2395 ;;		wreg, status,2, status,0, cstack
  2396 ;; Tracked objects:
  2397 ;;		On entry : 0/0
  2398 ;;		On exit  : 0/0
  2399 ;;		Unchanged: 0/0
  2400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2401 ;;      Params:         0       0       0       0       0       0       0
  2402 ;;      Locals:         1       0       0       0       0       0       0
  2403 ;;      Temps:          3       0       0       0       0       0       0
  2404 ;;      Totals:         4       0       0       0       0       0       0
  2405 ;;Total ram usage:        4 bytes
  2406 ;; Hardware stack levels used:    1
  2407 ;; Hardware stack levels required when called:    4
  2408 ;; This function calls:
  2409 ;;		_DelayFor18TCY
  2410 ;; This function is called by:
  2411 ;;		_LCDInitialDisplay
  2412 ;; This function uses a non-reentrant model
  2413 ;;
  2414                           
  2415                           	psect	text11
  2416  00172E                     __ptext11:
  2417                           	opt stack 0
  2418  00172E                     _SetLCDCGRamAddr:
  2419                           	opt stack 25
  2420                           
  2421                           ;incstack = 0
  2422                           ;SetLCDCGRamAddr@CGaddr stored from wreg
  2423  00172E  6E24               	movwf	SetLCDCGRamAddr@CGaddr,c
  2424                           
  2425                           ;lcddisplay.c: 376: TRISD &= 0xf0;
  2426  001730  0EF0               	movlw	240
  2427  001732  1695               	andwf	3989,f,c	;volatile
  2428                           
  2429                           ;lcddisplay.c: 377: PORTD &= 0xf0;
  2430  001734  0EF0               	movlw	240
  2431  001736  1683               	andwf	3971,f,c	;volatile
  2432                           
  2433                           ;lcddisplay.c: 378: PORTD |= (((CGaddr |0b01000000)>>4) & 0x0f);
  2434  001738  5024               	movf	SetLCDCGRamAddr@CGaddr,w,c
  2435  00173A  6E21               	movwf	??_SetLCDCGRamAddr& (0+255),c
  2436  00173C  6A22               	clrf	(??_SetLCDCGRamAddr+1)& (0+255),c
  2437  00173E  0E40               	movlw	64
  2438  001740  1221               	iorwf	??_SetLCDCGRamAddr,f,c
  2439  001742  0E00               	movlw	0
  2440  001744  1222               	iorwf	??_SetLCDCGRamAddr+1,f,c
  2441  001746  0E04               	movlw	4
  2442  001748  6E23               	movwf	(??_SetLCDCGRamAddr+2)& (0+255),c
  2443  00174A                     u2085:
  2444  00174A  3422               	rlcf	??_SetLCDCGRamAddr+1,w,c
  2445  00174C  3222               	rrcf	??_SetLCDCGRamAddr+1,f,c
  2446  00174E  3221               	rrcf	??_SetLCDCGRamAddr,f,c
  2447  001750  2E23               	decfsz	(??_SetLCDCGRamAddr+2)& (0+255),f,c
  2448  001752  D7FB               	goto	u2085
  2449  001754  5021               	movf	??_SetLCDCGRamAddr,w,c
  2450  001756  0B0F               	andlw	15
  2451  001758  1283               	iorwf	3971,f,c	;volatile
  2452                           
  2453                           ;lcddisplay.c: 380: LATEbits.LATE1 = 0;
  2454  00175A  928D               	bcf	3981,1,c	;volatile
  2455                           
  2456                           ;lcddisplay.c: 381: LATEbits.LATE0 = 0;
  2457  00175C  908D               	bcf	3981,0,c	;volatile
  2458                           
  2459                           ;lcddisplay.c: 382: DelayFor18TCY();
  2460  00175E  EC4A  F00D         	call	_DelayFor18TCY	;wreg free
  2461                           
  2462                           ;lcddisplay.c: 383: LATEbits.LATE2 = 1;
  2463  001762  848D               	bsf	3981,2,c	;volatile
  2464                           
  2465                           ;lcddisplay.c: 384: DelayFor18TCY();
  2466  001764  EC4A  F00D         	call	_DelayFor18TCY	;wreg free
  2467                           
  2468                           ;lcddisplay.c: 385: LATEbits.LATE2 = 0;
  2469  001768  948D               	bcf	3981,2,c	;volatile
  2470                           
  2471                           ;lcddisplay.c: 390: PORTD &= 0xf0;
  2472  00176A  0EF0               	movlw	240
  2473  00176C  1683               	andwf	3971,f,c	;volatile
  2474                           
  2475                           ;lcddisplay.c: 391: PORTD |= (CGaddr&0x0f);
  2476  00176E  5024               	movf	SetLCDCGRamAddr@CGaddr,w,c
  2477  001770  0B0F               	andlw	15
  2478  001772  1283               	iorwf	3971,f,c	;volatile
  2479                           
  2480                           ;lcddisplay.c: 393: DelayFor18TCY();
  2481  001774  EC4A  F00D         	call	_DelayFor18TCY	;wreg free
  2482                           
  2483                           ;lcddisplay.c: 394: LATEbits.LATE2 = 1;
  2484  001778  848D               	bsf	3981,2,c	;volatile
  2485                           
  2486                           ;lcddisplay.c: 395: DelayFor18TCY();
  2487  00177A  EC4A  F00D         	call	_DelayFor18TCY	;wreg free
  2488                           
  2489                           ;lcddisplay.c: 396: LATEbits.LATE2 = 0;
  2490  00177E  948D               	bcf	3981,2,c	;volatile
  2491                           
  2492                           ;lcddisplay.c: 400: TRISD |= 0x0f;
  2493  001780  0E0F               	movlw	15
  2494  001782  1295               	iorwf	3989,f,c	;volatile
  2495  001784  0012               	return	
  2496                           
  2497                           ;lcddisplay.c: 404: return;
  2498  001786  0012               	return		;funcret
  2499  001788                     __end_of_SetLCDCGRamAddr:
  2500                           	opt stack 0
  2501                           tblptru	equ	0xFF8
  2502                           tblptrh	equ	0xFF7
  2503                           tblptrl	equ	0xFF6
  2504                           tablat	equ	0xFF5
  2505                           prodh	equ	0xFF4
  2506                           prodl	equ	0xFF3
  2507                           indf0	equ	0xFEF
  2508                           fsr0h	equ	0xFEA
  2509                           fsr0l	equ	0xFE9
  2510                           indf2	equ	0xFDF
  2511                           postinc2	equ	0xFDE
  2512                           postdec2	equ	0xFDD
  2513                           fsr2h	equ	0xFDA
  2514                           fsr2l	equ	0xFD9
  2515                           status	equ	0xFD8
  2516                           
  2517 ;; *************** function _InitPorts *****************
  2518 ;; Defined at:
  2519 ;;		line 42 in file "ports.c"
  2520 ;; Parameters:    Size  Location     Type
  2521 ;;		None
  2522 ;; Auto vars:     Size  Location     Type
  2523 ;;		None
  2524 ;; Return value:  Size  Location     Type
  2525 ;;		None               void
  2526 ;; Registers used:
  2527 ;;		wreg, status,2
  2528 ;; Tracked objects:
  2529 ;;		On entry : 0/0
  2530 ;;		On exit  : 0/0
  2531 ;;		Unchanged: 0/0
  2532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2533 ;;      Params:         0       0       0       0       0       0       0
  2534 ;;      Locals:         0       0       0       0       0       0       0
  2535 ;;      Temps:          0       0       0       0       0       0       0
  2536 ;;      Totals:         0       0       0       0       0       0       0
  2537 ;;Total ram usage:        0 bytes
  2538 ;; Hardware stack levels used:    1
  2539 ;; Hardware stack levels required when called:    2
  2540 ;; This function calls:
  2541 ;;		Nothing
  2542 ;; This function is called by:
  2543 ;;		_main
  2544 ;; This function uses a non-reentrant model
  2545 ;;
  2546                           
  2547                           	psect	text12
  2548  0019DC                     __ptext12:
  2549                           	opt stack 0
  2550  0019DC                     _InitPorts:
  2551                           	opt stack 28
  2552                           
  2553                           ;ports.c: 44: ANSEL = 0;
  2554                           
  2555                           ;incstack = 0
  2556  0019DC  0E00               	movlw	0
  2557  0019DE  6E7E               	movwf	3966,c	;volatile
  2558                           
  2559                           ;ports.c: 45: ANSELH = 0;
  2560  0019E0  0E00               	movlw	0
  2561  0019E2  6E7F               	movwf	3967,c	;volatile
  2562                           
  2563                           ;ports.c: 57: TRISA = 0b11100000;
  2564  0019E4  0EE0               	movlw	224
  2565  0019E6  6E92               	movwf	3986,c	;volatile
  2566                           
  2567                           ;ports.c: 58: ANSEL = 0b11100000;
  2568  0019E8  0EE0               	movlw	224
  2569  0019EA  6E7E               	movwf	3966,c	;volatile
  2570                           
  2571                           ;ports.c: 70: INTCON2bits.RBPU = 0;
  2572  0019EC  9EF1               	bcf	intcon2,7,c	;volatile
  2573                           
  2574                           ;ports.c: 71: WPUBbits.WPUB0 = 1;
  2575  0019EE  807C               	bsf	3964,0,c	;volatile
  2576                           
  2577                           ;ports.c: 73: TRISB = 0b00110111;
  2578  0019F0  0E37               	movlw	55
  2579  0019F2  6E93               	movwf	3987,c	;volatile
  2580                           
  2581                           ;ports.c: 77: TRISCbits.RC2 = 0;
  2582  0019F4  9494               	bcf	3988,2,c	;volatile
  2583                           
  2584                           ;ports.c: 90: TRISD = 0b00010000;
  2585  0019F6  0E10               	movlw	16
  2586  0019F8  6E95               	movwf	3989,c	;volatile
  2587  0019FA  0012               	return		;funcret
  2588  0019FC                     __end_of_InitPorts:
  2589                           	opt stack 0
  2590                           tblptru	equ	0xFF8
  2591                           tblptrh	equ	0xFF7
  2592                           tblptrl	equ	0xFF6
  2593                           tablat	equ	0xFF5
  2594                           prodh	equ	0xFF4
  2595                           prodl	equ	0xFF3
  2596                           intcon2	equ	0xFF1
  2597                           indf0	equ	0xFEF
  2598                           fsr0h	equ	0xFEA
  2599                           fsr0l	equ	0xFE9
  2600                           indf2	equ	0xFDF
  2601                           postinc2	equ	0xFDE
  2602                           postdec2	equ	0xFDD
  2603                           fsr2h	equ	0xFDA
  2604                           fsr2l	equ	0xFD9
  2605                           status	equ	0xFD8
  2606                           
  2607 ;; *************** function _InitMotorPWM *****************
  2608 ;; Defined at:
  2609 ;;		line 118 in file "ports.c"
  2610 ;; Parameters:    Size  Location     Type
  2611 ;;		None
  2612 ;; Auto vars:     Size  Location     Type
  2613 ;;		None
  2614 ;; Return value:  Size  Location     Type
  2615 ;;		None               void
  2616 ;; Registers used:
  2617 ;;		wreg, status,2
  2618 ;; Tracked objects:
  2619 ;;		On entry : 0/0
  2620 ;;		On exit  : 0/0
  2621 ;;		Unchanged: 0/0
  2622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2623 ;;      Params:         0       0       0       0       0       0       0
  2624 ;;      Locals:         0       0       0       0       0       0       0
  2625 ;;      Temps:          0       0       0       0       0       0       0
  2626 ;;      Totals:         0       0       0       0       0       0       0
  2627 ;;Total ram usage:        0 bytes
  2628 ;; Hardware stack levels used:    1
  2629 ;; Hardware stack levels required when called:    2
  2630 ;; This function calls:
  2631 ;;		Nothing
  2632 ;; This function is called by:
  2633 ;;		_main
  2634 ;; This function uses a non-reentrant model
  2635 ;;
  2636                           
  2637                           	psect	text13
  2638  001A6A                     __ptext13:
  2639                           	opt stack 0
  2640  001A6A                     _InitMotorPWM:
  2641                           	opt stack 28
  2642                           
  2643                           ;ports.c: 120: CCP1CON = 0b00001100;
  2644                           
  2645                           ;incstack = 0
  2646  001A6A  0E0C               	movlw	12
  2647  001A6C  6EBD               	movwf	4029,c	;volatile
  2648                           
  2649                           ;ports.c: 123: PR2 = 255;
  2650  001A6E  68CB               	setf	4043,c	;volatile
  2651                           
  2652                           ;ports.c: 126: T2CON = 0b00000100;
  2653  001A70  0E04               	movlw	4
  2654  001A72  6ECA               	movwf	4042,c	;volatile
  2655                           
  2656                           ;ports.c: 129: CCPR1L = 0;
  2657  001A74  0E00               	movlw	0
  2658  001A76  6EBE               	movwf	4030,c	;volatile
  2659  001A78  0012               	return		;funcret
  2660  001A7A                     __end_of_InitMotorPWM:
  2661                           	opt stack 0
  2662                           tblptru	equ	0xFF8
  2663                           tblptrh	equ	0xFF7
  2664                           tblptrl	equ	0xFF6
  2665                           tablat	equ	0xFF5
  2666                           prodh	equ	0xFF4
  2667                           prodl	equ	0xFF3
  2668                           intcon2	equ	0xFF1
  2669                           indf0	equ	0xFEF
  2670                           fsr0h	equ	0xFEA
  2671                           fsr0l	equ	0xFE9
  2672                           indf2	equ	0xFDF
  2673                           postinc2	equ	0xFDE
  2674                           postdec2	equ	0xFDD
  2675                           fsr2h	equ	0xFDA
  2676                           fsr2l	equ	0xFD9
  2677                           status	equ	0xFD8
  2678                           
  2679 ;; *************** function _InitLCD *****************
  2680 ;; Defined at:
  2681 ;;		line 77 in file "lcddisplay.c"
  2682 ;; Parameters:    Size  Location     Type
  2683 ;;		None
  2684 ;; Auto vars:     Size  Location     Type
  2685 ;;		None
  2686 ;; Return value:  Size  Location     Type
  2687 ;;		None               void
  2688 ;; Registers used:
  2689 ;;		wreg, status,2, status,0, cstack
  2690 ;; Tracked objects:
  2691 ;;		On entry : 0/0
  2692 ;;		On exit  : 0/0
  2693 ;;		Unchanged: 0/0
  2694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2695 ;;      Params:         0       0       0       0       0       0       0
  2696 ;;      Locals:         0       0       0       0       0       0       0
  2697 ;;      Temps:          0       0       0       0       0       0       0
  2698 ;;      Totals:         0       0       0       0       0       0       0
  2699 ;;Total ram usage:        0 bytes
  2700 ;; Hardware stack levels used:    1
  2701 ;; Hardware stack levels required when called:    6
  2702 ;; This function calls:
  2703 ;;		_BusyLCD
  2704 ;;		_OpenLCD
  2705 ;;		_WriteCmdLCD
  2706 ;; This function is called by:
  2707 ;;		_main
  2708 ;; This function uses a non-reentrant model
  2709 ;;
  2710                           
  2711                           	psect	text14
  2712  0017DC                     __ptext14:
  2713                           	opt stack 0
  2714  0017DC                     _InitLCD:
  2715                           	opt stack 24
  2716                           
  2717                           ;lcddisplay.c: 78: OpenLCD(0b00101100 & 0b00111000);
  2718                           
  2719                           ;incstack = 0
  2720  0017DC  0E28               	movlw	40
  2721  0017DE  EC42  F00A         	call	_OpenLCD
  2722                           
  2723                           ;lcddisplay.c: 79: while(BusyLCD());
  2724  0017E2  D000               	goto	l3130
  2725  0017E4                     l3130:
  2726  0017E4  EC9A  F00C         	call	_BusyLCD	;wreg free
  2727  0017E8  0900               	iorlw	0
  2728  0017EA  A4D8               	btfss	status,2,c
  2729  0017EC  D7FB               	goto	l3130
  2730                           
  2731                           ;lcddisplay.c: 80: WriteCmdLCD(0x06);
  2732  0017EE  0E06               	movlw	6
  2733  0017F0  EC5C  F00C         	call	_WriteCmdLCD
  2734                           
  2735                           ;lcddisplay.c: 81: while(BusyLCD());
  2736  0017F4  D000               	goto	l3134
  2737  0017F6                     l3134:
  2738  0017F6  EC9A  F00C         	call	_BusyLCD	;wreg free
  2739  0017FA  0900               	iorlw	0
  2740  0017FC  A4D8               	btfss	status,2,c
  2741  0017FE  D7FB               	goto	l3134
  2742                           
  2743                           ;lcddisplay.c: 82: WriteCmdLCD(0x0C);
  2744  001800  0E0C               	movlw	12
  2745  001802  EC5C  F00C         	call	_WriteCmdLCD
  2746                           
  2747                           ;lcddisplay.c: 83: while(BusyLCD());
  2748  001806  D000               	goto	l3138
  2749  001808                     l3138:
  2750  001808  EC9A  F00C         	call	_BusyLCD	;wreg free
  2751  00180C  0900               	iorlw	0
  2752  00180E  A4D8               	btfss	status,2,c
  2753  001810  D7FB               	goto	l3138
  2754                           
  2755                           ;lcddisplay.c: 84: WriteCmdLCD(0x01);
  2756  001812  0E01               	movlw	1
  2757  001814  EC5C  F00C         	call	_WriteCmdLCD
  2758                           
  2759                           ;lcddisplay.c: 85: while(BusyLCD());
  2760  001818  D000               	goto	l3142
  2761  00181A                     l3142:
  2762  00181A  EC9A  F00C         	call	_BusyLCD	;wreg free
  2763  00181E  0900               	iorlw	0
  2764  001820  A4D8               	btfss	status,2,c
  2765  001822  D7FB               	goto	l3142
  2766                           
  2767                           ;lcddisplay.c: 86: WriteCmdLCD(66);
  2768  001824  0E42               	movlw	66
  2769  001826  EC5C  F00C         	call	_WriteCmdLCD
  2770  00182A  0012               	return		;funcret
  2771  00182C                     __end_of_InitLCD:
  2772                           	opt stack 0
  2773                           tblptru	equ	0xFF8
  2774                           tblptrh	equ	0xFF7
  2775                           tblptrl	equ	0xFF6
  2776                           tablat	equ	0xFF5
  2777                           prodh	equ	0xFF4
  2778                           prodl	equ	0xFF3
  2779                           intcon2	equ	0xFF1
  2780                           indf0	equ	0xFEF
  2781                           fsr0h	equ	0xFEA
  2782                           fsr0l	equ	0xFE9
  2783                           indf2	equ	0xFDF
  2784                           postinc2	equ	0xFDE
  2785                           postdec2	equ	0xFDD
  2786                           fsr2h	equ	0xFDA
  2787                           fsr2l	equ	0xFD9
  2788                           status	equ	0xFD8
  2789                           
  2790 ;; *************** function _OpenLCD *****************
  2791 ;; Defined at:
  2792 ;;		line 95 in file "lcddisplay.c"
  2793 ;; Parameters:    Size  Location     Type
  2794 ;;  lcdtype         1    wreg     unsigned char 
  2795 ;; Auto vars:     Size  Location     Type
  2796 ;;  lcdtype         1   36[COMRAM] unsigned char 
  2797 ;; Return value:  Size  Location     Type
  2798 ;;		None               void
  2799 ;; Registers used:
  2800 ;;		wreg, status,2, status,0, cstack
  2801 ;; Tracked objects:
  2802 ;;		On entry : 0/0
  2803 ;;		On exit  : 0/0
  2804 ;;		Unchanged: 0/0
  2805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2806 ;;      Params:         0       0       0       0       0       0       0
  2807 ;;      Locals:         1       0       0       0       0       0       0
  2808 ;;      Temps:          0       0       0       0       0       0       0
  2809 ;;      Totals:         1       0       0       0       0       0       0
  2810 ;;Total ram usage:        1 bytes
  2811 ;; Hardware stack levels used:    1
  2812 ;; Hardware stack levels required when called:    5
  2813 ;; This function calls:
  2814 ;;		_BusyLCD
  2815 ;;		_BusyXLCD
  2816 ;;		_Delay100TCYx
  2817 ;;		_Delay10KTCYx
  2818 ;;		_SetLCDDDRamAddr
  2819 ;;		_WriteCmdLCD
  2820 ;; This function is called by:
  2821 ;;		_InitLCD
  2822 ;; This function uses a non-reentrant model
  2823 ;;
  2824                           
  2825                           	psect	text15
  2826  001484                     __ptext15:
  2827                           	opt stack 0
  2828  001484                     _OpenLCD:
  2829                           	opt stack 24
  2830                           
  2831                           ;incstack = 0
  2832                           ;OpenLCD@lcdtype stored from wreg
  2833  001484  6E25               	movwf	OpenLCD@lcdtype,c
  2834                           
  2835                           ;lcddisplay.c: 98: Delay100TCYx(38);
  2836  001486  0E26               	movlw	38
  2837  001488  EC23  F00D         	call	_Delay100TCYx
  2838                           
  2839                           ;lcddisplay.c: 109: PORTD &= 0xf0;
  2840  00148C  0EF0               	movlw	240
  2841  00148E  1683               	andwf	3971,f,c	;volatile
  2842                           
  2843                           ;lcddisplay.c: 110: TRISD &= 0xF0;
  2844  001490  0EF0               	movlw	240
  2845  001492  1695               	andwf	3989,f,c	;volatile
  2846                           
  2847                           ;lcddisplay.c: 113: TRISEbits.TRISE1 = 0;
  2848  001494  9296               	bcf	3990,1,c	;volatile
  2849                           
  2850                           ;lcddisplay.c: 114: TRISEbits.TRISE0 = 0;
  2851  001496  9096               	bcf	3990,0,c	;volatile
  2852                           
  2853                           ;lcddisplay.c: 115: TRISEbits.TRISE2 = 0;
  2854  001498  9496               	bcf	3990,2,c	;volatile
  2855                           
  2856                           ;lcddisplay.c: 116: LATEbits.LATE1 = 0;
  2857  00149A  928D               	bcf	3981,1,c	;volatile
  2858                           
  2859                           ;lcddisplay.c: 117: LATEbits.LATE0 = 0;
  2860  00149C  908D               	bcf	3981,0,c	;volatile
  2861                           
  2862                           ;lcddisplay.c: 118: LATEbits.LATE2 = 0;
  2863  00149E  948D               	bcf	3981,2,c	;volatile
  2864                           
  2865                           ;lcddisplay.c: 121: Delay100TCYx(38);
  2866  0014A0  0E26               	movlw	38
  2867  0014A2  EC23  F00D         	call	_Delay100TCYx
  2868                           
  2869                           ;lcddisplay.c: 124: WriteCmdLCD(0x30);
  2870  0014A6  0E30               	movlw	48
  2871  0014A8  EC5C  F00C         	call	_WriteCmdLCD
  2872                           
  2873                           ;lcddisplay.c: 125: Delay10KTCYx(0x05);
  2874  0014AC  0E05               	movlw	5
  2875  0014AE  EC0D  F00D         	call	_Delay10KTCYx
  2876                           
  2877                           ;lcddisplay.c: 127: WriteCmdLCD(0x30);
  2878  0014B2  0E30               	movlw	48
  2879  0014B4  EC5C  F00C         	call	_WriteCmdLCD
  2880                           
  2881                           ;lcddisplay.c: 128: Delay10KTCYx(0x01);
  2882  0014B8  0E01               	movlw	1
  2883  0014BA  EC0D  F00D         	call	_Delay10KTCYx
  2884                           
  2885                           ;lcddisplay.c: 131: WriteCmdLCD(0x32);
  2886  0014BE  0E32               	movlw	50
  2887  0014C0  EC5C  F00C         	call	_WriteCmdLCD
  2888                           
  2889                           ;lcddisplay.c: 132: while( BusyXLCD() );
  2890  0014C4  D000               	goto	l3072
  2891  0014C6                     l3072:
  2892  0014C6  EC7C  F00C         	call	_BusyXLCD	;wreg free
  2893  0014CA  0900               	iorlw	0
  2894  0014CC  B4D8               	btfsc	status,2,c
  2895  0014CE  D002               	goto	l3074
  2896  0014D0  D7FA               	goto	l3072
  2897                           
  2898                           ;lcddisplay.c: 137: while(BusyLCD());
  2899  0014D2  D000               	goto	l3074
  2900  0014D4                     l3074:
  2901  0014D4  EC9A  F00C         	call	_BusyLCD	;wreg free
  2902  0014D8  0900               	iorlw	0
  2903  0014DA  A4D8               	btfss	status,2,c
  2904  0014DC  D7FB               	goto	l3074
  2905                           
  2906                           ;lcddisplay.c: 138: WriteCmdLCD(lcdtype);
  2907  0014DE  5025               	movf	OpenLCD@lcdtype,w,c
  2908  0014E0  EC5C  F00C         	call	_WriteCmdLCD
  2909                           
  2910                           ;lcddisplay.c: 141: while(BusyLCD());
  2911  0014E4  D000               	goto	l3078
  2912  0014E6                     l3078:
  2913  0014E6  EC9A  F00C         	call	_BusyLCD	;wreg free
  2914  0014EA  0900               	iorlw	0
  2915  0014EC  A4D8               	btfss	status,2,c
  2916  0014EE  D7FB               	goto	l3078
  2917                           
  2918                           ;lcddisplay.c: 142: WriteCmdLCD(0b00001011&0b00001101&0b00001110);
  2919  0014F0  0E08               	movlw	8
  2920  0014F2  EC5C  F00C         	call	_WriteCmdLCD
  2921                           
  2922                           ;lcddisplay.c: 143: while(BusyLCD());
  2923  0014F6  D000               	goto	l3082
  2924  0014F8                     l3082:
  2925  0014F8  EC9A  F00C         	call	_BusyLCD	;wreg free
  2926  0014FC  0900               	iorlw	0
  2927  0014FE  A4D8               	btfss	status,2,c
  2928  001500  D7FB               	goto	l3082
  2929                           
  2930                           ;lcddisplay.c: 144: WriteCmdLCD(0b00001111&0b00001111&0b00001111);
  2931  001502  0E0F               	movlw	15
  2932  001504  EC5C  F00C         	call	_WriteCmdLCD
  2933                           
  2934                           ;lcddisplay.c: 147: while(BusyLCD());
  2935  001508  D000               	goto	l3086
  2936  00150A                     l3086:
  2937  00150A  EC9A  F00C         	call	_BusyLCD	;wreg free
  2938  00150E  0900               	iorlw	0
  2939  001510  A4D8               	btfss	status,2,c
  2940  001512  D7FB               	goto	l3086
  2941                           
  2942                           ;lcddisplay.c: 148: WriteCmdLCD(0x01);
  2943  001514  0E01               	movlw	1
  2944  001516  EC5C  F00C         	call	_WriteCmdLCD
  2945                           
  2946                           ;lcddisplay.c: 151: while(BusyLCD());
  2947  00151A  D000               	goto	l3090
  2948  00151C                     l3090:
  2949  00151C  EC9A  F00C         	call	_BusyLCD	;wreg free
  2950  001520  0900               	iorlw	0
  2951  001522  A4D8               	btfss	status,2,c
  2952  001524  D7FB               	goto	l3090
  2953                           
  2954                           ;lcddisplay.c: 152: WriteCmdLCD(0b00000100);
  2955  001526  0E04               	movlw	4
  2956  001528  EC5C  F00C         	call	_WriteCmdLCD
  2957                           
  2958                           ;lcddisplay.c: 155: while(BusyLCD());
  2959  00152C  D000               	goto	l3094
  2960  00152E                     l3094:
  2961  00152E  EC9A  F00C         	call	_BusyLCD	;wreg free
  2962  001532  0900               	iorlw	0
  2963  001534  A4D8               	btfss	status,2,c
  2964  001536  D7FB               	goto	l3094
  2965                           
  2966                           ;lcddisplay.c: 156: SetLCDDDRamAddr(0x80);
  2967  001538  0E80               	movlw	128
  2968  00153A  ECC4  F00B         	call	_SetLCDDDRamAddr
  2969  00153E  0012               	return	
  2970                           
  2971                           ;lcddisplay.c: 158: return;
  2972  001540  0012               	return		;funcret
  2973  001542                     __end_of_OpenLCD:
  2974                           	opt stack 0
  2975                           tblptru	equ	0xFF8
  2976                           tblptrh	equ	0xFF7
  2977                           tblptrl	equ	0xFF6
  2978                           tablat	equ	0xFF5
  2979                           prodh	equ	0xFF4
  2980                           prodl	equ	0xFF3
  2981                           intcon2	equ	0xFF1
  2982                           indf0	equ	0xFEF
  2983                           fsr0h	equ	0xFEA
  2984                           fsr0l	equ	0xFE9
  2985                           indf2	equ	0xFDF
  2986                           postinc2	equ	0xFDE
  2987                           postdec2	equ	0xFDD
  2988                           fsr2h	equ	0xFDA
  2989                           fsr2l	equ	0xFD9
  2990                           status	equ	0xFD8
  2991                           
  2992 ;; *************** function _WriteCmdLCD *****************
  2993 ;; Defined at:
  2994 ;;		line 161 in file "lcddisplay.c"
  2995 ;; Parameters:    Size  Location     Type
  2996 ;;  cmd             1    wreg     unsigned char 
  2997 ;; Auto vars:     Size  Location     Type
  2998 ;;  cmd             1   32[COMRAM] unsigned char 
  2999 ;; Return value:  Size  Location     Type
  3000 ;;		None               void
  3001 ;; Registers used:
  3002 ;;		wreg, status,2, status,0, cstack
  3003 ;; Tracked objects:
  3004 ;;		On entry : 0/0
  3005 ;;		On exit  : 0/0
  3006 ;;		Unchanged: 0/0
  3007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3008 ;;      Params:         0       0       0       0       0       0       0
  3009 ;;      Locals:         1       0       0       0       0       0       0
  3010 ;;      Temps:          0       0       0       0       0       0       0
  3011 ;;      Totals:         1       0       0       0       0       0       0
  3012 ;;Total ram usage:        1 bytes
  3013 ;; Hardware stack levels used:    1
  3014 ;; Hardware stack levels required when called:    4
  3015 ;; This function calls:
  3016 ;;		_DelayFor18TCY
  3017 ;; This function is called by:
  3018 ;;		_LCDInitialDisplay
  3019 ;;		_LCDUpdate
  3020 ;;		_InitLCD
  3021 ;;		_OpenLCD
  3022 ;; This function uses a non-reentrant model
  3023 ;;
  3024                           
  3025                           	psect	text16
  3026  0018B8                     __ptext16:
  3027                           	opt stack 0
  3028  0018B8                     _WriteCmdLCD:
  3029                           	opt stack 25
  3030                           
  3031                           ;incstack = 0
  3032                           ;WriteCmdLCD@cmd stored from wreg
  3033  0018B8  6E21               	movwf	WriteCmdLCD@cmd,c
  3034                           
  3035                           ;lcddisplay.c: 227: TRISD &= 0xf0;
  3036  0018BA  0EF0               	movlw	240
  3037  0018BC  1695               	andwf	3989,f,c	;volatile
  3038                           
  3039                           ;lcddisplay.c: 228: PORTD &= 0xf0;
  3040  0018BE  0EF0               	movlw	240
  3041  0018C0  1683               	andwf	3971,f,c	;volatile
  3042                           
  3043                           ;lcddisplay.c: 229: PORTD |= (cmd>>4)&0x0f;
  3044  0018C2  3821               	swapf	WriteCmdLCD@cmd,w,c
  3045  0018C4  0B0F               	andlw	15
  3046  0018C6  0B0F               	andlw	15
  3047  0018C8  1283               	iorwf	3971,f,c	;volatile
  3048                           
  3049                           ;lcddisplay.c: 231: LATEbits.LATE1 = 0;
  3050  0018CA  928D               	bcf	3981,1,c	;volatile
  3051                           
  3052                           ;lcddisplay.c: 232: LATEbits.LATE0 = 0;
  3053  0018CC  908D               	bcf	3981,0,c	;volatile
  3054                           
  3055                           ;lcddisplay.c: 233: DelayFor18TCY();
  3056  0018CE  EC4A  F00D         	call	_DelayFor18TCY	;wreg free
  3057                           
  3058                           ;lcddisplay.c: 234: LATEbits.LATE2 = 1;
  3059  0018D2  848D               	bsf	3981,2,c	;volatile
  3060                           
  3061                           ;lcddisplay.c: 235: DelayFor18TCY();
  3062  0018D4  EC4A  F00D         	call	_DelayFor18TCY	;wreg free
  3063                           
  3064                           ;lcddisplay.c: 236: LATEbits.LATE2 = 0;
  3065  0018D8  948D               	bcf	3981,2,c	;volatile
  3066                           
  3067                           ;lcddisplay.c: 241: PORTD &= 0xf0;
  3068  0018DA  0EF0               	movlw	240
  3069  0018DC  1683               	andwf	3971,f,c	;volatile
  3070                           
  3071                           ;lcddisplay.c: 242: PORTD |= cmd&0x0f;
  3072  0018DE  5021               	movf	WriteCmdLCD@cmd,w,c
  3073  0018E0  0B0F               	andlw	15
  3074  0018E2  1283               	iorwf	3971,f,c	;volatile
  3075                           
  3076                           ;lcddisplay.c: 244: DelayFor18TCY();
  3077  0018E4  EC4A  F00D         	call	_DelayFor18TCY	;wreg free
  3078                           
  3079                           ;lcddisplay.c: 245: LATEbits.LATE2 = 1;
  3080  0018E8  848D               	bsf	3981,2,c	;volatile
  3081                           
  3082                           ;lcddisplay.c: 246: DelayFor18TCY();
  3083  0018EA  EC4A  F00D         	call	_DelayFor18TCY	;wreg free
  3084                           
  3085                           ;lcddisplay.c: 247: LATEbits.LATE2 = 0;
  3086  0018EE  948D               	bcf	3981,2,c	;volatile
  3087                           
  3088                           ;lcddisplay.c: 251: TRISD |= 0x0f;
  3089  0018F0  0E0F               	movlw	15
  3090  0018F2  1295               	iorwf	3989,f,c	;volatile
  3091  0018F4  0012               	return	
  3092                           
  3093                           ;lcddisplay.c: 255: return;
  3094  0018F6  0012               	return		;funcret
  3095  0018F8                     __end_of_WriteCmdLCD:
  3096                           	opt stack 0
  3097                           tblptru	equ	0xFF8
  3098                           tblptrh	equ	0xFF7
  3099                           tblptrl	equ	0xFF6
  3100                           tablat	equ	0xFF5
  3101                           prodh	equ	0xFF4
  3102                           prodl	equ	0xFF3
  3103                           intcon2	equ	0xFF1
  3104                           indf0	equ	0xFEF
  3105                           fsr0h	equ	0xFEA
  3106                           fsr0l	equ	0xFE9
  3107                           indf2	equ	0xFDF
  3108                           postinc2	equ	0xFDE
  3109                           postdec2	equ	0xFDD
  3110                           fsr2h	equ	0xFDA
  3111                           fsr2l	equ	0xFD9
  3112                           status	equ	0xFD8
  3113                           
  3114 ;; *************** function _SetLCDDDRamAddr *****************
  3115 ;; Defined at:
  3116 ;;		line 307 in file "lcddisplay.c"
  3117 ;; Parameters:    Size  Location     Type
  3118 ;;  DDaddr          1    wreg     unsigned char 
  3119 ;; Auto vars:     Size  Location     Type
  3120 ;;  DDaddr          1   35[COMRAM] unsigned char 
  3121 ;; Return value:  Size  Location     Type
  3122 ;;		None               void
  3123 ;; Registers used:
  3124 ;;		wreg, status,2, status,0, cstack
  3125 ;; Tracked objects:
  3126 ;;		On entry : 0/0
  3127 ;;		On exit  : 0/0
  3128 ;;		Unchanged: 0/0
  3129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3130 ;;      Params:         0       0       0       0       0       0       0
  3131 ;;      Locals:         1       0       0       0       0       0       0
  3132 ;;      Temps:          3       0       0       0       0       0       0
  3133 ;;      Totals:         4       0       0       0       0       0       0
  3134 ;;Total ram usage:        4 bytes
  3135 ;; Hardware stack levels used:    1
  3136 ;; Hardware stack levels required when called:    4
  3137 ;; This function calls:
  3138 ;;		_DelayFor18TCY
  3139 ;; This function is called by:
  3140 ;;		_LCDInitialDisplay
  3141 ;;		_LCDUpdate
  3142 ;;		_OpenLCD
  3143 ;; This function uses a non-reentrant model
  3144 ;;
  3145                           
  3146                           	psect	text17
  3147  001788                     __ptext17:
  3148                           	opt stack 0
  3149  001788                     _SetLCDDDRamAddr:
  3150                           	opt stack 25
  3151                           
  3152                           ;incstack = 0
  3153                           ;SetLCDDDRamAddr@DDaddr stored from wreg
  3154  001788  6E24               	movwf	SetLCDDDRamAddr@DDaddr,c
  3155                           
  3156                           ;lcddisplay.c: 326: TRISD &= 0xf0;
  3157  00178A  0EF0               	movlw	240
  3158  00178C  1695               	andwf	3989,f,c	;volatile
  3159                           
  3160                           ;lcddisplay.c: 327: PORTD &= 0xf0;
  3161  00178E  0EF0               	movlw	240
  3162  001790  1683               	andwf	3971,f,c	;volatile
  3163                           
  3164                           ;lcddisplay.c: 328: PORTD |= (((DDaddr | 0b10000000)>>4) & 0x0f);
  3165  001792  5024               	movf	SetLCDDDRamAddr@DDaddr,w,c
  3166  001794  6E21               	movwf	??_SetLCDDDRamAddr& (0+255),c
  3167  001796  6A22               	clrf	(??_SetLCDDDRamAddr+1)& (0+255),c
  3168  001798  8E21               	bsf	??_SetLCDDDRamAddr,7,c
  3169  00179A  0E04               	movlw	4
  3170  00179C  6E23               	movwf	(??_SetLCDDDRamAddr+2)& (0+255),c
  3171  00179E                     u1875:
  3172  00179E  3422               	rlcf	??_SetLCDDDRamAddr+1,w,c
  3173  0017A0  3222               	rrcf	??_SetLCDDDRamAddr+1,f,c
  3174  0017A2  3221               	rrcf	??_SetLCDDDRamAddr,f,c
  3175  0017A4  2E23               	decfsz	(??_SetLCDDDRamAddr+2)& (0+255),f,c
  3176  0017A6  D7FB               	goto	u1875
  3177  0017A8  5021               	movf	??_SetLCDDDRamAddr,w,c
  3178  0017AA  0B0F               	andlw	15
  3179  0017AC  1283               	iorwf	3971,f,c	;volatile
  3180                           
  3181                           ;lcddisplay.c: 330: LATEbits.LATE1 = 0;
  3182  0017AE  928D               	bcf	3981,1,c	;volatile
  3183                           
  3184                           ;lcddisplay.c: 331: LATEbits.LATE0 = 0;
  3185  0017B0  908D               	bcf	3981,0,c	;volatile
  3186                           
  3187                           ;lcddisplay.c: 332: DelayFor18TCY();
  3188  0017B2  EC4A  F00D         	call	_DelayFor18TCY	;wreg free
  3189                           
  3190                           ;lcddisplay.c: 333: LATEbits.LATE2 = 1;
  3191  0017B6  848D               	bsf	3981,2,c	;volatile
  3192                           
  3193                           ;lcddisplay.c: 334: DelayFor18TCY();
  3194  0017B8  EC4A  F00D         	call	_DelayFor18TCY	;wreg free
  3195                           
  3196                           ;lcddisplay.c: 335: LATEbits.LATE2 = 0;
  3197  0017BC  948D               	bcf	3981,2,c	;volatile
  3198                           
  3199                           ;lcddisplay.c: 340: PORTD &= 0xf0;
  3200  0017BE  0EF0               	movlw	240
  3201  0017C0  1683               	andwf	3971,f,c	;volatile
  3202                           
  3203                           ;lcddisplay.c: 341: PORTD |= (DDaddr&0x0f);
  3204  0017C2  5024               	movf	SetLCDDDRamAddr@DDaddr,w,c
  3205  0017C4  0B0F               	andlw	15
  3206  0017C6  1283               	iorwf	3971,f,c	;volatile
  3207                           
  3208                           ;lcddisplay.c: 343: DelayFor18TCY();
  3209  0017C8  EC4A  F00D         	call	_DelayFor18TCY	;wreg free
  3210                           
  3211                           ;lcddisplay.c: 344: LATEbits.LATE2 = 1;
  3212  0017CC  848D               	bsf	3981,2,c	;volatile
  3213                           
  3214                           ;lcddisplay.c: 345: DelayFor18TCY();
  3215  0017CE  EC4A  F00D         	call	_DelayFor18TCY	;wreg free
  3216                           
  3217                           ;lcddisplay.c: 346: LATEbits.LATE2 = 0;
  3218  0017D2  948D               	bcf	3981,2,c	;volatile
  3219                           
  3220                           ;lcddisplay.c: 350: TRISD |= 0x0f;
  3221  0017D4  0E0F               	movlw	15
  3222  0017D6  1295               	iorwf	3989,f,c	;volatile
  3223  0017D8  0012               	return	
  3224                           
  3225                           ;lcddisplay.c: 354: return;
  3226  0017DA  0012               	return		;funcret
  3227  0017DC                     __end_of_SetLCDDDRamAddr:
  3228                           	opt stack 0
  3229                           tblptru	equ	0xFF8
  3230                           tblptrh	equ	0xFF7
  3231                           tblptrl	equ	0xFF6
  3232                           tablat	equ	0xFF5
  3233                           prodh	equ	0xFF4
  3234                           prodl	equ	0xFF3
  3235                           intcon2	equ	0xFF1
  3236                           indf0	equ	0xFEF
  3237                           fsr0h	equ	0xFEA
  3238                           fsr0l	equ	0xFE9
  3239                           indf2	equ	0xFDF
  3240                           postinc2	equ	0xFDE
  3241                           postdec2	equ	0xFDD
  3242                           fsr2h	equ	0xFDA
  3243                           fsr2l	equ	0xFD9
  3244                           status	equ	0xFD8
  3245                           
  3246 ;; *************** function _Delay10KTCYx *****************
  3247 ;; Defined at:
  3248 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d10ktcyx.c"
  3249 ;; Parameters:    Size  Location     Type
  3250 ;;  unit            1    wreg     unsigned char 
  3251 ;; Auto vars:     Size  Location     Type
  3252 ;;  unit            1   32[COMRAM] unsigned char 
  3253 ;; Return value:  Size  Location     Type
  3254 ;;		None               void
  3255 ;; Registers used:
  3256 ;;		wreg
  3257 ;; Tracked objects:
  3258 ;;		On entry : 0/0
  3259 ;;		On exit  : 0/0
  3260 ;;		Unchanged: 0/0
  3261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3262 ;;      Params:         0       0       0       0       0       0       0
  3263 ;;      Locals:         1       0       0       0       0       0       0
  3264 ;;      Temps:          1       0       0       0       0       0       0
  3265 ;;      Totals:         2       0       0       0       0       0       0
  3266 ;;Total ram usage:        2 bytes
  3267 ;; Hardware stack levels used:    1
  3268 ;; Hardware stack levels required when called:    2
  3269 ;; This function calls:
  3270 ;;		Nothing
  3271 ;; This function is called by:
  3272 ;;		_OpenLCD
  3273 ;; This function uses a non-reentrant model
  3274 ;;
  3275                           
  3276                           	psect	text18
  3277  001A1A                     __ptext18:
  3278                           	opt stack 0
  3279  001A1A                     _Delay10KTCYx:
  3280                           	opt stack 26
  3281                           
  3282                           ;incstack = 0
  3283                           ;Delay10KTCYx@unit stored from wreg
  3284  001A1A  6E21               	movwf	Delay10KTCYx@unit,c
  3285  001A1C  0E0D               	movlw	13
  3286  001A1E  6E20               	movwf	??_Delay10KTCYx& (0+255),c
  3287  001A20  0EFC               	movlw	252
  3288  001A22                     u3817:
  3289  001A22  2EE8               	decfsz	wreg,f,c
  3290  001A24  D7FE               	goto	u3817
  3291  001A26  2E20               	decfsz	??_Delay10KTCYx& (0+255),f,c
  3292  001A28  D7FC               	goto	u3817
  3293  001A2A  2E21               	decfsz	Delay10KTCYx@unit,f,c
  3294  001A2C  D7F7               	goto	l2846
  3295  001A2E  0012               	return	
  3296  001A30  0012               	return		;funcret
  3297  001A32                     __end_of_Delay10KTCYx:
  3298                           	opt stack 0
  3299                           tblptru	equ	0xFF8
  3300                           tblptrh	equ	0xFF7
  3301                           tblptrl	equ	0xFF6
  3302                           tablat	equ	0xFF5
  3303                           prodh	equ	0xFF4
  3304                           prodl	equ	0xFF3
  3305                           intcon2	equ	0xFF1
  3306                           indf0	equ	0xFEF
  3307                           fsr0h	equ	0xFEA
  3308                           fsr0l	equ	0xFE9
  3309                           wreg	equ	0xFE8
  3310                           indf2	equ	0xFDF
  3311                           postinc2	equ	0xFDE
  3312                           postdec2	equ	0xFDD
  3313                           fsr2h	equ	0xFDA
  3314                           fsr2l	equ	0xFD9
  3315                           status	equ	0xFD8
  3316                           
  3317 ;; *************** function _Delay100TCYx *****************
  3318 ;; Defined at:
  3319 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d100tcyx.c"
  3320 ;; Parameters:    Size  Location     Type
  3321 ;;  unit            1    wreg     unsigned char 
  3322 ;; Auto vars:     Size  Location     Type
  3323 ;;  unit            1   31[COMRAM] unsigned char 
  3324 ;; Return value:  Size  Location     Type
  3325 ;;		None               void
  3326 ;; Registers used:
  3327 ;;		wreg
  3328 ;; Tracked objects:
  3329 ;;		On entry : 0/0
  3330 ;;		On exit  : 0/0
  3331 ;;		Unchanged: 0/0
  3332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3333 ;;      Params:         0       0       0       0       0       0       0
  3334 ;;      Locals:         1       0       0       0       0       0       0
  3335 ;;      Temps:          0       0       0       0       0       0       0
  3336 ;;      Totals:         1       0       0       0       0       0       0
  3337 ;;Total ram usage:        1 bytes
  3338 ;; Hardware stack levels used:    1
  3339 ;; Hardware stack levels required when called:    2
  3340 ;; This function calls:
  3341 ;;		Nothing
  3342 ;; This function is called by:
  3343 ;;		_OpenLCD
  3344 ;; This function uses a non-reentrant model
  3345 ;;
  3346                           
  3347                           	psect	text19
  3348  001A46                     __ptext19:
  3349                           	opt stack 0
  3350  001A46                     _Delay100TCYx:
  3351                           	opt stack 26
  3352                           
  3353                           ;incstack = 0
  3354                           ;Delay100TCYx@unit stored from wreg
  3355  001A46  6E20               	movwf	Delay100TCYx@unit,c
  3356  001A48  0E21               	movlw	33
  3357  001A4A                     u3827:
  3358  001A4A  2EE8               	decfsz	wreg,f,c
  3359  001A4C  D7FE               	goto	u3827
  3360  001A4E  F000               	nop	
  3361  001A50  2E20               	decfsz	Delay100TCYx@unit,f,c
  3362  001A52  D7FA               	goto	l2842
  3363  001A54  0012               	return	
  3364  001A56  0012               	return		;funcret
  3365  001A58                     __end_of_Delay100TCYx:
  3366                           	opt stack 0
  3367                           tblptru	equ	0xFF8
  3368                           tblptrh	equ	0xFF7
  3369                           tblptrl	equ	0xFF6
  3370                           tablat	equ	0xFF5
  3371                           prodh	equ	0xFF4
  3372                           prodl	equ	0xFF3
  3373                           intcon2	equ	0xFF1
  3374                           indf0	equ	0xFEF
  3375                           fsr0h	equ	0xFEA
  3376                           fsr0l	equ	0xFE9
  3377                           wreg	equ	0xFE8
  3378                           indf2	equ	0xFDF
  3379                           postinc2	equ	0xFDE
  3380                           postdec2	equ	0xFDD
  3381                           fsr2h	equ	0xFDA
  3382                           fsr2l	equ	0xFD9
  3383                           status	equ	0xFD8
  3384                           
  3385 ;; *************** function _BusyXLCD *****************
  3386 ;; Defined at:
  3387 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\XLCD\busyxlcd.c"
  3388 ;; Parameters:    Size  Location     Type
  3389 ;;		None
  3390 ;; Auto vars:     Size  Location     Type
  3391 ;;		None
  3392 ;; Return value:  Size  Location     Type
  3393 ;;                  1    wreg      unsigned char 
  3394 ;; Registers used:
  3395 ;;		wreg, cstack
  3396 ;; Tracked objects:
  3397 ;;		On entry : 0/0
  3398 ;;		On exit  : 0/0
  3399 ;;		Unchanged: 0/0
  3400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3401 ;;      Params:         0       0       0       0       0       0       0
  3402 ;;      Locals:         0       0       0       0       0       0       0
  3403 ;;      Temps:          0       0       0       0       0       0       0
  3404 ;;      Totals:         0       0       0       0       0       0       0
  3405 ;;Total ram usage:        0 bytes
  3406 ;; Hardware stack levels used:    1
  3407 ;; Hardware stack levels required when called:    4
  3408 ;; This function calls:
  3409 ;;		_DelayFor18TCY
  3410 ;; This function is called by:
  3411 ;;		_OpenLCD
  3412 ;; This function uses a non-reentrant model
  3413 ;;
  3414                           
  3415                           	psect	text20
  3416  0018F8                     __ptext20:
  3417                           	opt stack 0
  3418  0018F8                     _BusyXLCD:
  3419                           	opt stack 24
  3420                           
  3421                           ;incstack = 0
  3422  0018F8  8C8A               	bsf	3978,6,c	;volatile
  3423  0018FA  9A8A               	bcf	3978,5,c	;volatile
  3424  0018FC  EC4A  F00D         	call	_DelayFor18TCY	;wreg free
  3425  001900  888A               	bsf	3978,4,c	;volatile
  3426  001902  EC4A  F00D         	call	_DelayFor18TCY	;wreg free
  3427  001906  A681               	btfss	3969,3,c	;volatile
  3428  001908  D00A               	goto	l561
  3429  00190A  988A               	bcf	3978,4,c	;volatile
  3430  00190C  EC4A  F00D         	call	_DelayFor18TCY	;wreg free
  3431  001910  888A               	bsf	3978,4,c	;volatile
  3432  001912  EC4A  F00D         	call	_DelayFor18TCY	;wreg free
  3433  001916  988A               	bcf	3978,4,c	;volatile
  3434  001918  9C8A               	bcf	3978,6,c	;volatile
  3435  00191A  0E01               	movlw	1
  3436  00191C  0012               	return	
  3437  00191E                     l561:
  3438  00191E  988A               	bcf	3978,4,c	;volatile
  3439  001920  EC4A  F00D         	call	_DelayFor18TCY	;wreg free
  3440  001924  888A               	bsf	3978,4,c	;volatile
  3441  001926  EC4A  F00D         	call	_DelayFor18TCY	;wreg free
  3442  00192A  988A               	bcf	3978,4,c	;volatile
  3443  00192C  9C8A               	bcf	3978,6,c	;volatile
  3444  00192E  0E00               	movlw	0
  3445  001930  0012               	return	
  3446  001932  0012               	return		;funcret
  3447  001934                     __end_of_BusyXLCD:
  3448                           	opt stack 0
  3449                           tblptru	equ	0xFF8
  3450                           tblptrh	equ	0xFF7
  3451                           tblptrl	equ	0xFF6
  3452                           tablat	equ	0xFF5
  3453                           prodh	equ	0xFF4
  3454                           prodl	equ	0xFF3
  3455                           intcon2	equ	0xFF1
  3456                           indf0	equ	0xFEF
  3457                           fsr0h	equ	0xFEA
  3458                           fsr0l	equ	0xFE9
  3459                           wreg	equ	0xFE8
  3460                           indf2	equ	0xFDF
  3461                           postinc2	equ	0xFDE
  3462                           postdec2	equ	0xFDD
  3463                           fsr2h	equ	0xFDA
  3464                           fsr2l	equ	0xFD9
  3465                           status	equ	0xFD8
  3466                           
  3467 ;; *************** function _BusyLCD *****************
  3468 ;; Defined at:
  3469 ;;		line 258 in file "lcddisplay.c"
  3470 ;; Parameters:    Size  Location     Type
  3471 ;;		None
  3472 ;; Auto vars:     Size  Location     Type
  3473 ;;		None
  3474 ;; Return value:  Size  Location     Type
  3475 ;;                  1    wreg      unsigned char 
  3476 ;; Registers used:
  3477 ;;		wreg, cstack
  3478 ;; Tracked objects:
  3479 ;;		On entry : 0/0
  3480 ;;		On exit  : 0/0
  3481 ;;		Unchanged: 0/0
  3482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3483 ;;      Params:         0       0       0       0       0       0       0
  3484 ;;      Locals:         0       0       0       0       0       0       0
  3485 ;;      Temps:          0       0       0       0       0       0       0
  3486 ;;      Totals:         0       0       0       0       0       0       0
  3487 ;;Total ram usage:        0 bytes
  3488 ;; Hardware stack levels used:    1
  3489 ;; Hardware stack levels required when called:    4
  3490 ;; This function calls:
  3491 ;;		_DelayFor18TCY
  3492 ;; This function is called by:
  3493 ;;		_LCDInitialDisplay
  3494 ;;		_LCDUpdate
  3495 ;;		_InitLCD
  3496 ;;		_OpenLCD
  3497 ;;		_putLCD
  3498 ;; This function uses a non-reentrant model
  3499 ;;
  3500                           
  3501                           	psect	text21
  3502  001934                     __ptext21:
  3503                           	opt stack 0
  3504  001934                     _BusyLCD:
  3505                           	opt stack 24
  3506                           
  3507                           ;lcddisplay.c: 260: LATEbits.LATE1 = 1;
  3508                           
  3509                           ;incstack = 0
  3510  001934  828D               	bsf	3981,1,c	;volatile
  3511                           
  3512                           ;lcddisplay.c: 261: LATEbits.LATE0 = 0;
  3513  001936  908D               	bcf	3981,0,c	;volatile
  3514                           
  3515                           ;lcddisplay.c: 262: DelayFor18TCY();
  3516  001938  EC4A  F00D         	call	_DelayFor18TCY	;wreg free
  3517                           
  3518                           ;lcddisplay.c: 263: LATEbits.LATE2 = 1;
  3519  00193C  848D               	bsf	3981,2,c	;volatile
  3520                           
  3521                           ;lcddisplay.c: 264: DelayFor18TCY();
  3522  00193E  EC4A  F00D         	call	_DelayFor18TCY	;wreg free
  3523                           
  3524                           ;lcddisplay.c: 282: if(PORTD&0x08)
  3525  001942  A683               	btfss	3971,3,c	;volatile
  3526  001944  D00A               	goto	l472
  3527                           
  3528                           ;lcddisplay.c: 284: {
  3529                           ;lcddisplay.c: 285: LATEbits.LATE2 = 0;
  3530  001946  948D               	bcf	3981,2,c	;volatile
  3531                           
  3532                           ;lcddisplay.c: 286: DelayFor18TCY();
  3533  001948  EC4A  F00D         	call	_DelayFor18TCY	;wreg free
  3534                           
  3535                           ;lcddisplay.c: 287: LATEbits.LATE2 = 1;
  3536  00194C  848D               	bsf	3981,2,c	;volatile
  3537                           
  3538                           ;lcddisplay.c: 288: DelayFor18TCY();
  3539  00194E  EC4A  F00D         	call	_DelayFor18TCY	;wreg free
  3540                           
  3541                           ;lcddisplay.c: 289: LATEbits.LATE2 = 0;
  3542  001952  948D               	bcf	3981,2,c	;volatile
  3543                           
  3544                           ;lcddisplay.c: 290: LATEbits.LATE1 = 0;
  3545  001954  928D               	bcf	3981,1,c	;volatile
  3546                           
  3547                           ;lcddisplay.c: 291: return 1;
  3548  001956  0E01               	movlw	1
  3549                           
  3550                           ;lcddisplay.c: 292: }
  3551  001958  0012               	return	
  3552  00195A                     l472:
  3553                           
  3554                           ;lcddisplay.c: 293: else
  3555                           ;lcddisplay.c: 294: {
  3556                           ;lcddisplay.c: 295: LATEbits.LATE2 = 0;
  3557  00195A  948D               	bcf	3981,2,c	;volatile
  3558                           
  3559                           ;lcddisplay.c: 296: DelayFor18TCY();
  3560  00195C  EC4A  F00D         	call	_DelayFor18TCY	;wreg free
  3561                           
  3562                           ;lcddisplay.c: 297: LATEbits.LATE2 = 1;
  3563  001960  848D               	bsf	3981,2,c	;volatile
  3564                           
  3565                           ;lcddisplay.c: 298: DelayFor18TCY();
  3566  001962  EC4A  F00D         	call	_DelayFor18TCY	;wreg free
  3567                           
  3568                           ;lcddisplay.c: 299: LATEbits.LATE2 = 0;
  3569  001966  948D               	bcf	3981,2,c	;volatile
  3570                           
  3571                           ;lcddisplay.c: 300: LATEbits.LATE1 = 0;
  3572  001968  928D               	bcf	3981,1,c	;volatile
  3573                           
  3574                           ;lcddisplay.c: 301: return 0;
  3575  00196A  0E00               	movlw	0
  3576  00196C  0012               	return	
  3577  00196E  0012               	return		;funcret
  3578  001970                     __end_of_BusyLCD:
  3579                           	opt stack 0
  3580                           tblptru	equ	0xFF8
  3581                           tblptrh	equ	0xFF7
  3582                           tblptrl	equ	0xFF6
  3583                           tablat	equ	0xFF5
  3584                           prodh	equ	0xFF4
  3585                           prodl	equ	0xFF3
  3586                           intcon2	equ	0xFF1
  3587                           indf0	equ	0xFEF
  3588                           fsr0h	equ	0xFEA
  3589                           fsr0l	equ	0xFE9
  3590                           wreg	equ	0xFE8
  3591                           indf2	equ	0xFDF
  3592                           postinc2	equ	0xFDE
  3593                           postdec2	equ	0xFDD
  3594                           fsr2h	equ	0xFDA
  3595                           fsr2l	equ	0xFD9
  3596                           status	equ	0xFD8
  3597                           
  3598 ;; *************** function _DelayFor18TCY *****************
  3599 ;; Defined at:
  3600 ;;		line 89 in file "lcddisplay.c"
  3601 ;; Parameters:    Size  Location     Type
  3602 ;;		None
  3603 ;; Auto vars:     Size  Location     Type
  3604 ;;		None
  3605 ;; Return value:  Size  Location     Type
  3606 ;;		None               void
  3607 ;; Registers used:
  3608 ;;		wreg, cstack
  3609 ;; Tracked objects:
  3610 ;;		On entry : 0/0
  3611 ;;		On exit  : 0/0
  3612 ;;		Unchanged: 0/0
  3613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3614 ;;      Params:         0       0       0       0       0       0       0
  3615 ;;      Locals:         0       0       0       0       0       0       0
  3616 ;;      Temps:          0       0       0       0       0       0       0
  3617 ;;      Totals:         0       0       0       0       0       0       0
  3618 ;;Total ram usage:        0 bytes
  3619 ;; Hardware stack levels used:    1
  3620 ;; Hardware stack levels required when called:    3
  3621 ;; This function calls:
  3622 ;;		_Delay1TCYx
  3623 ;; This function is called by:
  3624 ;;		_WriteCmdLCD
  3625 ;;		_BusyLCD
  3626 ;;		_SetLCDDDRamAddr
  3627 ;;		_SetLCDCGRamAddr
  3628 ;;		_WriteDataLCD
  3629 ;;		_BusyXLCD
  3630 ;; This function uses a non-reentrant model
  3631 ;;
  3632                           
  3633                           	psect	text22
  3634  001A94                     __ptext22:
  3635                           	opt stack 0
  3636  001A94                     _DelayFor18TCY:
  3637                           	opt stack 24
  3638                           
  3639                           ;lcddisplay.c: 91: Delay1TCYx(18);
  3640                           
  3641                           ;incstack = 0
  3642  001A94  0E12               	movlw	18
  3643  001A96  EC44  F00D         	call	_Delay1TCYx
  3644  001A9A  0012               	return		;funcret
  3645  001A9C                     __end_of_DelayFor18TCY:
  3646                           	opt stack 0
  3647                           tblptru	equ	0xFF8
  3648                           tblptrh	equ	0xFF7
  3649                           tblptrl	equ	0xFF6
  3650                           tablat	equ	0xFF5
  3651                           prodh	equ	0xFF4
  3652                           prodl	equ	0xFF3
  3653                           intcon2	equ	0xFF1
  3654                           indf0	equ	0xFEF
  3655                           fsr0h	equ	0xFEA
  3656                           fsr0l	equ	0xFE9
  3657                           wreg	equ	0xFE8
  3658                           indf2	equ	0xFDF
  3659                           postinc2	equ	0xFDE
  3660                           postdec2	equ	0xFDD
  3661                           fsr2h	equ	0xFDA
  3662                           fsr2l	equ	0xFD9
  3663                           status	equ	0xFD8
  3664                           
  3665 ;; *************** function _Delay1TCYx *****************
  3666 ;; Defined at:
  3667 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d1tcyx.c"
  3668 ;; Parameters:    Size  Location     Type
  3669 ;;  unit            1    wreg     unsigned char 
  3670 ;; Auto vars:     Size  Location     Type
  3671 ;;  unit            1   31[COMRAM] unsigned char 
  3672 ;; Return value:  Size  Location     Type
  3673 ;;		None               void
  3674 ;; Registers used:
  3675 ;;		wreg
  3676 ;; Tracked objects:
  3677 ;;		On entry : 0/0
  3678 ;;		On exit  : 0/0
  3679 ;;		Unchanged: 0/0
  3680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3681 ;;      Params:         0       0       0       0       0       0       0
  3682 ;;      Locals:         1       0       0       0       0       0       0
  3683 ;;      Temps:          0       0       0       0       0       0       0
  3684 ;;      Totals:         1       0       0       0       0       0       0
  3685 ;;Total ram usage:        1 bytes
  3686 ;; Hardware stack levels used:    1
  3687 ;; Hardware stack levels required when called:    2
  3688 ;; This function calls:
  3689 ;;		Nothing
  3690 ;; This function is called by:
  3691 ;;		_DelayFor18TCY
  3692 ;; This function uses a non-reentrant model
  3693 ;;
  3694                           
  3695                           	psect	text23
  3696  001A88                     __ptext23:
  3697                           	opt stack 0
  3698  001A88                     _Delay1TCYx:
  3699                           	opt stack 24
  3700                           
  3701                           ;incstack = 0
  3702                           ;Delay1TCYx@unit stored from wreg
  3703  001A88  6E20               	movwf	Delay1TCYx@unit,c
  3704  001A8A                     l810:
  3705  001A8A  F000               	nop	
  3706  001A8C  2E20               	decfsz	Delay1TCYx@unit,f,c
  3707  001A8E  D7FD               	goto	l810
  3708  001A90  0012               	return	
  3709  001A92  0012               	return		;funcret
  3710  001A94                     __end_of_Delay1TCYx:
  3711                           	opt stack 0
  3712                           tblptru	equ	0xFF8
  3713                           tblptrh	equ	0xFF7
  3714                           tblptrl	equ	0xFF6
  3715                           tablat	equ	0xFF5
  3716                           prodh	equ	0xFF4
  3717                           prodl	equ	0xFF3
  3718                           intcon2	equ	0xFF1
  3719                           indf0	equ	0xFEF
  3720                           fsr0h	equ	0xFEA
  3721                           fsr0l	equ	0xFE9
  3722                           wreg	equ	0xFE8
  3723                           indf2	equ	0xFDF
  3724                           postinc2	equ	0xFDE
  3725                           postdec2	equ	0xFDD
  3726                           fsr2h	equ	0xFDA
  3727                           fsr2l	equ	0xFD9
  3728                           status	equ	0xFD8
  3729                           
  3730 ;; *************** function _InitInterrupts *****************
  3731 ;; Defined at:
  3732 ;;		line 93 in file "ports.c"
  3733 ;; Parameters:    Size  Location     Type
  3734 ;;		None
  3735 ;; Auto vars:     Size  Location     Type
  3736 ;;		None
  3737 ;; Return value:  Size  Location     Type
  3738 ;;		None               void
  3739 ;; Registers used:
  3740 ;;		wreg, status,2
  3741 ;; Tracked objects:
  3742 ;;		On entry : 0/0
  3743 ;;		On exit  : 0/0
  3744 ;;		Unchanged: 0/0
  3745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3746 ;;      Params:         0       0       0       0       0       0       0
  3747 ;;      Locals:         0       0       0       0       0       0       0
  3748 ;;      Temps:          0       0       0       0       0       0       0
  3749 ;;      Totals:         0       0       0       0       0       0       0
  3750 ;;Total ram usage:        0 bytes
  3751 ;; Hardware stack levels used:    1
  3752 ;; Hardware stack levels required when called:    2
  3753 ;; This function calls:
  3754 ;;		Nothing
  3755 ;; This function is called by:
  3756 ;;		_main
  3757 ;; This function uses a non-reentrant model
  3758 ;;
  3759                           
  3760                           	psect	text24
  3761  0019FC                     __ptext24:
  3762                           	opt stack 0
  3763  0019FC                     _InitInterrupts:
  3764                           	opt stack 28
  3765                           
  3766                           ;ports.c: 96: INTCON2bits.INTEDG0 = 0;
  3767                           
  3768                           ;incstack = 0
  3769  0019FC  9CF1               	bcf	intcon2,6,c	;volatile
  3770                           
  3771                           ;ports.c: 97: INTCONbits.INT0IF = 0;
  3772  0019FE  92F2               	bcf	intcon,1,c	;volatile
  3773                           
  3774                           ;ports.c: 98: INTCONbits.INT0IE = 1;
  3775  001A00  88F2               	bsf	intcon,4,c	;volatile
  3776                           
  3777                           ;ports.c: 103: INTCONbits.TMR0IF = 0;
  3778  001A02  94F2               	bcf	intcon,2,c	;volatile
  3779                           
  3780                           ;ports.c: 104: INTCON2bits.TMR0IP = 1;
  3781  001A04  84F1               	bsf	intcon2,2,c	;volatile
  3782                           
  3783                           ;ports.c: 105: INTCONbits.TMR0IE = 1;
  3784  001A06  8AF2               	bsf	intcon,5,c	;volatile
  3785                           
  3786                           ;ports.c: 107: T0CON = 0b000000000;
  3787  001A08  0E00               	movlw	0
  3788  001A0A  6ED5               	movwf	4053,c	;volatile
  3789                           
  3790                           ;ports.c: 108: T0CONbits.T08BIT = 0;
  3791  001A0C  9CD5               	bcf	4053,6,c	;volatile
  3792                           
  3793                           ;ports.c: 109: T0CONbits.T0CS = 0;
  3794  001A0E  9AD5               	bcf	4053,5,c	;volatile
  3795                           
  3796                           ;ports.c: 110: T0CONbits.PSA = 1;
  3797  001A10  86D5               	bsf	4053,3,c	;volatile
  3798                           
  3799                           ;ports.c: 113: RCONbits.IPEN = 1;
  3800  001A12  8ED0               	bsf	4048,7,c	;volatile
  3801                           
  3802                           ;ports.c: 114: INTCONbits.GIEL = 1;
  3803  001A14  8CF2               	bsf	intcon,6,c	;volatile
  3804                           
  3805                           ;ports.c: 115: INTCONbits.GIEH = 1;
  3806  001A16  8EF2               	bsf	intcon,7,c	;volatile
  3807  001A18  0012               	return		;funcret
  3808  001A1A                     __end_of_InitInterrupts:
  3809                           	opt stack 0
  3810                           tblptru	equ	0xFF8
  3811                           tblptrh	equ	0xFF7
  3812                           tblptrl	equ	0xFF6
  3813                           tablat	equ	0xFF5
  3814                           prodh	equ	0xFF4
  3815                           prodl	equ	0xFF3
  3816                           intcon	equ	0xFF2
  3817                           intcon2	equ	0xFF1
  3818                           indf0	equ	0xFEF
  3819                           fsr0h	equ	0xFEA
  3820                           fsr0l	equ	0xFE9
  3821                           wreg	equ	0xFE8
  3822                           indf2	equ	0xFDF
  3823                           postinc2	equ	0xFDE
  3824                           postdec2	equ	0xFDD
  3825                           fsr2h	equ	0xFDA
  3826                           fsr2l	equ	0xFD9
  3827                           status	equ	0xFD8
  3828                           
  3829 ;; *************** function _InitAnalogueInputs *****************
  3830 ;; Defined at:
  3831 ;;		line 132 in file "ports.c"
  3832 ;; Parameters:    Size  Location     Type
  3833 ;;		None
  3834 ;; Auto vars:     Size  Location     Type
  3835 ;;		None
  3836 ;; Return value:  Size  Location     Type
  3837 ;;		None               void
  3838 ;; Registers used:
  3839 ;;		wreg, status,2
  3840 ;; Tracked objects:
  3841 ;;		On entry : 0/0
  3842 ;;		On exit  : 0/0
  3843 ;;		Unchanged: 0/0
  3844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3845 ;;      Params:         0       0       0       0       0       0       0
  3846 ;;      Locals:         0       0       0       0       0       0       0
  3847 ;;      Temps:          0       0       0       0       0       0       0
  3848 ;;      Totals:         0       0       0       0       0       0       0
  3849 ;;Total ram usage:        0 bytes
  3850 ;; Hardware stack levels used:    1
  3851 ;; Hardware stack levels required when called:    2
  3852 ;; This function calls:
  3853 ;;		Nothing
  3854 ;; This function is called by:
  3855 ;;		_main
  3856 ;; This function uses a non-reentrant model
  3857 ;;
  3858                           
  3859                           	psect	text25
  3860  001A32                     __ptext25:
  3861                           	opt stack 0
  3862  001A32                     _InitAnalogueInputs:
  3863                           	opt stack 28
  3864                           
  3865                           ;ports.c: 135: TRISAbits.TRISA0 = 1;
  3866                           
  3867                           ;incstack = 0
  3868  001A32  8092               	bsf	3986,0,c	;volatile
  3869                           
  3870                           ;ports.c: 144: ANSEL = 0b00000001;
  3871  001A34  0E01               	movlw	1
  3872  001A36  6E7E               	movwf	3966,c	;volatile
  3873                           
  3874                           ;ports.c: 147: ADCON1 = 0b00000000;
  3875  001A38  0E00               	movlw	0
  3876  001A3A  6EC1               	movwf	4033,c	;volatile
  3877                           
  3878                           ;ports.c: 148: ADCON2 = 0b00111000;
  3879  001A3C  0E38               	movlw	56
  3880  001A3E  6EC0               	movwf	4032,c	;volatile
  3881                           
  3882                           ;ports.c: 166: ADCON0 = 0b00000001;
  3883  001A40  0E01               	movlw	1
  3884  001A42  6EC2               	movwf	4034,c	;volatile
  3885  001A44  0012               	return		;funcret
  3886  001A46                     __end_of_InitAnalogueInputs:
  3887                           	opt stack 0
  3888                           tblptru	equ	0xFF8
  3889                           tblptrh	equ	0xFF7
  3890                           tblptrl	equ	0xFF6
  3891                           tablat	equ	0xFF5
  3892                           prodh	equ	0xFF4
  3893                           prodl	equ	0xFF3
  3894                           intcon	equ	0xFF2
  3895                           intcon2	equ	0xFF1
  3896                           indf0	equ	0xFEF
  3897                           fsr0h	equ	0xFEA
  3898                           fsr0l	equ	0xFE9
  3899                           wreg	equ	0xFE8
  3900                           indf2	equ	0xFDF
  3901                           postinc2	equ	0xFDE
  3902                           postdec2	equ	0xFDD
  3903                           fsr2h	equ	0xFDA
  3904                           fsr2l	equ	0xFD9
  3905                           status	equ	0xFD8
  3906                           
  3907 ;; *************** function _Delay1KTCYx *****************
  3908 ;; Defined at:
  3909 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d1ktcyx.c"
  3910 ;; Parameters:    Size  Location     Type
  3911 ;;  unit            1    wreg     unsigned char 
  3912 ;; Auto vars:     Size  Location     Type
  3913 ;;  unit            1   31[COMRAM] unsigned char 
  3914 ;; Return value:  Size  Location     Type
  3915 ;;		None               void
  3916 ;; Registers used:
  3917 ;;		wreg
  3918 ;; Tracked objects:
  3919 ;;		On entry : 0/0
  3920 ;;		On exit  : 0/0
  3921 ;;		Unchanged: 0/0
  3922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3923 ;;      Params:         0       0       0       0       0       0       0
  3924 ;;      Locals:         1       0       0       0       0       0       0
  3925 ;;      Temps:          0       0       0       0       0       0       0
  3926 ;;      Totals:         1       0       0       0       0       0       0
  3927 ;;Total ram usage:        1 bytes
  3928 ;; Hardware stack levels used:    1
  3929 ;; Hardware stack levels required when called:    2
  3930 ;; This function calls:
  3931 ;;		Nothing
  3932 ;; This function is called by:
  3933 ;;		_main
  3934 ;; This function uses a non-reentrant model
  3935 ;;
  3936                           
  3937                           	psect	text26
  3938  001A58                     __ptext26:
  3939                           	opt stack 0
  3940  001A58                     _Delay1KTCYx:
  3941                           	opt stack 28
  3942                           
  3943                           ;incstack = 0
  3944                           ;Delay1KTCYx@unit stored from wreg
  3945  001A58  6E20               	movwf	Delay1KTCYx@unit,c
  3946  001A5A  0EFA               	movlw	250
  3947  001A5C                     u3837:
  3948  001A5C  F000               	nop	
  3949  001A5E  2EE8               	decfsz	wreg,f,c
  3950  001A60  D7FD               	goto	u3837
  3951  001A62  2E20               	decfsz	Delay1KTCYx@unit,f,c
  3952  001A64  D7FA               	goto	l4062
  3953  001A66  0012               	return	
  3954  001A68  0012               	return		;funcret
  3955  001A6A                     __end_of_Delay1KTCYx:
  3956                           	opt stack 0
  3957                           tblptru	equ	0xFF8
  3958                           tblptrh	equ	0xFF7
  3959                           tblptrl	equ	0xFF6
  3960                           tablat	equ	0xFF5
  3961                           prodh	equ	0xFF4
  3962                           prodl	equ	0xFF3
  3963                           intcon	equ	0xFF2
  3964                           intcon2	equ	0xFF1
  3965                           indf0	equ	0xFEF
  3966                           fsr0h	equ	0xFEA
  3967                           fsr0l	equ	0xFE9
  3968                           wreg	equ	0xFE8
  3969                           indf2	equ	0xFDF
  3970                           postinc2	equ	0xFDE
  3971                           postdec2	equ	0xFDD
  3972                           fsr2h	equ	0xFDA
  3973                           fsr2l	equ	0xFD9
  3974                           status	equ	0xFD8
  3975                           
  3976 ;; *************** function _ConvertTimerOverflowToWheelRPM *****************
  3977 ;; Defined at:
  3978 ;;		line 276 in file "main.c"
  3979 ;; Parameters:    Size  Location     Type
  3980 ;;		None
  3981 ;; Auto vars:     Size  Location     Type
  3982 ;;		None
  3983 ;; Return value:  Size  Location     Type
  3984 ;;                  2   31[COMRAM] unsigned short 
  3985 ;; Registers used:
  3986 ;;		wreg, status,2, status,0
  3987 ;; Tracked objects:
  3988 ;;		On entry : 0/0
  3989 ;;		On exit  : 0/0
  3990 ;;		Unchanged: 0/0
  3991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3992 ;;      Params:         2       0       0       0       0       0       0
  3993 ;;      Locals:         0       0       0       0       0       0       0
  3994 ;;      Temps:          0       0       0       0       0       0       0
  3995 ;;      Totals:         2       0       0       0       0       0       0
  3996 ;;Total ram usage:        2 bytes
  3997 ;; Hardware stack levels used:    1
  3998 ;; Hardware stack levels required when called:    2
  3999 ;; This function calls:
  4000 ;;		Nothing
  4001 ;; This function is called by:
  4002 ;;		_main
  4003 ;; This function uses a non-reentrant model
  4004 ;;
  4005                           
  4006                           	psect	text27
  4007  000650                     __ptext27:
  4008                           	opt stack 0
  4009  000650                     _ConvertTimerOverflowToWheelRPM:
  4010                           	opt stack 28
  4011                           
  4012                           ;main.c: 277: if (TimerCounterAtOverflow > 3003) {
  4013                           
  4014                           ;incstack = 0
  4015  000650  0EBC               	movlw	188
  4016  000652  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4017  000654  0E0B               	movlw	11
  4018  000656  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4019  000658  A0D8               	btfss	status,0,c
  4020  00065A  D005               	goto	l3174
  4021                           
  4022                           ;main.c: 278: return 0;
  4023  00065C  0E00               	movlw	0
  4024  00065E  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4025  000660  0E00               	movlw	0
  4026  000662  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4027                           
  4028                           ;main.c: 279: } else if (TimerCounterAtOverflow <=93) {
  4029  000664  0012               	return	
  4030  000666                     l3174:
  4031  000666  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4032  000668  E109               	bnz	l3182
  4033  00066A  0E5E               	movlw	94
  4034  00066C  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4035  00066E  B0D8               	btfsc	status,0,c
  4036  000670  D005               	goto	l3182
  4037                           
  4038                           ;main.c: 280: return 1300;
  4039  000672  0E05               	movlw	5
  4040  000674  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4041  000676  0E14               	movlw	20
  4042  000678  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4043                           
  4044                           ;main.c: 281: } else if (TimerCounterAtOverflow <=96) {
  4045  00067A  0012               	return	
  4046  00067C                     l3182:
  4047  00067C  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4048  00067E  E109               	bnz	l3190
  4049  000680  0E61               	movlw	97
  4050  000682  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4051  000684  B0D8               	btfsc	status,0,c
  4052  000686  D005               	goto	l3190
  4053                           
  4054                           ;main.c: 282: return 1250;
  4055  000688  0E04               	movlw	4
  4056  00068A  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4057  00068C  0EE2               	movlw	226
  4058  00068E  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4059                           
  4060                           ;main.c: 283: } else if (TimerCounterAtOverflow <=100) {
  4061  000690  0012               	return	
  4062  000692                     l3190:
  4063  000692  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4064  000694  E109               	bnz	l3198
  4065  000696  0E65               	movlw	101
  4066  000698  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4067  00069A  B0D8               	btfsc	status,0,c
  4068  00069C  D005               	goto	l3198
  4069                           
  4070                           ;main.c: 284: return 1200;
  4071  00069E  0E04               	movlw	4
  4072  0006A0  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4073  0006A2  0EB0               	movlw	176
  4074  0006A4  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4075                           
  4076                           ;main.c: 285: } else if (TimerCounterAtOverflow <=104) {
  4077  0006A6  0012               	return	
  4078  0006A8                     l3198:
  4079  0006A8  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4080  0006AA  E109               	bnz	l3206
  4081  0006AC  0E69               	movlw	105
  4082  0006AE  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4083  0006B0  B0D8               	btfsc	status,0,c
  4084  0006B2  D005               	goto	l3206
  4085                           
  4086                           ;main.c: 286: return 1150;
  4087  0006B4  0E04               	movlw	4
  4088  0006B6  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4089  0006B8  0E7E               	movlw	126
  4090  0006BA  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4091                           
  4092                           ;main.c: 287: } else if (TimerCounterAtOverflow <=109) {
  4093  0006BC  0012               	return	
  4094  0006BE                     l3206:
  4095  0006BE  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4096  0006C0  E109               	bnz	l3214
  4097  0006C2  0E6E               	movlw	110
  4098  0006C4  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4099  0006C6  B0D8               	btfsc	status,0,c
  4100  0006C8  D005               	goto	l3214
  4101                           
  4102                           ;main.c: 288: return 1100;
  4103  0006CA  0E04               	movlw	4
  4104  0006CC  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4105  0006CE  0E4C               	movlw	76
  4106  0006D0  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4107                           
  4108                           ;main.c: 289: } else if (TimerCounterAtOverflow <=114) {
  4109  0006D2  0012               	return	
  4110  0006D4                     l3214:
  4111  0006D4  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4112  0006D6  E109               	bnz	l3222
  4113  0006D8  0E73               	movlw	115
  4114  0006DA  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4115  0006DC  B0D8               	btfsc	status,0,c
  4116  0006DE  D005               	goto	l3222
  4117                           
  4118                           ;main.c: 290: return 1050;
  4119  0006E0  0E04               	movlw	4
  4120  0006E2  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4121  0006E4  0E1A               	movlw	26
  4122  0006E6  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4123                           
  4124                           ;main.c: 291: } else if (TimerCounterAtOverflow <=120) {
  4125  0006E8  0012               	return	
  4126  0006EA                     l3222:
  4127  0006EA  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4128  0006EC  E109               	bnz	l3230
  4129  0006EE  0E79               	movlw	121
  4130  0006F0  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4131  0006F2  B0D8               	btfsc	status,0,c
  4132  0006F4  D005               	goto	l3230
  4133                           
  4134                           ;main.c: 292: return 1000;
  4135  0006F6  0E03               	movlw	3
  4136  0006F8  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4137  0006FA  0EE8               	movlw	232
  4138  0006FC  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4139                           
  4140                           ;main.c: 293: } else if (TimerCounterAtOverflow <=126) {
  4141  0006FE  0012               	return	
  4142  000700                     l3230:
  4143  000700  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4144  000702  E109               	bnz	l3238
  4145  000704  0E7F               	movlw	127
  4146  000706  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4147  000708  B0D8               	btfsc	status,0,c
  4148  00070A  D005               	goto	l3238
  4149                           
  4150                           ;main.c: 294: return 950;
  4151  00070C  0E03               	movlw	3
  4152  00070E  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4153  000710  0EB6               	movlw	182
  4154  000712  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4155                           
  4156                           ;main.c: 295: } else if (TimerCounterAtOverflow <=133) {
  4157  000714  0012               	return	
  4158  000716                     l3238:
  4159  000716  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4160  000718  E109               	bnz	l3246
  4161  00071A  0E86               	movlw	134
  4162  00071C  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4163  00071E  B0D8               	btfsc	status,0,c
  4164  000720  D005               	goto	l3246
  4165                           
  4166                           ;main.c: 296: return 900;
  4167  000722  0E03               	movlw	3
  4168  000724  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4169  000726  0E84               	movlw	132
  4170  000728  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4171                           
  4172                           ;main.c: 297: } else if (TimerCounterAtOverflow <=141) {
  4173  00072A  0012               	return	
  4174  00072C                     l3246:
  4175  00072C  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4176  00072E  E109               	bnz	l3254
  4177  000730  0E8E               	movlw	142
  4178  000732  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4179  000734  B0D8               	btfsc	status,0,c
  4180  000736  D005               	goto	l3254
  4181                           
  4182                           ;main.c: 298: return 850;
  4183  000738  0E03               	movlw	3
  4184  00073A  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4185  00073C  0E52               	movlw	82
  4186  00073E  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4187                           
  4188                           ;main.c: 299: } else if (TimerCounterAtOverflow <=150) {
  4189  000740  0012               	return	
  4190  000742                     l3254:
  4191  000742  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4192  000744  E109               	bnz	l3262
  4193  000746  0E97               	movlw	151
  4194  000748  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4195  00074A  B0D8               	btfsc	status,0,c
  4196  00074C  D005               	goto	l3262
  4197                           
  4198                           ;main.c: 300: return 800;
  4199  00074E  0E03               	movlw	3
  4200  000750  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4201  000752  0E20               	movlw	32
  4202  000754  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4203                           
  4204                           ;main.c: 301: } else if (TimerCounterAtOverflow <=160) {
  4205  000756  0012               	return	
  4206  000758                     l3262:
  4207  000758  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4208  00075A  E109               	bnz	l3270
  4209  00075C  0EA1               	movlw	161
  4210  00075E  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4211  000760  B0D8               	btfsc	status,0,c
  4212  000762  D005               	goto	l3270
  4213                           
  4214                           ;main.c: 302: return 750;
  4215  000764  0E02               	movlw	2
  4216  000766  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4217  000768  0EEE               	movlw	238
  4218  00076A  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4219                           
  4220                           ;main.c: 303: } else if (TimerCounterAtOverflow <=171) {
  4221  00076C  0012               	return	
  4222  00076E                     l3270:
  4223  00076E  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4224  000770  E109               	bnz	l3278
  4225  000772  0EAC               	movlw	172
  4226  000774  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4227  000776  B0D8               	btfsc	status,0,c
  4228  000778  D005               	goto	l3278
  4229                           
  4230                           ;main.c: 304: return 660;
  4231  00077A  0E02               	movlw	2
  4232  00077C  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4233  00077E  0E94               	movlw	148
  4234  000780  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4235                           
  4236                           ;main.c: 305: } else if (TimerCounterAtOverflow <=185) {
  4237  000782  0012               	return	
  4238  000784                     l3278:
  4239  000784  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4240  000786  E109               	bnz	l3286
  4241  000788  0EBA               	movlw	186
  4242  00078A  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4243  00078C  B0D8               	btfsc	status,0,c
  4244  00078E  D005               	goto	l3286
  4245                           
  4246                           ;main.c: 306: return 650;
  4247  000790  0E02               	movlw	2
  4248  000792  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4249  000794  0E8A               	movlw	138
  4250  000796  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4251                           
  4252                           ;main.c: 307: } else if (TimerCounterAtOverflow <=187) {
  4253  000798  0012               	return	
  4254  00079A                     l3286:
  4255  00079A  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4256  00079C  E109               	bnz	l3294
  4257  00079E  0EBC               	movlw	188
  4258  0007A0  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4259  0007A2  B0D8               	btfsc	status,0,c
  4260  0007A4  D005               	goto	l3294
  4261                           
  4262                           ;main.c: 308: return 640;
  4263  0007A6  0E02               	movlw	2
  4264  0007A8  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4265  0007AA  0E80               	movlw	128
  4266  0007AC  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4267                           
  4268                           ;main.c: 309: } else if (TimerCounterAtOverflow <=190) {
  4269  0007AE  0012               	return	
  4270  0007B0                     l3294:
  4271  0007B0  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4272  0007B2  E109               	bnz	l3302
  4273  0007B4  0EBF               	movlw	191
  4274  0007B6  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4275  0007B8  B0D8               	btfsc	status,0,c
  4276  0007BA  D005               	goto	l3302
  4277                           
  4278                           ;main.c: 310: return 630;
  4279  0007BC  0E02               	movlw	2
  4280  0007BE  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4281  0007C0  0E76               	movlw	118
  4282  0007C2  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4283                           
  4284                           ;main.c: 311: } else if (TimerCounterAtOverflow <=193) {
  4285  0007C4  0012               	return	
  4286  0007C6                     l3302:
  4287  0007C6  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4288  0007C8  E109               	bnz	l3310
  4289  0007CA  0EC2               	movlw	194
  4290  0007CC  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4291  0007CE  B0D8               	btfsc	status,0,c
  4292  0007D0  D005               	goto	l3310
  4293                           
  4294                           ;main.c: 312: return 620;
  4295  0007D2  0E02               	movlw	2
  4296  0007D4  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4297  0007D6  0E6C               	movlw	108
  4298  0007D8  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4299                           
  4300                           ;main.c: 313: } else if (TimerCounterAtOverflow <=197) {
  4301  0007DA  0012               	return	
  4302  0007DC                     l3310:
  4303  0007DC  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4304  0007DE  E109               	bnz	l3318
  4305  0007E0  0EC6               	movlw	198
  4306  0007E2  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4307  0007E4  B0D8               	btfsc	status,0,c
  4308  0007E6  D005               	goto	l3318
  4309                           
  4310                           ;main.c: 314: return 610;
  4311  0007E8  0E02               	movlw	2
  4312  0007EA  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4313  0007EC  0E62               	movlw	98
  4314  0007EE  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4315                           
  4316                           ;main.c: 315: } else if (TimerCounterAtOverflow <=200) {
  4317  0007F0  0012               	return	
  4318  0007F2                     l3318:
  4319  0007F2  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4320  0007F4  E109               	bnz	l3326
  4321  0007F6  0EC9               	movlw	201
  4322  0007F8  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4323  0007FA  B0D8               	btfsc	status,0,c
  4324  0007FC  D005               	goto	l3326
  4325                           
  4326                           ;main.c: 316: return 600;
  4327  0007FE  0E02               	movlw	2
  4328  000800  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4329  000802  0E58               	movlw	88
  4330  000804  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4331                           
  4332                           ;main.c: 317: } else if (TimerCounterAtOverflow <=204) {
  4333  000806  0012               	return	
  4334  000808                     l3326:
  4335  000808  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4336  00080A  E109               	bnz	l3334
  4337  00080C  0ECD               	movlw	205
  4338  00080E  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4339  000810  B0D8               	btfsc	status,0,c
  4340  000812  D005               	goto	l3334
  4341                           
  4342                           ;main.c: 318: return 590;
  4343  000814  0E02               	movlw	2
  4344  000816  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4345  000818  0E4E               	movlw	78
  4346  00081A  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4347                           
  4348                           ;main.c: 319: } else if (TimerCounterAtOverflow <=207) {
  4349  00081C  0012               	return	
  4350  00081E                     l3334:
  4351  00081E  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4352  000820  E109               	bnz	l3342
  4353  000822  0ED0               	movlw	208
  4354  000824  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4355  000826  B0D8               	btfsc	status,0,c
  4356  000828  D005               	goto	l3342
  4357                           
  4358                           ;main.c: 320: return 580;
  4359  00082A  0E02               	movlw	2
  4360  00082C  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4361  00082E  0E44               	movlw	68
  4362  000830  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4363                           
  4364                           ;main.c: 321: } else if (TimerCounterAtOverflow <=211) {
  4365  000832  0012               	return	
  4366  000834                     l3342:
  4367  000834  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4368  000836  E109               	bnz	l3350
  4369  000838  0ED4               	movlw	212
  4370  00083A  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4371  00083C  B0D8               	btfsc	status,0,c
  4372  00083E  D005               	goto	l3350
  4373                           
  4374                           ;main.c: 322: return 570;
  4375  000840  0E02               	movlw	2
  4376  000842  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4377  000844  0E3A               	movlw	58
  4378  000846  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4379                           
  4380                           ;main.c: 323: } else if (TimerCounterAtOverflow <=214) {
  4381  000848  0012               	return	
  4382  00084A                     l3350:
  4383  00084A  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4384  00084C  E109               	bnz	l3358
  4385  00084E  0ED7               	movlw	215
  4386  000850  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4387  000852  B0D8               	btfsc	status,0,c
  4388  000854  D005               	goto	l3358
  4389                           
  4390                           ;main.c: 324: return 560;
  4391  000856  0E02               	movlw	2
  4392  000858  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4393  00085A  0E30               	movlw	48
  4394  00085C  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4395                           
  4396                           ;main.c: 325: } else if (TimerCounterAtOverflow <=218) {
  4397  00085E  0012               	return	
  4398  000860                     l3358:
  4399  000860  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4400  000862  E109               	bnz	l3366
  4401  000864  0EDB               	movlw	219
  4402  000866  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4403  000868  B0D8               	btfsc	status,0,c
  4404  00086A  D005               	goto	l3366
  4405                           
  4406                           ;main.c: 326: return 550;
  4407  00086C  0E02               	movlw	2
  4408  00086E  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4409  000870  0E26               	movlw	38
  4410  000872  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4411                           
  4412                           ;main.c: 327: } else if (TimerCounterAtOverflow <=222) {
  4413  000874  0012               	return	
  4414  000876                     l3366:
  4415  000876  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4416  000878  E109               	bnz	l3374
  4417  00087A  0EDF               	movlw	223
  4418  00087C  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4419  00087E  B0D8               	btfsc	status,0,c
  4420  000880  D005               	goto	l3374
  4421                           
  4422                           ;main.c: 328: return 540;
  4423  000882  0E02               	movlw	2
  4424  000884  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4425  000886  0E1C               	movlw	28
  4426  000888  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4427                           
  4428                           ;main.c: 329: } else if (TimerCounterAtOverflow <=227) {
  4429  00088A  0012               	return	
  4430  00088C                     l3374:
  4431  00088C  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4432  00088E  E109               	bnz	l3382
  4433  000890  0EE4               	movlw	228
  4434  000892  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4435  000894  B0D8               	btfsc	status,0,c
  4436  000896  D005               	goto	l3382
  4437                           
  4438                           ;main.c: 330: return 530;
  4439  000898  0E02               	movlw	2
  4440  00089A  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4441  00089C  0E12               	movlw	18
  4442  00089E  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4443                           
  4444                           ;main.c: 331: } else if (TimerCounterAtOverflow <=231) {
  4445  0008A0  0012               	return	
  4446  0008A2                     l3382:
  4447  0008A2  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4448  0008A4  E109               	bnz	l3390
  4449  0008A6  0EE8               	movlw	232
  4450  0008A8  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4451  0008AA  B0D8               	btfsc	status,0,c
  4452  0008AC  D005               	goto	l3390
  4453                           
  4454                           ;main.c: 332: return 520;
  4455  0008AE  0E02               	movlw	2
  4456  0008B0  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4457  0008B2  0E08               	movlw	8
  4458  0008B4  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4459                           
  4460                           ;main.c: 333: } else if (TimerCounterAtOverflow <=235) {
  4461  0008B6  0012               	return	
  4462  0008B8                     l3390:
  4463  0008B8  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4464  0008BA  E109               	bnz	l3398
  4465  0008BC  0EEC               	movlw	236
  4466  0008BE  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4467  0008C0  B0D8               	btfsc	status,0,c
  4468  0008C2  D005               	goto	l3398
  4469                           
  4470                           ;main.c: 334: return 510;
  4471  0008C4  0E01               	movlw	1
  4472  0008C6  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4473  0008C8  0EFE               	movlw	254
  4474  0008CA  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4475                           
  4476                           ;main.c: 335: } else if (TimerCounterAtOverflow <=240) {
  4477  0008CC  0012               	return	
  4478  0008CE                     l3398:
  4479  0008CE  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4480  0008D0  E109               	bnz	l3406
  4481  0008D2  0EF1               	movlw	241
  4482  0008D4  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4483  0008D6  B0D8               	btfsc	status,0,c
  4484  0008D8  D005               	goto	l3406
  4485                           
  4486                           ;main.c: 336: return 500;
  4487  0008DA  0E01               	movlw	1
  4488  0008DC  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4489  0008DE  0EF4               	movlw	244
  4490  0008E0  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4491                           
  4492                           ;main.c: 337: } else if (TimerCounterAtOverflow <=245) {
  4493  0008E2  0012               	return	
  4494  0008E4                     l3406:
  4495  0008E4  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4496  0008E6  E109               	bnz	l3414
  4497  0008E8  0EF6               	movlw	246
  4498  0008EA  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4499  0008EC  B0D8               	btfsc	status,0,c
  4500  0008EE  D005               	goto	l3414
  4501                           
  4502                           ;main.c: 338: return 490;
  4503  0008F0  0E01               	movlw	1
  4504  0008F2  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4505  0008F4  0EEA               	movlw	234
  4506  0008F6  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4507                           
  4508                           ;main.c: 339: } else if (TimerCounterAtOverflow <=250) {
  4509  0008F8  0012               	return	
  4510  0008FA                     l3414:
  4511  0008FA  5038               	movf	_TimerCounterAtOverflow+1,w,c
  4512  0008FC  E109               	bnz	l3422
  4513  0008FE  0EFB               	movlw	251
  4514  000900  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4515  000902  B0D8               	btfsc	status,0,c
  4516  000904  D005               	goto	l3422
  4517                           
  4518                           ;main.c: 340: return 480;
  4519  000906  0E01               	movlw	1
  4520  000908  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4521  00090A  0EE0               	movlw	224
  4522  00090C  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4523                           
  4524                           ;main.c: 341: } else if (TimerCounterAtOverflow <=256) {
  4525  00090E  0012               	return	
  4526  000910                     l3422:
  4527  000910  0437               	decf	_TimerCounterAtOverflow,w,c
  4528  000912  0E01               	movlw	1
  4529  000914  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4530  000916  B0D8               	btfsc	status,0,c
  4531  000918  D005               	goto	l3430
  4532                           
  4533                           ;main.c: 342: return 470;
  4534  00091A  0E01               	movlw	1
  4535  00091C  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4536  00091E  0ED6               	movlw	214
  4537  000920  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4538                           
  4539                           ;main.c: 343: } else if (TimerCounterAtOverflow <=261) {
  4540  000922  0012               	return	
  4541  000924                     l3430:
  4542  000924  0E06               	movlw	6
  4543  000926  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4544  000928  0E01               	movlw	1
  4545  00092A  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4546  00092C  B0D8               	btfsc	status,0,c
  4547  00092E  D005               	goto	l3438
  4548                           
  4549                           ;main.c: 344: return 460;
  4550  000930  0E01               	movlw	1
  4551  000932  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4552  000934  0ECC               	movlw	204
  4553  000936  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4554                           
  4555                           ;main.c: 345: } else if (TimerCounterAtOverflow <=267) {
  4556  000938  0012               	return	
  4557  00093A                     l3438:
  4558  00093A  0E0C               	movlw	12
  4559  00093C  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4560  00093E  0E01               	movlw	1
  4561  000940  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4562  000942  B0D8               	btfsc	status,0,c
  4563  000944  D005               	goto	l3446
  4564                           
  4565                           ;main.c: 346: return 450;
  4566  000946  0E01               	movlw	1
  4567  000948  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4568  00094A  0EC2               	movlw	194
  4569  00094C  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4570                           
  4571                           ;main.c: 347: } else if (TimerCounterAtOverflow <=273) {
  4572  00094E  0012               	return	
  4573  000950                     l3446:
  4574  000950  0E12               	movlw	18
  4575  000952  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4576  000954  0E01               	movlw	1
  4577  000956  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4578  000958  B0D8               	btfsc	status,0,c
  4579  00095A  D005               	goto	l3454
  4580                           
  4581                           ;main.c: 348: return 440;
  4582  00095C  0E01               	movlw	1
  4583  00095E  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4584  000960  0EB8               	movlw	184
  4585  000962  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4586                           
  4587                           ;main.c: 349: } else if (TimerCounterAtOverflow <=280) {
  4588  000964  0012               	return	
  4589  000966                     l3454:
  4590  000966  0E19               	movlw	25
  4591  000968  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4592  00096A  0E01               	movlw	1
  4593  00096C  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4594  00096E  B0D8               	btfsc	status,0,c
  4595  000970  D005               	goto	l3462
  4596                           
  4597                           ;main.c: 350: return 430;
  4598  000972  0E01               	movlw	1
  4599  000974  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4600  000976  0EAE               	movlw	174
  4601  000978  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4602                           
  4603                           ;main.c: 351: } else if (TimerCounterAtOverflow <=286) {
  4604  00097A  0012               	return	
  4605  00097C                     l3462:
  4606  00097C  0E1F               	movlw	31
  4607  00097E  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4608  000980  0E01               	movlw	1
  4609  000982  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4610  000984  B0D8               	btfsc	status,0,c
  4611  000986  D005               	goto	l3470
  4612                           
  4613                           ;main.c: 352: return 420;
  4614  000988  0E01               	movlw	1
  4615  00098A  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4616  00098C  0EA4               	movlw	164
  4617  00098E  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4618                           
  4619                           ;main.c: 353: } else if (TimerCounterAtOverflow <=293) {
  4620  000990  0012               	return	
  4621  000992                     l3470:
  4622  000992  0E26               	movlw	38
  4623  000994  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4624  000996  0E01               	movlw	1
  4625  000998  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4626  00099A  B0D8               	btfsc	status,0,c
  4627  00099C  D005               	goto	l3478
  4628                           
  4629                           ;main.c: 354: return 410;
  4630  00099E  0E01               	movlw	1
  4631  0009A0  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4632  0009A2  0E9A               	movlw	154
  4633  0009A4  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4634                           
  4635                           ;main.c: 355: } else if (TimerCounterAtOverflow <=300) {
  4636  0009A6  0012               	return	
  4637  0009A8                     l3478:
  4638  0009A8  0E2D               	movlw	45
  4639  0009AA  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4640  0009AC  0E01               	movlw	1
  4641  0009AE  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4642  0009B0  B0D8               	btfsc	status,0,c
  4643  0009B2  D005               	goto	l3486
  4644                           
  4645                           ;main.c: 356: return 400;
  4646  0009B4  0E01               	movlw	1
  4647  0009B6  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4648  0009B8  0E90               	movlw	144
  4649  0009BA  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4650                           
  4651                           ;main.c: 357: } else if (TimerCounterAtOverflow <=308) {
  4652  0009BC  0012               	return	
  4653  0009BE                     l3486:
  4654  0009BE  0E35               	movlw	53
  4655  0009C0  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4656  0009C2  0E01               	movlw	1
  4657  0009C4  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4658  0009C6  B0D8               	btfsc	status,0,c
  4659  0009C8  D005               	goto	l3494
  4660                           
  4661                           ;main.c: 358: return 390;
  4662  0009CA  0E01               	movlw	1
  4663  0009CC  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4664  0009CE  0E86               	movlw	134
  4665  0009D0  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4666                           
  4667                           ;main.c: 359: } else if (TimerCounterAtOverflow <=316) {
  4668  0009D2  0012               	return	
  4669  0009D4                     l3494:
  4670  0009D4  0E3D               	movlw	61
  4671  0009D6  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4672  0009D8  0E01               	movlw	1
  4673  0009DA  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4674  0009DC  B0D8               	btfsc	status,0,c
  4675  0009DE  D005               	goto	l3502
  4676                           
  4677                           ;main.c: 360: return 380;
  4678  0009E0  0E01               	movlw	1
  4679  0009E2  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4680  0009E4  0E7C               	movlw	124
  4681  0009E6  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4682                           
  4683                           ;main.c: 361: } else if (TimerCounterAtOverflow <=325) {
  4684  0009E8  0012               	return	
  4685  0009EA                     l3502:
  4686  0009EA  0E46               	movlw	70
  4687  0009EC  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4688  0009EE  0E01               	movlw	1
  4689  0009F0  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4690  0009F2  B0D8               	btfsc	status,0,c
  4691  0009F4  D005               	goto	l3510
  4692                           
  4693                           ;main.c: 362: return 370;
  4694  0009F6  0E01               	movlw	1
  4695  0009F8  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4696  0009FA  0E72               	movlw	114
  4697  0009FC  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4698                           
  4699                           ;main.c: 363: } else if (TimerCounterAtOverflow <=334) {
  4700  0009FE  0012               	return	
  4701  000A00                     l3510:
  4702  000A00  0E4F               	movlw	79
  4703  000A02  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4704  000A04  0E01               	movlw	1
  4705  000A06  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4706  000A08  B0D8               	btfsc	status,0,c
  4707  000A0A  D005               	goto	l3518
  4708                           
  4709                           ;main.c: 364: return 360;
  4710  000A0C  0E01               	movlw	1
  4711  000A0E  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4712  000A10  0E68               	movlw	104
  4713  000A12  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4714                           
  4715                           ;main.c: 365: } else if (TimerCounterAtOverflow <=343) {
  4716  000A14  0012               	return	
  4717  000A16                     l3518:
  4718  000A16  0E58               	movlw	88
  4719  000A18  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4720  000A1A  0E01               	movlw	1
  4721  000A1C  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4722  000A1E  B0D8               	btfsc	status,0,c
  4723  000A20  D005               	goto	l3526
  4724                           
  4725                           ;main.c: 366: return 350;
  4726  000A22  0E01               	movlw	1
  4727  000A24  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4728  000A26  0E5E               	movlw	94
  4729  000A28  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4730                           
  4731                           ;main.c: 367: } else if (TimerCounterAtOverflow <=353) {
  4732  000A2A  0012               	return	
  4733  000A2C                     l3526:
  4734  000A2C  0E62               	movlw	98
  4735  000A2E  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4736  000A30  0E01               	movlw	1
  4737  000A32  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4738  000A34  B0D8               	btfsc	status,0,c
  4739  000A36  D005               	goto	l3534
  4740                           
  4741                           ;main.c: 368: return 340;
  4742  000A38  0E01               	movlw	1
  4743  000A3A  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4744  000A3C  0E54               	movlw	84
  4745  000A3E  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4746                           
  4747                           ;main.c: 369: } else if (TimerCounterAtOverflow <=364) {
  4748  000A40  0012               	return	
  4749  000A42                     l3534:
  4750  000A42  0E6D               	movlw	109
  4751  000A44  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4752  000A46  0E01               	movlw	1
  4753  000A48  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4754  000A4A  B0D8               	btfsc	status,0,c
  4755  000A4C  D005               	goto	l3542
  4756                           
  4757                           ;main.c: 370: return 330;
  4758  000A4E  0E01               	movlw	1
  4759  000A50  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4760  000A52  0E4A               	movlw	74
  4761  000A54  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4762                           
  4763                           ;main.c: 371: } else if (TimerCounterAtOverflow <=375) {
  4764  000A56  0012               	return	
  4765  000A58                     l3542:
  4766  000A58  0E78               	movlw	120
  4767  000A5A  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4768  000A5C  0E01               	movlw	1
  4769  000A5E  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4770  000A60  B0D8               	btfsc	status,0,c
  4771  000A62  D005               	goto	l3550
  4772                           
  4773                           ;main.c: 372: return 320;
  4774  000A64  0E01               	movlw	1
  4775  000A66  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4776  000A68  0E40               	movlw	64
  4777  000A6A  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4778                           
  4779                           ;main.c: 373: } else if (TimerCounterAtOverflow <=388) {
  4780  000A6C  0012               	return	
  4781  000A6E                     l3550:
  4782  000A6E  0E85               	movlw	133
  4783  000A70  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4784  000A72  0E01               	movlw	1
  4785  000A74  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4786  000A76  B0D8               	btfsc	status,0,c
  4787  000A78  D005               	goto	l3558
  4788                           
  4789                           ;main.c: 374: return 310;
  4790  000A7A  0E01               	movlw	1
  4791  000A7C  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4792  000A7E  0E36               	movlw	54
  4793  000A80  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4794                           
  4795                           ;main.c: 375: } else if (TimerCounterAtOverflow <=400) {
  4796  000A82  0012               	return	
  4797  000A84                     l3558:
  4798  000A84  0E91               	movlw	145
  4799  000A86  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4800  000A88  0E01               	movlw	1
  4801  000A8A  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4802  000A8C  B0D8               	btfsc	status,0,c
  4803  000A8E  D005               	goto	l3566
  4804                           
  4805                           ;main.c: 376: return 300;
  4806  000A90  0E01               	movlw	1
  4807  000A92  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4808  000A94  0E2C               	movlw	44
  4809  000A96  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4810                           
  4811                           ;main.c: 377: } else if (TimerCounterAtOverflow <=414) {
  4812  000A98  0012               	return	
  4813  000A9A                     l3566:
  4814  000A9A  0E9F               	movlw	159
  4815  000A9C  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4816  000A9E  0E01               	movlw	1
  4817  000AA0  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4818  000AA2  B0D8               	btfsc	status,0,c
  4819  000AA4  D005               	goto	l3574
  4820                           
  4821                           ;main.c: 378: return 290;
  4822  000AA6  0E01               	movlw	1
  4823  000AA8  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4824  000AAA  0E22               	movlw	34
  4825  000AAC  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4826                           
  4827                           ;main.c: 379: } else if (TimerCounterAtOverflow <=429) {
  4828  000AAE  0012               	return	
  4829  000AB0                     l3574:
  4830  000AB0  0EAE               	movlw	174
  4831  000AB2  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4832  000AB4  0E01               	movlw	1
  4833  000AB6  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4834  000AB8  B0D8               	btfsc	status,0,c
  4835  000ABA  D005               	goto	l3582
  4836                           
  4837                           ;main.c: 380: return 280;
  4838  000ABC  0E01               	movlw	1
  4839  000ABE  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4840  000AC0  0E18               	movlw	24
  4841  000AC2  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4842                           
  4843                           ;main.c: 381: } else if (TimerCounterAtOverflow <=445) {
  4844  000AC4  0012               	return	
  4845  000AC6                     l3582:
  4846  000AC6  0EBE               	movlw	190
  4847  000AC8  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4848  000ACA  0E01               	movlw	1
  4849  000ACC  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4850  000ACE  B0D8               	btfsc	status,0,c
  4851  000AD0  D005               	goto	l3590
  4852                           
  4853                           ;main.c: 382: return 270;
  4854  000AD2  0E01               	movlw	1
  4855  000AD4  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4856  000AD6  0E0E               	movlw	14
  4857  000AD8  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4858                           
  4859                           ;main.c: 383: } else if (TimerCounterAtOverflow <=462) {
  4860  000ADA  0012               	return	
  4861  000ADC                     l3590:
  4862  000ADC  0ECF               	movlw	207
  4863  000ADE  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4864  000AE0  0E01               	movlw	1
  4865  000AE2  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4866  000AE4  B0D8               	btfsc	status,0,c
  4867  000AE6  D005               	goto	l3598
  4868                           
  4869                           ;main.c: 384: return 260;
  4870  000AE8  0E01               	movlw	1
  4871  000AEA  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4872  000AEC  0E04               	movlw	4
  4873  000AEE  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4874                           
  4875                           ;main.c: 385: } else if (TimerCounterAtOverflow <=480) {
  4876  000AF0  0012               	return	
  4877  000AF2                     l3598:
  4878  000AF2  0EE1               	movlw	225
  4879  000AF4  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4880  000AF6  0E01               	movlw	1
  4881  000AF8  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4882  000AFA  B0D8               	btfsc	status,0,c
  4883  000AFC  D005               	goto	l3606
  4884                           
  4885                           ;main.c: 386: return 250;
  4886  000AFE  0E00               	movlw	0
  4887  000B00  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4888  000B02  0EFA               	movlw	250
  4889  000B04  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4890                           
  4891                           ;main.c: 387: } else if (TimerCounterAtOverflow <=499) {
  4892  000B06  0012               	return	
  4893  000B08                     l3606:
  4894  000B08  0EF4               	movlw	244
  4895  000B0A  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4896  000B0C  0E01               	movlw	1
  4897  000B0E  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4898  000B10  B0D8               	btfsc	status,0,c
  4899  000B12  D005               	goto	l3614
  4900                           
  4901                           ;main.c: 388: return 240;
  4902  000B14  0E00               	movlw	0
  4903  000B16  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4904  000B18  0EF0               	movlw	240
  4905  000B1A  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4906                           
  4907                           ;main.c: 389: } else if (TimerCounterAtOverflow <=522) {
  4908  000B1C  0012               	return	
  4909  000B1E                     l3614:
  4910  000B1E  0E0B               	movlw	11
  4911  000B20  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4912  000B22  0E02               	movlw	2
  4913  000B24  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4914  000B26  B0D8               	btfsc	status,0,c
  4915  000B28  D005               	goto	l3622
  4916                           
  4917                           ;main.c: 390: return 230;
  4918  000B2A  0E00               	movlw	0
  4919  000B2C  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4920  000B2E  0EE6               	movlw	230
  4921  000B30  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4922                           
  4923                           ;main.c: 391: } else if (TimerCounterAtOverflow <=546) {
  4924  000B32  0012               	return	
  4925  000B34                     l3622:
  4926  000B34  0E23               	movlw	35
  4927  000B36  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4928  000B38  0E02               	movlw	2
  4929  000B3A  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4930  000B3C  B0D8               	btfsc	status,0,c
  4931  000B3E  D005               	goto	l3630
  4932                           
  4933                           ;main.c: 392: return 220;
  4934  000B40  0E00               	movlw	0
  4935  000B42  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4936  000B44  0EDC               	movlw	220
  4937  000B46  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4938                           
  4939                           ;main.c: 393: } else if (TimerCounterAtOverflow <=572) {
  4940  000B48  0012               	return	
  4941  000B4A                     l3630:
  4942  000B4A  0E3D               	movlw	61
  4943  000B4C  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4944  000B4E  0E02               	movlw	2
  4945  000B50  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4946  000B52  B0D8               	btfsc	status,0,c
  4947  000B54  D005               	goto	l3638
  4948                           
  4949                           ;main.c: 394: return 210;
  4950  000B56  0E00               	movlw	0
  4951  000B58  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4952  000B5A  0ED2               	movlw	210
  4953  000B5C  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4954                           
  4955                           ;main.c: 395: } else if (TimerCounterAtOverflow <=600) {
  4956  000B5E  0012               	return	
  4957  000B60                     l3638:
  4958  000B60  0E59               	movlw	89
  4959  000B62  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4960  000B64  0E02               	movlw	2
  4961  000B66  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4962  000B68  B0D8               	btfsc	status,0,c
  4963  000B6A  D005               	goto	l3646
  4964                           
  4965                           ;main.c: 396: return 200;
  4966  000B6C  0E00               	movlw	0
  4967  000B6E  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4968  000B70  0EC8               	movlw	200
  4969  000B72  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4970                           
  4971                           ;main.c: 397: } else if (TimerCounterAtOverflow <=632) {
  4972  000B74  0012               	return	
  4973  000B76                     l3646:
  4974  000B76  0E79               	movlw	121
  4975  000B78  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4976  000B7A  0E02               	movlw	2
  4977  000B7C  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4978  000B7E  B0D8               	btfsc	status,0,c
  4979  000B80  D005               	goto	l3654
  4980                           
  4981                           ;main.c: 398: return 190;
  4982  000B82  0E00               	movlw	0
  4983  000B84  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  4984  000B86  0EBE               	movlw	190
  4985  000B88  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  4986                           
  4987                           ;main.c: 399: } else if (TimerCounterAtOverflow <=667) {
  4988  000B8A  0012               	return	
  4989  000B8C                     l3654:
  4990  000B8C  0E9C               	movlw	156
  4991  000B8E  5C37               	subwf	_TimerCounterAtOverflow,w,c
  4992  000B90  0E02               	movlw	2
  4993  000B92  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  4994  000B94  B0D8               	btfsc	status,0,c
  4995  000B96  D005               	goto	l3662
  4996                           
  4997                           ;main.c: 400: return 180;
  4998  000B98  0E00               	movlw	0
  4999  000B9A  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  5000  000B9C  0EB4               	movlw	180
  5001  000B9E  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  5002                           
  5003                           ;main.c: 401: } else if (TimerCounterAtOverflow <=706) {
  5004  000BA0  0012               	return	
  5005  000BA2                     l3662:
  5006  000BA2  0EC3               	movlw	195
  5007  000BA4  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5008  000BA6  0E02               	movlw	2
  5009  000BA8  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5010  000BAA  B0D8               	btfsc	status,0,c
  5011  000BAC  D005               	goto	l3670
  5012                           
  5013                           ;main.c: 402: return 170;
  5014  000BAE  0E00               	movlw	0
  5015  000BB0  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  5016  000BB2  0EAA               	movlw	170
  5017  000BB4  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  5018                           
  5019                           ;main.c: 403: } else if (TimerCounterAtOverflow <=750) {
  5020  000BB6  0012               	return	
  5021  000BB8                     l3670:
  5022  000BB8  0EEF               	movlw	239
  5023  000BBA  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5024  000BBC  0E02               	movlw	2
  5025  000BBE  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5026  000BC0  B0D8               	btfsc	status,0,c
  5027  000BC2  D005               	goto	l3678
  5028                           
  5029                           ;main.c: 404: return 160;
  5030  000BC4  0E00               	movlw	0
  5031  000BC6  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  5032  000BC8  0EA0               	movlw	160
  5033  000BCA  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  5034                           
  5035                           ;main.c: 405: } else if (TimerCounterAtOverflow <=800) {
  5036  000BCC  0012               	return	
  5037  000BCE                     l3678:
  5038  000BCE  0E21               	movlw	33
  5039  000BD0  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5040  000BD2  0E03               	movlw	3
  5041  000BD4  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5042  000BD6  B0D8               	btfsc	status,0,c
  5043  000BD8  D005               	goto	l3686
  5044                           
  5045                           ;main.c: 406: return 150;
  5046  000BDA  0E00               	movlw	0
  5047  000BDC  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  5048  000BDE  0E96               	movlw	150
  5049  000BE0  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  5050                           
  5051                           ;main.c: 407: } else if (TimerCounterAtOverflow <=857) {
  5052  000BE2  0012               	return	
  5053  000BE4                     l3686:
  5054  000BE4  0E5A               	movlw	90
  5055  000BE6  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5056  000BE8  0E03               	movlw	3
  5057  000BEA  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5058  000BEC  B0D8               	btfsc	status,0,c
  5059  000BEE  D005               	goto	l3694
  5060                           
  5061                           ;main.c: 408: return 140;
  5062  000BF0  0E00               	movlw	0
  5063  000BF2  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  5064  000BF4  0E8C               	movlw	140
  5065  000BF6  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  5066                           
  5067                           ;main.c: 409: } else if (TimerCounterAtOverflow <=923) {
  5068  000BF8  0012               	return	
  5069  000BFA                     l3694:
  5070  000BFA  0E9C               	movlw	156
  5071  000BFC  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5072  000BFE  0E03               	movlw	3
  5073  000C00  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5074  000C02  B0D8               	btfsc	status,0,c
  5075  000C04  D005               	goto	l3702
  5076                           
  5077                           ;main.c: 410: return 130;
  5078  000C06  0E00               	movlw	0
  5079  000C08  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  5080  000C0A  0E82               	movlw	130
  5081  000C0C  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  5082                           
  5083                           ;main.c: 411: } else if (TimerCounterAtOverflow <=1000) {
  5084  000C0E  0012               	return	
  5085  000C10                     l3702:
  5086  000C10  0EE9               	movlw	233
  5087  000C12  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5088  000C14  0E03               	movlw	3
  5089  000C16  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5090  000C18  B0D8               	btfsc	status,0,c
  5091  000C1A  D005               	goto	l3710
  5092                           
  5093                           ;main.c: 412: return 120;
  5094  000C1C  0E00               	movlw	0
  5095  000C1E  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  5096  000C20  0E78               	movlw	120
  5097  000C22  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  5098                           
  5099                           ;main.c: 413: } else if (TimerCounterAtOverflow <=1091) {
  5100  000C24  0012               	return	
  5101  000C26                     l3710:
  5102  000C26  0E44               	movlw	68
  5103  000C28  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5104  000C2A  0E04               	movlw	4
  5105  000C2C  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5106  000C2E  B0D8               	btfsc	status,0,c
  5107  000C30  D005               	goto	l3718
  5108                           
  5109                           ;main.c: 414: return 110;
  5110  000C32  0E00               	movlw	0
  5111  000C34  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  5112  000C36  0E6E               	movlw	110
  5113  000C38  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  5114                           
  5115                           ;main.c: 415: } else if (TimerCounterAtOverflow <=1200) {
  5116  000C3A  0012               	return	
  5117  000C3C                     l3718:
  5118  000C3C  0EB1               	movlw	177
  5119  000C3E  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5120  000C40  0E04               	movlw	4
  5121  000C42  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5122  000C44  B0D8               	btfsc	status,0,c
  5123  000C46  D005               	goto	l3726
  5124                           
  5125                           ;main.c: 416: return 100;
  5126  000C48  0E00               	movlw	0
  5127  000C4A  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  5128  000C4C  0E64               	movlw	100
  5129  000C4E  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  5130                           
  5131                           ;main.c: 417: } else if (TimerCounterAtOverflow <=1334) {
  5132  000C50  0012               	return	
  5133  000C52                     l3726:
  5134  000C52  0E37               	movlw	55
  5135  000C54  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5136  000C56  0E05               	movlw	5
  5137  000C58  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5138  000C5A  B0D8               	btfsc	status,0,c
  5139  000C5C  D005               	goto	l3734
  5140                           
  5141                           ;main.c: 418: return 90;
  5142  000C5E  0E00               	movlw	0
  5143  000C60  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  5144  000C62  0E5A               	movlw	90
  5145  000C64  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  5146                           
  5147                           ;main.c: 419: } else if (TimerCounterAtOverflow <=1500) {
  5148  000C66  0012               	return	
  5149  000C68                     l3734:
  5150  000C68  0EDD               	movlw	221
  5151  000C6A  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5152  000C6C  0E05               	movlw	5
  5153  000C6E  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5154  000C70  B0D8               	btfsc	status,0,c
  5155  000C72  D005               	goto	l3742
  5156                           
  5157                           ;main.c: 420: return 80;
  5158  000C74  0E00               	movlw	0
  5159  000C76  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  5160  000C78  0E50               	movlw	80
  5161  000C7A  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  5162                           
  5163                           ;main.c: 421: } else if (TimerCounterAtOverflow <=1715) {
  5164  000C7C  0012               	return	
  5165  000C7E                     l3742:
  5166  000C7E  0EB4               	movlw	180
  5167  000C80  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5168  000C82  0E06               	movlw	6
  5169  000C84  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5170  000C86  B0D8               	btfsc	status,0,c
  5171  000C88  D005               	goto	l3750
  5172                           
  5173                           ;main.c: 422: return 70;
  5174  000C8A  0E00               	movlw	0
  5175  000C8C  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  5176  000C8E  0E46               	movlw	70
  5177  000C90  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  5178                           
  5179                           ;main.c: 423: } else if (TimerCounterAtOverflow <=2001) {
  5180  000C92  0012               	return	
  5181  000C94                     l3750:
  5182  000C94  0ED2               	movlw	210
  5183  000C96  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5184  000C98  0E07               	movlw	7
  5185  000C9A  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5186  000C9C  B0D8               	btfsc	status,0,c
  5187  000C9E  D005               	goto	l3758
  5188                           
  5189                           ;main.c: 424: return 60;
  5190  000CA0  0E00               	movlw	0
  5191  000CA2  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  5192  000CA4  0E3C               	movlw	60
  5193  000CA6  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  5194                           
  5195                           ;main.c: 425: } else if (TimerCounterAtOverflow <=2402) {
  5196  000CA8  0012               	return	
  5197  000CAA                     l3758:
  5198  000CAA  0E63               	movlw	99
  5199  000CAC  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5200  000CAE  0E09               	movlw	9
  5201  000CB0  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5202  000CB2  B0D8               	btfsc	status,0,c
  5203  000CB4  D005               	goto	l3766
  5204                           
  5205                           ;main.c: 426: return 50;
  5206  000CB6  0E00               	movlw	0
  5207  000CB8  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  5208  000CBA  0E32               	movlw	50
  5209  000CBC  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  5210                           
  5211                           ;main.c: 427: } else if (TimerCounterAtOverflow <=3003) {
  5212  000CBE  0012               	return	
  5213  000CC0                     l3766:
  5214  000CC0  0EBC               	movlw	188
  5215  000CC2  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5216  000CC4  0E0B               	movlw	11
  5217  000CC6  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5218  000CC8  B0D8               	btfsc	status,0,c
  5219  000CCA  D005               	goto	l3774
  5220                           
  5221                           ;main.c: 428: return 40;
  5222  000CCC  0E00               	movlw	0
  5223  000CCE  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  5224  000CD0  0E28               	movlw	40
  5225  000CD2  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  5226                           
  5227                           ;main.c: 429: } else {
  5228  000CD4  0012               	return	
  5229  000CD6                     l3774:
  5230                           
  5231                           ;main.c: 430: return 0;
  5232  000CD6  0E00               	movlw	0
  5233  000CD8  6E21               	movwf	?_ConvertTimerOverflowToWheelRPM+1,c
  5234  000CDA  0E00               	movlw	0
  5235  000CDC  6E20               	movwf	?_ConvertTimerOverflowToWheelRPM,c
  5236  000CDE  0012               	return	
  5237  000CE0  0012               	return		;funcret
  5238  000CE2                     __end_of_ConvertTimerOverflowToWheelRPM:
  5239                           	opt stack 0
  5240                           tblptru	equ	0xFF8
  5241                           tblptrh	equ	0xFF7
  5242                           tblptrl	equ	0xFF6
  5243                           tablat	equ	0xFF5
  5244                           prodh	equ	0xFF4
  5245                           prodl	equ	0xFF3
  5246                           intcon	equ	0xFF2
  5247                           intcon2	equ	0xFF1
  5248                           indf0	equ	0xFEF
  5249                           fsr0h	equ	0xFEA
  5250                           fsr0l	equ	0xFE9
  5251                           wreg	equ	0xFE8
  5252                           indf2	equ	0xFDF
  5253                           postinc2	equ	0xFDE
  5254                           postdec2	equ	0xFDD
  5255                           fsr2h	equ	0xFDA
  5256                           fsr2l	equ	0xFD9
  5257                           status	equ	0xFD8
  5258                           
  5259 ;; *************** function _ConvertTimerOverflowToMPH *****************
  5260 ;; Defined at:
  5261 ;;		line 208 in file "main.c"
  5262 ;; Parameters:    Size  Location     Type
  5263 ;;		None
  5264 ;; Auto vars:     Size  Location     Type
  5265 ;;		None
  5266 ;; Return value:  Size  Location     Type
  5267 ;;                  1    wreg      unsigned char 
  5268 ;; Registers used:
  5269 ;;		wreg, status,2, status,0
  5270 ;; Tracked objects:
  5271 ;;		On entry : 0/0
  5272 ;;		On exit  : 0/0
  5273 ;;		Unchanged: 0/0
  5274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5275 ;;      Params:         0       0       0       0       0       0       0
  5276 ;;      Locals:         0       0       0       0       0       0       0
  5277 ;;      Temps:          0       0       0       0       0       0       0
  5278 ;;      Totals:         0       0       0       0       0       0       0
  5279 ;;Total ram usage:        0 bytes
  5280 ;; Hardware stack levels used:    1
  5281 ;; Hardware stack levels required when called:    2
  5282 ;; This function calls:
  5283 ;;		Nothing
  5284 ;; This function is called by:
  5285 ;;		_main
  5286 ;; This function uses a non-reentrant model
  5287 ;;
  5288                           
  5289                           	psect	text28
  5290  001012                     __ptext28:
  5291                           	opt stack 0
  5292  001012                     _ConvertTimerOverflowToMPH:
  5293                           	opt stack 28
  5294                           
  5295                           ;main.c: 209: if (TimerCounterAtOverflow > 3003) {
  5296                           
  5297                           ;incstack = 0
  5298  001012  0EBC               	movlw	188
  5299  001014  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5300  001016  0E0B               	movlw	11
  5301  001018  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5302  00101A  A0D8               	btfss	status,0,c
  5303  00101C  D002               	goto	l3786
  5304                           
  5305                           ;main.c: 210: return 0;
  5306  00101E  0E00               	movlw	0
  5307                           
  5308                           ;main.c: 211: }else if (TimerCounterAtOverflow <= 95) {
  5309  001020  0012               	return	
  5310  001022                     l3786:
  5311  001022  5038               	movf	_TimerCounterAtOverflow+1,w,c
  5312  001024  E106               	bnz	l3794
  5313  001026  0E60               	movlw	96
  5314  001028  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5315  00102A  B0D8               	btfsc	status,0,c
  5316  00102C  D002               	goto	l3794
  5317                           
  5318                           ;main.c: 212: return 30;
  5319  00102E  0E1E               	movlw	30
  5320                           
  5321                           ;main.c: 213: } else if (TimerCounterAtOverflow <=98) {
  5322  001030  0012               	return	
  5323  001032                     l3794:
  5324  001032  5038               	movf	_TimerCounterAtOverflow+1,w,c
  5325  001034  E106               	bnz	l3802
  5326  001036  0E63               	movlw	99
  5327  001038  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5328  00103A  B0D8               	btfsc	status,0,c
  5329  00103C  D002               	goto	l3802
  5330                           
  5331                           ;main.c: 214: return 29;
  5332  00103E  0E1D               	movlw	29
  5333                           
  5334                           ;main.c: 215: } else if (TimerCounterAtOverflow <=102) {
  5335  001040  0012               	return	
  5336  001042                     l3802:
  5337  001042  5038               	movf	_TimerCounterAtOverflow+1,w,c
  5338  001044  E106               	bnz	l3810
  5339  001046  0E67               	movlw	103
  5340  001048  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5341  00104A  B0D8               	btfsc	status,0,c
  5342  00104C  D002               	goto	l3810
  5343                           
  5344                           ;main.c: 216: return 28;
  5345  00104E  0E1C               	movlw	28
  5346                           
  5347                           ;main.c: 217: } else if (TimerCounterAtOverflow <=106) {
  5348  001050  0012               	return	
  5349  001052                     l3810:
  5350  001052  5038               	movf	_TimerCounterAtOverflow+1,w,c
  5351  001054  E106               	bnz	l3818
  5352  001056  0E6B               	movlw	107
  5353  001058  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5354  00105A  B0D8               	btfsc	status,0,c
  5355  00105C  D002               	goto	l3818
  5356                           
  5357                           ;main.c: 218: return 27;
  5358  00105E  0E1B               	movlw	27
  5359                           
  5360                           ;main.c: 219: } else if (TimerCounterAtOverflow <=110) {
  5361  001060  0012               	return	
  5362  001062                     l3818:
  5363  001062  5038               	movf	_TimerCounterAtOverflow+1,w,c
  5364  001064  E106               	bnz	l3826
  5365  001066  0E6F               	movlw	111
  5366  001068  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5367  00106A  B0D8               	btfsc	status,0,c
  5368  00106C  D002               	goto	l3826
  5369                           
  5370                           ;main.c: 220: return 26;
  5371  00106E  0E1A               	movlw	26
  5372                           
  5373                           ;main.c: 221: } else if (TimerCounterAtOverflow <=114) {
  5374  001070  0012               	return	
  5375  001072                     l3826:
  5376  001072  5038               	movf	_TimerCounterAtOverflow+1,w,c
  5377  001074  E106               	bnz	l3834
  5378  001076  0E73               	movlw	115
  5379  001078  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5380  00107A  B0D8               	btfsc	status,0,c
  5381  00107C  D002               	goto	l3834
  5382                           
  5383                           ;main.c: 222: return 25;
  5384  00107E  0E19               	movlw	25
  5385                           
  5386                           ;main.c: 223: } else if (TimerCounterAtOverflow <=119) {
  5387  001080  0012               	return	
  5388  001082                     l3834:
  5389  001082  5038               	movf	_TimerCounterAtOverflow+1,w,c
  5390  001084  E106               	bnz	l3842
  5391  001086  0E78               	movlw	120
  5392  001088  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5393  00108A  B0D8               	btfsc	status,0,c
  5394  00108C  D002               	goto	l3842
  5395                           
  5396                           ;main.c: 224: return 24;
  5397  00108E  0E18               	movlw	24
  5398                           
  5399                           ;main.c: 225: } else if (TimerCounterAtOverflow <=124) {
  5400  001090  0012               	return	
  5401  001092                     l3842:
  5402  001092  5038               	movf	_TimerCounterAtOverflow+1,w,c
  5403  001094  E106               	bnz	l3850
  5404  001096  0E7D               	movlw	125
  5405  001098  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5406  00109A  B0D8               	btfsc	status,0,c
  5407  00109C  D002               	goto	l3850
  5408                           
  5409                           ;main.c: 226: return 23;
  5410  00109E  0E17               	movlw	23
  5411                           
  5412                           ;main.c: 227: } else if (TimerCounterAtOverflow <=130) {
  5413  0010A0  0012               	return	
  5414  0010A2                     l3850:
  5415  0010A2  5038               	movf	_TimerCounterAtOverflow+1,w,c
  5416  0010A4  E106               	bnz	l3858
  5417  0010A6  0E83               	movlw	131
  5418  0010A8  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5419  0010AA  B0D8               	btfsc	status,0,c
  5420  0010AC  D002               	goto	l3858
  5421                           
  5422                           ;main.c: 228: return 21;
  5423  0010AE  0E15               	movlw	21
  5424                           
  5425                           ;main.c: 229: } else if (TimerCounterAtOverflow <=136) {
  5426  0010B0  0012               	return	
  5427  0010B2                     l3858:
  5428  0010B2  5038               	movf	_TimerCounterAtOverflow+1,w,c
  5429  0010B4  E106               	bnz	l3866
  5430  0010B6  0E89               	movlw	137
  5431  0010B8  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5432  0010BA  B0D8               	btfsc	status,0,c
  5433  0010BC  D002               	goto	l3866
  5434                           
  5435                           ;main.c: 230: return 21;
  5436  0010BE  0E15               	movlw	21
  5437                           
  5438                           ;main.c: 231: } else if (TimerCounterAtOverflow <=143) {
  5439  0010C0  0012               	return	
  5440  0010C2                     l3866:
  5441  0010C2  5038               	movf	_TimerCounterAtOverflow+1,w,c
  5442  0010C4  E106               	bnz	l3874
  5443  0010C6  0E90               	movlw	144
  5444  0010C8  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5445  0010CA  B0D8               	btfsc	status,0,c
  5446  0010CC  D002               	goto	l3874
  5447                           
  5448                           ;main.c: 232: return 19;
  5449  0010CE  0E13               	movlw	19
  5450                           
  5451                           ;main.c: 233: } else if (TimerCounterAtOverflow <=150) {
  5452  0010D0  0012               	return	
  5453  0010D2                     l3874:
  5454  0010D2  5038               	movf	_TimerCounterAtOverflow+1,w,c
  5455  0010D4  E106               	bnz	l3882
  5456  0010D6  0E97               	movlw	151
  5457  0010D8  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5458  0010DA  B0D8               	btfsc	status,0,c
  5459  0010DC  D002               	goto	l3882
  5460                           
  5461                           ;main.c: 234: return 19;
  5462  0010DE  0E13               	movlw	19
  5463                           
  5464                           ;main.c: 235: } else if (TimerCounterAtOverflow <=159) {
  5465  0010E0  0012               	return	
  5466  0010E2                     l3882:
  5467  0010E2  5038               	movf	_TimerCounterAtOverflow+1,w,c
  5468  0010E4  E106               	bnz	l3890
  5469  0010E6  0EA0               	movlw	160
  5470  0010E8  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5471  0010EA  B0D8               	btfsc	status,0,c
  5472  0010EC  D002               	goto	l3890
  5473                           
  5474                           ;main.c: 236: return 17;
  5475  0010EE  0E11               	movlw	17
  5476                           
  5477                           ;main.c: 237: } else if (TimerCounterAtOverflow <=168) {
  5478  0010F0  0012               	return	
  5479  0010F2                     l3890:
  5480  0010F2  5038               	movf	_TimerCounterAtOverflow+1,w,c
  5481  0010F4  E106               	bnz	l3898
  5482  0010F6  0EA9               	movlw	169
  5483  0010F8  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5484  0010FA  B0D8               	btfsc	status,0,c
  5485  0010FC  D002               	goto	l3898
  5486                           
  5487                           ;main.c: 238: return 17;
  5488  0010FE  0E11               	movlw	17
  5489                           
  5490                           ;main.c: 239: } else if (TimerCounterAtOverflow <=178) {
  5491  001100  0012               	return	
  5492  001102                     l3898:
  5493  001102  5038               	movf	_TimerCounterAtOverflow+1,w,c
  5494  001104  E106               	bnz	l3906
  5495  001106  0EB3               	movlw	179
  5496  001108  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5497  00110A  B0D8               	btfsc	status,0,c
  5498  00110C  D002               	goto	l3906
  5499                           
  5500                           ;main.c: 240: return 16;
  5501  00110E  0E10               	movlw	16
  5502                           
  5503                           ;main.c: 241: } else if (TimerCounterAtOverflow <=190) {
  5504  001110  0012               	return	
  5505  001112                     l3906:
  5506  001112  5038               	movf	_TimerCounterAtOverflow+1,w,c
  5507  001114  E106               	bnz	l3914
  5508  001116  0EBF               	movlw	191
  5509  001118  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5510  00111A  B0D8               	btfsc	status,0,c
  5511  00111C  D002               	goto	l3914
  5512                           
  5513                           ;main.c: 242: return 15;
  5514  00111E  0E0F               	movlw	15
  5515                           
  5516                           ;main.c: 243: } else if (TimerCounterAtOverflow <=204) {
  5517  001120  0012               	return	
  5518  001122                     l3914:
  5519  001122  5038               	movf	_TimerCounterAtOverflow+1,w,c
  5520  001124  E106               	bnz	l3922
  5521  001126  0ECD               	movlw	205
  5522  001128  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5523  00112A  B0D8               	btfsc	status,0,c
  5524  00112C  D002               	goto	l3922
  5525                           
  5526                           ;main.c: 244: return 14;
  5527  00112E  0E0E               	movlw	14
  5528                           
  5529                           ;main.c: 245: } else if (TimerCounterAtOverflow <=219) {
  5530  001130  0012               	return	
  5531  001132                     l3922:
  5532  001132  5038               	movf	_TimerCounterAtOverflow+1,w,c
  5533  001134  E106               	bnz	l3930
  5534  001136  0EDC               	movlw	220
  5535  001138  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5536  00113A  B0D8               	btfsc	status,0,c
  5537  00113C  D002               	goto	l3930
  5538                           
  5539                           ;main.c: 246: return 13;
  5540  00113E  0E0D               	movlw	13
  5541                           
  5542                           ;main.c: 247: } else if (TimerCounterAtOverflow <=238) {
  5543  001140  0012               	return	
  5544  001142                     l3930:
  5545  001142  5038               	movf	_TimerCounterAtOverflow+1,w,c
  5546  001144  E106               	bnz	l3938
  5547  001146  0EEF               	movlw	239
  5548  001148  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5549  00114A  B0D8               	btfsc	status,0,c
  5550  00114C  D002               	goto	l3938
  5551                           
  5552                           ;main.c: 248: return 12;
  5553  00114E  0E0C               	movlw	12
  5554                           
  5555                           ;main.c: 249: } else if (TimerCounterAtOverflow <=260) {
  5556  001150  0012               	return	
  5557  001152                     l3938:
  5558  001152  0E05               	movlw	5
  5559  001154  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5560  001156  0E01               	movlw	1
  5561  001158  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5562  00115A  B0D8               	btfsc	status,0,c
  5563  00115C  D002               	goto	l3946
  5564                           
  5565                           ;main.c: 250: return 11;
  5566  00115E  0E0B               	movlw	11
  5567                           
  5568                           ;main.c: 251: } else if (TimerCounterAtOverflow <=286) {
  5569  001160  0012               	return	
  5570  001162                     l3946:
  5571  001162  0E1F               	movlw	31
  5572  001164  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5573  001166  0E01               	movlw	1
  5574  001168  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5575  00116A  B0D8               	btfsc	status,0,c
  5576  00116C  D002               	goto	l3954
  5577                           
  5578                           ;main.c: 252: return 10;
  5579  00116E  0E0A               	movlw	10
  5580                           
  5581                           ;main.c: 253: } else if (TimerCounterAtOverflow <=318) {
  5582  001170  0012               	return	
  5583  001172                     l3954:
  5584  001172  0E3F               	movlw	63
  5585  001174  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5586  001176  0E01               	movlw	1
  5587  001178  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5588  00117A  B0D8               	btfsc	status,0,c
  5589  00117C  D002               	goto	l3962
  5590                           
  5591                           ;main.c: 254: return 9;
  5592  00117E  0E09               	movlw	9
  5593                           
  5594                           ;main.c: 255: } else if (TimerCounterAtOverflow <=358) {
  5595  001180  0012               	return	
  5596  001182                     l3962:
  5597  001182  0E67               	movlw	103
  5598  001184  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5599  001186  0E01               	movlw	1
  5600  001188  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5601  00118A  B0D8               	btfsc	status,0,c
  5602  00118C  D002               	goto	l3970
  5603                           
  5604                           ;main.c: 256: return 8;
  5605  00118E  0E08               	movlw	8
  5606                           
  5607                           ;main.c: 257: } else if (TimerCounterAtOverflow <=410) {
  5608  001190  0012               	return	
  5609  001192                     l3970:
  5610  001192  0E9B               	movlw	155
  5611  001194  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5612  001196  0E01               	movlw	1
  5613  001198  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5614  00119A  B0D8               	btfsc	status,0,c
  5615  00119C  D002               	goto	l3978
  5616                           
  5617                           ;main.c: 258: return 7;
  5618  00119E  0E07               	movlw	7
  5619                           
  5620                           ;main.c: 259: } else if (TimerCounterAtOverflow <=479) {
  5621  0011A0  0012               	return	
  5622  0011A2                     l3978:
  5623  0011A2  0EE0               	movlw	224
  5624  0011A4  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5625  0011A6  0E01               	movlw	1
  5626  0011A8  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5627  0011AA  B0D8               	btfsc	status,0,c
  5628  0011AC  D002               	goto	l3986
  5629                           
  5630                           ;main.c: 260: return 6;
  5631  0011AE  0E06               	movlw	6
  5632                           
  5633                           ;main.c: 261: } else if (TimerCounterAtOverflow <=576) {
  5634  0011B0  0012               	return	
  5635  0011B2                     l3986:
  5636  0011B2  0E41               	movlw	65
  5637  0011B4  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5638  0011B6  0E02               	movlw	2
  5639  0011B8  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5640  0011BA  B0D8               	btfsc	status,0,c
  5641  0011BC  D002               	goto	l3994
  5642                           
  5643                           ;main.c: 262: return 5;
  5644  0011BE  0E05               	movlw	5
  5645                           
  5646                           ;main.c: 263: } else if (TimerCounterAtOverflow <=722) {
  5647  0011C0  0012               	return	
  5648  0011C2                     l3994:
  5649  0011C2  0ED3               	movlw	211
  5650  0011C4  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5651  0011C6  0E02               	movlw	2
  5652  0011C8  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5653  0011CA  B0D8               	btfsc	status,0,c
  5654  0011CC  D002               	goto	l4002
  5655                           
  5656                           ;main.c: 264: return 4;
  5657  0011CE  0E04               	movlw	4
  5658                           
  5659                           ;main.c: 265: } else if (TimerCounterAtOverflow <=966) {
  5660  0011D0  0012               	return	
  5661  0011D2                     l4002:
  5662  0011D2  0EC7               	movlw	199
  5663  0011D4  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5664  0011D6  0E03               	movlw	3
  5665  0011D8  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5666  0011DA  B0D8               	btfsc	status,0,c
  5667  0011DC  D002               	goto	l4010
  5668                           
  5669                           ;main.c: 266: return 3;
  5670  0011DE  0E03               	movlw	3
  5671                           
  5672                           ;main.c: 267: } else if (TimerCounterAtOverflow <=1462) {
  5673  0011E0  0012               	return	
  5674  0011E2                     l4010:
  5675  0011E2  0EB7               	movlw	183
  5676  0011E4  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5677  0011E6  0E05               	movlw	5
  5678  0011E8  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5679  0011EA  B0D8               	btfsc	status,0,c
  5680  0011EC  D002               	goto	l4018
  5681                           
  5682                           ;main.c: 268: return 2;
  5683  0011EE  0E02               	movlw	2
  5684                           
  5685                           ;main.c: 269: } else if (TimerCounterAtOverflow <=3002) {
  5686  0011F0  0012               	return	
  5687  0011F2                     l4018:
  5688  0011F2  0EBB               	movlw	187
  5689  0011F4  5C37               	subwf	_TimerCounterAtOverflow,w,c
  5690  0011F6  0E0B               	movlw	11
  5691  0011F8  5838               	subwfb	_TimerCounterAtOverflow+1,w,c
  5692  0011FA  B0D8               	btfsc	status,0,c
  5693  0011FC  D002               	goto	l4026
  5694                           
  5695                           ;main.c: 270: return 1;
  5696  0011FE  0E01               	movlw	1
  5697                           
  5698                           ;main.c: 271: } else {
  5699  001200  0012               	return	
  5700  001202                     l4026:
  5701                           
  5702                           ;main.c: 272: return 0;
  5703  001202  0E00               	movlw	0
  5704  001204  0012               	return	
  5705  001206  0012               	return		;funcret
  5706  001208                     __end_of_ConvertTimerOverflowToMPH:
  5707                           	opt stack 0
  5708                           tblptru	equ	0xFF8
  5709                           tblptrh	equ	0xFF7
  5710                           tblptrl	equ	0xFF6
  5711                           tablat	equ	0xFF5
  5712                           prodh	equ	0xFF4
  5713                           prodl	equ	0xFF3
  5714                           intcon	equ	0xFF2
  5715                           intcon2	equ	0xFF1
  5716                           indf0	equ	0xFEF
  5717                           fsr0h	equ	0xFEA
  5718                           fsr0l	equ	0xFE9
  5719                           wreg	equ	0xFE8
  5720                           indf2	equ	0xFDF
  5721                           postinc2	equ	0xFDE
  5722                           postdec2	equ	0xFDD
  5723                           fsr2h	equ	0xFDA
  5724                           fsr2l	equ	0xFD9
  5725                           status	equ	0xFD8
  5726                           
  5727 ;; *************** function _ADC_Convert *****************
  5728 ;; Defined at:
  5729 ;;		line 170 in file "ports.c"
  5730 ;; Parameters:    Size  Location     Type
  5731 ;;		None
  5732 ;; Auto vars:     Size  Location     Type
  5733 ;;		None
  5734 ;; Return value:  Size  Location     Type
  5735 ;;                  1    wreg      unsigned char 
  5736 ;; Registers used:
  5737 ;;		wreg, status,2
  5738 ;; Tracked objects:
  5739 ;;		On entry : 0/0
  5740 ;;		On exit  : 0/0
  5741 ;;		Unchanged: 0/0
  5742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5743 ;;      Params:         0       0       0       0       0       0       0
  5744 ;;      Locals:         0       0       0       0       0       0       0
  5745 ;;      Temps:          0       0       0       0       0       0       0
  5746 ;;      Totals:         0       0       0       0       0       0       0
  5747 ;;Total ram usage:        0 bytes
  5748 ;; Hardware stack levels used:    1
  5749 ;; Hardware stack levels required when called:    2
  5750 ;; This function calls:
  5751 ;;		Nothing
  5752 ;; This function is called by:
  5753 ;;		_main
  5754 ;; This function uses a non-reentrant model
  5755 ;;
  5756                           
  5757                           	psect	text29
  5758  001A7A                     __ptext29:
  5759                           	opt stack 0
  5760  001A7A                     _ADC_Convert:
  5761                           	opt stack 28
  5762                           
  5763                           ;ports.c: 172: ADCON0bits.GO_DONE = 1;
  5764                           
  5765                           ;incstack = 0
  5766  001A7A  82C2               	bsf	4034,1,c	;volatile
  5767                           
  5768                           ;ports.c: 173: while (ADCON0bits.GO_DONE == 1);
  5769  001A7C  D000               	goto	l357
  5770  001A7E                     l357:
  5771  001A7E  B2C2               	btfsc	4034,1,c	;volatile
  5772  001A80  D7FE               	goto	l357
  5773                           
  5774                           ;ports.c: 174: return ADRESH;
  5775  001A82  50C4               	movf	4036,w,c	;volatile
  5776  001A84  0012               	return	
  5777  001A86  0012               	return		;funcret
  5778  001A88                     __end_of_ADC_Convert:
  5779                           	opt stack 0
  5780                           tblptru	equ	0xFF8
  5781                           tblptrh	equ	0xFF7
  5782                           tblptrl	equ	0xFF6
  5783                           tablat	equ	0xFF5
  5784                           prodh	equ	0xFF4
  5785                           prodl	equ	0xFF3
  5786                           intcon	equ	0xFF2
  5787                           intcon2	equ	0xFF1
  5788                           indf0	equ	0xFEF
  5789                           fsr0h	equ	0xFEA
  5790                           fsr0l	equ	0xFE9
  5791                           wreg	equ	0xFE8
  5792                           indf2	equ	0xFDF
  5793                           postinc2	equ	0xFDE
  5794                           postdec2	equ	0xFDD
  5795                           fsr2h	equ	0xFDA
  5796                           fsr2l	equ	0xFD9
  5797                           status	equ	0xFD8
  5798                           
  5799 ;; *************** function _XC8_LowISR_Handler *****************
  5800 ;; Defined at:
  5801 ;;		line 169 in file "main.c"
  5802 ;; Parameters:    Size  Location     Type
  5803 ;;		None
  5804 ;; Auto vars:     Size  Location     Type
  5805 ;;		None
  5806 ;; Return value:  Size  Location     Type
  5807 ;;		None               void
  5808 ;; Registers used:
  5809 ;;		None
  5810 ;; Tracked objects:
  5811 ;;		On entry : 0/0
  5812 ;;		On exit  : 0/0
  5813 ;;		Unchanged: 0/0
  5814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5815 ;;      Params:         0       0       0       0       0       0       0
  5816 ;;      Locals:         0       0       0       0       0       0       0
  5817 ;;      Temps:         17       0       0       0       0       0       0
  5818 ;;      Totals:        17       0       0       0       0       0       0
  5819 ;;Total ram usage:       17 bytes
  5820 ;; Hardware stack levels used:    1
  5821 ;; Hardware stack levels required when called:    1
  5822 ;; This function calls:
  5823 ;;		Nothing
  5824 ;; This function is called by:
  5825 ;;		Interrupt level 1
  5826 ;; This function uses a non-reentrant model
  5827 ;;
  5828                           
  5829                           	psect	intcodelo
  5830  000018                     __pintcodelo:
  5831                           	opt stack 0
  5832  000018                     _XC8_LowISR_Handler:
  5833                           	opt stack 23
  5834                           
  5835                           ;incstack = 0
  5836  000018  CFD8 F001          	movff	status,??_XC8_LowISR_Handler
  5837  00001C  CFE8 F002          	movff	wreg,??_XC8_LowISR_Handler+1
  5838  000020  CFE0 F003          	movff	bsr,??_XC8_LowISR_Handler+2
  5839  000024  CFFA F004          	movff	pclath,??_XC8_LowISR_Handler+3
  5840  000028  CFFB F005          	movff	pclatu,??_XC8_LowISR_Handler+4
  5841  00002C  CFE9 F006          	movff	fsr0l,??_XC8_LowISR_Handler+5
  5842  000030  CFEA F007          	movff	fsr0h,??_XC8_LowISR_Handler+6
  5843  000034  CFE1 F008          	movff	fsr1l,??_XC8_LowISR_Handler+7
  5844  000038  CFE2 F009          	movff	fsr1h,??_XC8_LowISR_Handler+8
  5845  00003C  CFD9 F00A          	movff	fsr2l,??_XC8_LowISR_Handler+9
  5846  000040  CFDA F00B          	movff	fsr2h,??_XC8_LowISR_Handler+10
  5847  000044  CFF3 F00C          	movff	prodl,??_XC8_LowISR_Handler+11
  5848  000048  CFF4 F00D          	movff	prodh,??_XC8_LowISR_Handler+12
  5849  00004C  CFF6 F00E          	movff	tblptrl,??_XC8_LowISR_Handler+13
  5850  000050  CFF7 F00F          	movff	tblptrh,??_XC8_LowISR_Handler+14
  5851  000054  CFF8 F010          	movff	tblptru,??_XC8_LowISR_Handler+15
  5852  000058  CFF5 F011          	movff	tablat,??_XC8_LowISR_Handler+16
  5853                           
  5854                           ;main.c: 173: if (INTCON3bits.INT1IF) {
  5855  00005C  A0F0               	btfss	intcon3,0,c	;volatile
  5856  00005E  D002               	goto	i1l74
  5857                           
  5858                           ;main.c: 174: INTCON3bits.INT1IF = 0;
  5859  000060  90F0               	bcf	intcon3,0,c	;volatile
  5860                           
  5861                           ;main.c: 175: LATDbits.LATD1 = ~LATDbits.LATD1;
  5862  000062  728C               	btg	3980,1,c	;volatile
  5863  000064                     i1l74:
  5864                           
  5865                           ;main.c: 176: }
  5866                           ;main.c: 178: if (INTCONbits.RBIF) {
  5867  000064  A0F2               	btfss	intcon,0,c	;volatile
  5868  000066  D009               	goto	i1l78
  5869                           
  5870                           ;main.c: 179: PortBValue = PORTB;
  5871  000068  CF81 F03B          	movff	3969,_PortBValue	;volatile
  5872                           
  5873                           ;main.c: 180: INTCONbits.RBIF = 0;
  5874  00006C  90F2               	bcf	intcon,0,c	;volatile
  5875                           
  5876                           ;main.c: 181: if (PortBValue & 0b00010000) {
  5877  00006E  B83B               	btfsc	_PortBValue,4,c
  5878                           
  5879                           ;main.c: 182: LATDbits.LATD4 = ~LATDbits.LATD4;
  5880  000070  788C               	btg	3980,4,c	;volatile
  5881                           
  5882                           ;main.c: 183: }
  5883                           ;main.c: 184: if (PortBValue & 0b00100000) {
  5884  000072  AA3B               	btfss	_PortBValue,5,c
  5885  000074  D002               	goto	i1l78
  5886                           
  5887                           ;main.c: 185: LATDbits.LATD5 = ~LATDbits.LATD5;
  5888  000076  7A8C               	btg	3980,5,c	;volatile
  5889  000078  D000               	goto	i1l78
  5890  00007A                     i1l78:
  5891  00007A  C011  FFF5         	movff	??_XC8_LowISR_Handler+16,tablat
  5892  00007E  C010  FFF8         	movff	??_XC8_LowISR_Handler+15,tblptru
  5893  000082  C00F  FFF7         	movff	??_XC8_LowISR_Handler+14,tblptrh
  5894  000086  C00E  FFF6         	movff	??_XC8_LowISR_Handler+13,tblptrl
  5895  00008A  C00D  FFF4         	movff	??_XC8_LowISR_Handler+12,prodh
  5896  00008E  C00C  FFF3         	movff	??_XC8_LowISR_Handler+11,prodl
  5897  000092  C00B  FFDA         	movff	??_XC8_LowISR_Handler+10,fsr2h
  5898  000096  C00A  FFD9         	movff	??_XC8_LowISR_Handler+9,fsr2l
  5899  00009A  C009  FFE2         	movff	??_XC8_LowISR_Handler+8,fsr1h
  5900  00009E  C008  FFE1         	movff	??_XC8_LowISR_Handler+7,fsr1l
  5901  0000A2  C007  FFEA         	movff	??_XC8_LowISR_Handler+6,fsr0h
  5902  0000A6  C006  FFE9         	movff	??_XC8_LowISR_Handler+5,fsr0l
  5903  0000AA  C005  FFFB         	movff	??_XC8_LowISR_Handler+4,pclatu
  5904  0000AE  C004  FFFA         	movff	??_XC8_LowISR_Handler+3,pclath
  5905  0000B2  C003  FFE0         	movff	??_XC8_LowISR_Handler+2,bsr
  5906  0000B6  C002  FFE8         	movff	??_XC8_LowISR_Handler+1,wreg
  5907  0000BA  C001  FFD8         	movff	??_XC8_LowISR_Handler,status
  5908  0000BE  0010               	retfie	
  5909  0000C0                     __end_of_XC8_LowISR_Handler:
  5910                           	opt stack 0
  5911                           pclatu	equ	0xFFB
  5912                           pclath	equ	0xFFA
  5913                           tblptru	equ	0xFF8
  5914                           tblptrh	equ	0xFF7
  5915                           tblptrl	equ	0xFF6
  5916                           tablat	equ	0xFF5
  5917                           prodh	equ	0xFF4
  5918                           prodl	equ	0xFF3
  5919                           intcon	equ	0xFF2
  5920                           intcon2	equ	0xFF1
  5921                           intcon3	equ	0xFF0
  5922                           indf0	equ	0xFEF
  5923                           fsr0h	equ	0xFEA
  5924                           fsr0l	equ	0xFE9
  5925                           wreg	equ	0xFE8
  5926                           fsr1h	equ	0xFE2
  5927                           fsr1l	equ	0xFE1
  5928                           bsr	equ	0xFE0
  5929                           indf2	equ	0xFDF
  5930                           postinc2	equ	0xFDE
  5931                           postdec2	equ	0xFDD
  5932                           fsr2h	equ	0xFDA
  5933                           fsr2l	equ	0xFD9
  5934                           status	equ	0xFD8
  5935                           
  5936 ;; *************** function _XC8_HighISR_Handler *****************
  5937 ;; Defined at:
  5938 ;;		line 117 in file "main.c"
  5939 ;; Parameters:    Size  Location     Type
  5940 ;;		None
  5941 ;; Auto vars:     Size  Location     Type
  5942 ;;		None
  5943 ;; Return value:  Size  Location     Type
  5944 ;;		None               void
  5945 ;; Registers used:
  5946 ;;		wreg, status,2, status,0
  5947 ;; Tracked objects:
  5948 ;;		On entry : 0/0
  5949 ;;		On exit  : 0/0
  5950 ;;		Unchanged: 0/0
  5951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5952 ;;      Params:         0       0       0       0       0       0       0
  5953 ;;      Locals:         0       0       0       0       0       0       0
  5954 ;;      Temps:         14       0       0       0       0       0       0
  5955 ;;      Totals:        14       0       0       0       0       0       0
  5956 ;;Total ram usage:       14 bytes
  5957 ;; Hardware stack levels used:    1
  5958 ;; This function calls:
  5959 ;;		Nothing
  5960 ;; This function is called by:
  5961 ;;		Interrupt level 2
  5962 ;; This function uses a non-reentrant model
  5963 ;;
  5964                           
  5965                           	psect	intcode
  5966  000008                     __pintcode:
  5967                           	opt stack 0
  5968  000008                     _XC8_HighISR_Handler:
  5969                           	opt stack 23
  5970                           
  5971                           ;incstack = 0
  5972  000008  CFFA F012          	movff	pclath,??_XC8_HighISR_Handler
  5973  00000C  CFFB F013          	movff	pclatu,??_XC8_HighISR_Handler+1
  5974  000010  CFE9 F014          	movff	fsr0l,??_XC8_HighISR_Handler+2
  5975  000014  EFE2  F009         	goto	int_func
  5976                           pclatu	equ	0xFFB
  5977                           pclath	equ	0xFFA
  5978                           tblptru	equ	0xFF8
  5979                           tblptrh	equ	0xFF7
  5980                           tblptrl	equ	0xFF6
  5981                           tablat	equ	0xFF5
  5982                           prodh	equ	0xFF4
  5983                           prodl	equ	0xFF3
  5984                           intcon	equ	0xFF2
  5985                           intcon2	equ	0xFF1
  5986                           intcon3	equ	0xFF0
  5987                           indf0	equ	0xFEF
  5988                           fsr0h	equ	0xFEA
  5989                           fsr0l	equ	0xFE9
  5990                           wreg	equ	0xFE8
  5991                           fsr1h	equ	0xFE2
  5992                           fsr1l	equ	0xFE1
  5993                           bsr	equ	0xFE0
  5994                           indf2	equ	0xFDF
  5995                           postinc2	equ	0xFDE
  5996                           postdec2	equ	0xFDD
  5997                           fsr2h	equ	0xFDA
  5998                           fsr2l	equ	0xFD9
  5999                           status	equ	0xFD8
  6000                           
  6001                           	psect	intcode_body
  6002  0013C4                     __pintcode_body:
  6003                           	opt stack 23
  6004  0013C4                     int_func:
  6005                           	opt stack 23
  6006  0013C4  CFEA F015          	movff	fsr0h,??_XC8_HighISR_Handler+3
  6007  0013C8  CFE1 F016          	movff	fsr1l,??_XC8_HighISR_Handler+4
  6008  0013CC  CFE2 F017          	movff	fsr1h,??_XC8_HighISR_Handler+5
  6009  0013D0  CFD9 F018          	movff	fsr2l,??_XC8_HighISR_Handler+6
  6010  0013D4  CFDA F019          	movff	fsr2h,??_XC8_HighISR_Handler+7
  6011  0013D8  CFF3 F01A          	movff	prodl,??_XC8_HighISR_Handler+8
  6012  0013DC  CFF4 F01B          	movff	prodh,??_XC8_HighISR_Handler+9
  6013  0013E0  CFF6 F01C          	movff	tblptrl,??_XC8_HighISR_Handler+10
  6014  0013E4  CFF7 F01D          	movff	tblptrh,??_XC8_HighISR_Handler+11
  6015  0013E8  CFF8 F01E          	movff	tblptru,??_XC8_HighISR_Handler+12
  6016  0013EC  CFF5 F01F          	movff	tablat,??_XC8_HighISR_Handler+13
  6017                           
  6018                           ;main.c: 124: if (INTCONbits.INT0IF )
  6019  0013F0  A2F2               	btfss	intcon,1,c	;volatile
  6020  0013F2  D010               	goto	i2l4112
  6021                           
  6022                           ;main.c: 125: {
  6023                           ;main.c: 128: INTCONbits.INT0IF = 0;
  6024  0013F4  92F2               	bcf	intcon,1,c	;volatile
  6025                           
  6026                           ;main.c: 130: TimerCounterAtOverflow = TimerOverflowCounter;
  6027  0013F6  C039  F037         	movff	_TimerOverflowCounter,_TimerCounterAtOverflow
  6028  0013FA  C03A  F038         	movff	_TimerOverflowCounter+1,_TimerCounterAtOverflow+1
  6029                           
  6030                           ;main.c: 131: TimerOverflowCounter = 0;
  6031  0013FE  0E00               	movlw	0
  6032  001400  6E3A               	movwf	_TimerOverflowCounter+1,c
  6033  001402  0E00               	movlw	0
  6034  001404  6E39               	movwf	_TimerOverflowCounter,c
  6035                           
  6036                           ;main.c: 132: TMR0H = 0xFF;
  6037  001406  68D7               	setf	4055,c	;volatile
  6038                           
  6039                           ;main.c: 133: TMR0L = 0x83;
  6040  001408  0E83               	movlw	131
  6041  00140A  6ED6               	movwf	4054,c	;volatile
  6042                           
  6043                           ;main.c: 134: CanCalculateSpeed = 1;
  6044  00140C  0E01               	movlw	1
  6045  00140E  0100               	movlb	0	; () banked
  6046  001410  6F7F               	movwf	_CanCalculateSpeed& (0+255),b
  6047  001412  D000               	goto	i2l4112
  6048  001414                     i2l4112:
  6049                           
  6050                           ;main.c: 135: }
  6051                           ;main.c: 136: if (INTCONbits.TMR0IF)
  6052  001414  A4F2               	btfss	intcon,2,c	;volatile
  6053  001416  D019               	goto	i2l71
  6054                           
  6055                           ;main.c: 137: {
  6056                           ;main.c: 138: INTCONbits.TMR0IF = 0;
  6057  001418  94F2               	bcf	intcon,2,c	;volatile
  6058                           
  6059                           ;main.c: 139: TimerOverflowCounter = TimerOverflowCounter + 1;
  6060  00141A  0E01               	movlw	1
  6061  00141C  2439               	addwf	_TimerOverflowCounter,w,c
  6062  00141E  6E39               	movwf	_TimerOverflowCounter,c
  6063  001420  0E00               	movlw	0
  6064  001422  203A               	addwfc	_TimerOverflowCounter+1,w,c
  6065  001424  6E3A               	movwf	_TimerOverflowCounter+1,c
  6066                           
  6067                           ;main.c: 142: if (TimerOverflowCounter > 3003 ) {
  6068  001426  0EBC               	movlw	188
  6069  001428  5C39               	subwf	_TimerOverflowCounter,w,c
  6070  00142A  0E0B               	movlw	11
  6071  00142C  583A               	subwfb	_TimerOverflowCounter+1,w,c
  6072  00142E  A0D8               	btfss	status,0,c
  6073  001430  D008               	goto	i2l4122
  6074                           
  6075                           ;main.c: 143: TimerCounterAtOverflow = TimerOverflowCounter;
  6076  001432  C039  F037         	movff	_TimerOverflowCounter,_TimerCounterAtOverflow
  6077  001436  C03A  F038         	movff	_TimerOverflowCounter+1,_TimerCounterAtOverflow+1
  6078                           
  6079                           ;main.c: 144: CanCalculateSpeed = 1;
  6080  00143A  0E01               	movlw	1
  6081  00143C  0100               	movlb	0	; () banked
  6082  00143E  6F7F               	movwf	_CanCalculateSpeed& (0+255),b
  6083  001440  D000               	goto	i2l4122
  6084  001442                     i2l4122:
  6085                           
  6086                           ;main.c: 145: }
  6087                           ;main.c: 146: TMR0H = 0xFF;
  6088  001442  68D7               	setf	4055,c	;volatile
  6089                           
  6090                           ;main.c: 147: TMR0L = 0x83;
  6091  001444  0E83               	movlw	131
  6092  001446  6ED6               	movwf	4054,c	;volatile
  6093  001448  D000               	goto	i2l71
  6094  00144A                     i2l71:
  6095  00144A  C01F  FFF5         	movff	??_XC8_HighISR_Handler+13,tablat
  6096  00144E  C01E  FFF8         	movff	??_XC8_HighISR_Handler+12,tblptru
  6097  001452  C01D  FFF7         	movff	??_XC8_HighISR_Handler+11,tblptrh
  6098  001456  C01C  FFF6         	movff	??_XC8_HighISR_Handler+10,tblptrl
  6099  00145A  C01B  FFF4         	movff	??_XC8_HighISR_Handler+9,prodh
  6100  00145E  C01A  FFF3         	movff	??_XC8_HighISR_Handler+8,prodl
  6101  001462  C019  FFDA         	movff	??_XC8_HighISR_Handler+7,fsr2h
  6102  001466  C018  FFD9         	movff	??_XC8_HighISR_Handler+6,fsr2l
  6103  00146A  C017  FFE2         	movff	??_XC8_HighISR_Handler+5,fsr1h
  6104  00146E  C016  FFE1         	movff	??_XC8_HighISR_Handler+4,fsr1l
  6105  001472  C015  FFEA         	movff	??_XC8_HighISR_Handler+3,fsr0h
  6106  001476  C014  FFE9         	movff	??_XC8_HighISR_Handler+2,fsr0l
  6107  00147A  C013  FFFB         	movff	??_XC8_HighISR_Handler+1,pclatu
  6108  00147E  C012  FFFA         	movff	??_XC8_HighISR_Handler,pclath
  6109  001482  0011               	retfie		f
  6110  001484                     __end_of_XC8_HighISR_Handler:
  6111                           	opt stack 0
  6112                           pclatu	equ	0xFFB
  6113                           pclath	equ	0xFFA
  6114                           tblptru	equ	0xFF8
  6115                           tblptrh	equ	0xFF7
  6116                           tblptrl	equ	0xFF6
  6117                           tablat	equ	0xFF5
  6118                           prodh	equ	0xFF4
  6119                           prodl	equ	0xFF3
  6120                           intcon	equ	0xFF2
  6121                           intcon2	equ	0xFF1
  6122                           intcon3	equ	0xFF0
  6123                           indf0	equ	0xFEF
  6124                           fsr0h	equ	0xFEA
  6125                           fsr0l	equ	0xFE9
  6126                           wreg	equ	0xFE8
  6127                           fsr1h	equ	0xFE2
  6128                           fsr1l	equ	0xFE1
  6129                           bsr	equ	0xFE0
  6130                           indf2	equ	0xFDF
  6131                           postinc2	equ	0xFDE
  6132                           postdec2	equ	0xFDD
  6133                           fsr2h	equ	0xFDA
  6134                           fsr2l	equ	0xFD9
  6135                           status	equ	0xFD8
  6136                           pclatu	equ	0xFFB
  6137                           pclath	equ	0xFFA
  6138                           tblptru	equ	0xFF8
  6139                           tblptrh	equ	0xFF7
  6140                           tblptrl	equ	0xFF6
  6141                           tablat	equ	0xFF5
  6142                           prodh	equ	0xFF4
  6143                           prodl	equ	0xFF3
  6144                           intcon	equ	0xFF2
  6145                           intcon2	equ	0xFF1
  6146                           intcon3	equ	0xFF0
  6147                           indf0	equ	0xFEF
  6148                           fsr0h	equ	0xFEA
  6149                           fsr0l	equ	0xFE9
  6150                           wreg	equ	0xFE8
  6151                           fsr1h	equ	0xFE2
  6152                           fsr1l	equ	0xFE1
  6153                           bsr	equ	0xFE0
  6154                           indf2	equ	0xFDF
  6155                           postinc2	equ	0xFDE
  6156                           postdec2	equ	0xFDD
  6157                           fsr2h	equ	0xFDA
  6158                           fsr2l	equ	0xFD9
  6159                           status	equ	0xFD8
  6160                           
  6161                           	psect	rparam
  6162  0000                     pclatu	equ	0xFFB
  6163                           pclath	equ	0xFFA
  6164                           tblptru	equ	0xFF8
  6165                           tblptrh	equ	0xFF7
  6166                           tblptrl	equ	0xFF6
  6167                           tablat	equ	0xFF5
  6168                           prodh	equ	0xFF4
  6169                           prodl	equ	0xFF3
  6170                           intcon	equ	0xFF2
  6171                           intcon2	equ	0xFF1
  6172                           intcon3	equ	0xFF0
  6173                           indf0	equ	0xFEF
  6174                           fsr0h	equ	0xFEA
  6175                           fsr0l	equ	0xFE9
  6176                           wreg	equ	0xFE8
  6177                           fsr1h	equ	0xFE2
  6178                           fsr1l	equ	0xFE1
  6179                           bsr	equ	0xFE0
  6180                           indf2	equ	0xFDF
  6181                           postinc2	equ	0xFDE
  6182                           postdec2	equ	0xFDD
  6183                           fsr2h	equ	0xFDA
  6184                           fsr2l	equ	0xFD9
  6185                           status	equ	0xFD8


Data Sizes:
    Strings     67
    Constant    10
    Data        0
    BSS         11
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     54      60
    BANK0           160     29      34
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_9(CODE[3]), STR_8(CODE[5]), STR_7(CODE[5]), STR_6(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 4
		 -> putIntLCD@result_958(BANK0[3]), putIntLCD@result_956(BANK0[4]), putIntLCD@result_954(BANK0[3]), putIntLCD@result(BANK0[2]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    putLCD@buffer	PTR unsigned char  size(2) Largest target is 17
		 -> putIntLCD@result_958(BANK0[3]), putIntLCD@result_956(BANK0[4]), putIntLCD@result_954(BANK0[3]), putIntLCD@result(BANK0[2]), 
		 -> STR_5(CODE[8]), STR_4(CODE[4]), STR_3(CODE[7]), STR_2(CODE[17]), 
		 -> STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_LCDUpdate
    _putIntLCD->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _LCDInitialDisplay->_SetLCDCGRamAddr
    _LCDInitialDisplay->_SetLCDDDRamAddr
    _putLCD->_WriteDataLCD
    _InitLCD->_OpenLCD
    _OpenLCD->_SetLCDDDRamAddr
    _DelayFor18TCY->_Delay1TCYx

Critical Paths under _XC8_HighISR_Handler in COMRAM

    None.

Critical Paths under _XC8_LowISR_Handler in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_LCDUpdate
    _LCDUpdate->_putIntLCD
    _putIntLCD->_sprintf

Critical Paths under _XC8_HighISR_Handler in BANK0

    None.

Critical Paths under _XC8_LowISR_Handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _XC8_HighISR_Handler in BANK1

    None.

Critical Paths under _XC8_LowISR_Handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _XC8_HighISR_Handler in BANK2

    None.

Critical Paths under _XC8_LowISR_Handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _XC8_HighISR_Handler in BANK3

    None.

Critical Paths under _XC8_LowISR_Handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _XC8_HighISR_Handler in BANK4

    None.

Critical Paths under _XC8_LowISR_Handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _XC8_HighISR_Handler in BANK5

    None.

Critical Paths under _XC8_LowISR_Handler in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    7753
                        _ADC_Convert
          _ConvertTimerOverflowToMPH
     _ConvertTimerOverflowToWheelRPM
                        _Delay1KTCYx
                 _InitAnalogueInputs
                     _InitInterrupts
                            _InitLCD
                       _InitMotorPWM
                          _InitPorts
                  _LCDInitialDisplay
                          _LCDUpdate
 ---------------------------------------------------------------------------------
 (1) _LCDUpdate                                            5     1      4    6406
                                             53 COMRAM     1     1      0
                                             25 BANK0      4     0      4
                            _BusyLCD
                    _SetLCDDDRamAddr
                        _WriteCmdLCD
                          _putIntLCD
                             _putLCD
 ---------------------------------------------------------------------------------
 (2) _putIntLCD                                           16    12      4    5188
                                              9 BANK0     16    12      4
                             _putLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             28    22      6    3206
                                             43 COMRAM    10     4      6
                                              0 BANK0      9     9      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                             31 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     386
                                             31 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     386
                                             38 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     395
                                             31 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _LCDInitialDisplay                                    0     0      0     995
                            _BusyLCD
                    _SetLCDCGRamAddr
                    _SetLCDDDRamAddr
                        _WriteCmdLCD
                       _WriteDataLCD
                             _putLCD
 ---------------------------------------------------------------------------------
 (2) _putLCD                                               2     0      2     709
                                             33 COMRAM     2     0      2
                            _BusyLCD
                       _WriteDataLCD
 ---------------------------------------------------------------------------------
 (3) _WriteDataLCD                                         1     1      0      66
                                             32 COMRAM     1     1      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (2) _SetLCDCGRamAddr                                      4     4      0      66
                                             32 COMRAM     4     4      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (1) _InitPorts                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitLCD                                              0     0      0     330
                            _BusyLCD
                            _OpenLCD
                        _WriteCmdLCD
 ---------------------------------------------------------------------------------
 (2) _OpenLCD                                              1     1      0     242
                                             36 COMRAM     1     1      0
                            _BusyLCD
                           _BusyXLCD
                       _Delay100TCYx
                       _Delay10KTCYx
                    _SetLCDDDRamAddr
                        _WriteCmdLCD
 ---------------------------------------------------------------------------------
 (2) _WriteCmdLCD                                          1     1      0      66
                                             32 COMRAM     1     1      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (2) _SetLCDDDRamAddr                                      4     4      0      66
                                             32 COMRAM     4     4      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (3) _Delay10KTCYx                                         2     2      0      22
                                             31 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _Delay100TCYx                                         1     1      0      22
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _BusyXLCD                                             0     0      0      22
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (3) _BusyLCD                                              0     0      0      22
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (4) _DelayFor18TCY                                        0     0      0      22
                         _Delay1TCYx
 ---------------------------------------------------------------------------------
 (5) _Delay1TCYx                                           1     1      0      22
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitInterrupts                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitAnalogueInputs                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Delay1KTCYx                                          1     1      0      22
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ConvertTimerOverflowToWheelRPM                       2     0      2       0
                                             31 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _ConvertTimerOverflowToMPH                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_Convert                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _XC8_LowISR_Handler                                  17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _XC8_HighISR_Handler                                 14    14      0       0
                                             17 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Convert
   _ConvertTimerOverflowToMPH
   _ConvertTimerOverflowToWheelRPM
   _Delay1KTCYx
   _InitAnalogueInputs
   _InitInterrupts
   _InitLCD
     _BusyLCD
       _DelayFor18TCY
         _Delay1TCYx
     _OpenLCD
       _BusyLCD
         _DelayFor18TCY
           _Delay1TCYx
       _BusyXLCD
         _DelayFor18TCY
           _Delay1TCYx
       _Delay100TCYx
       _Delay10KTCYx
       _SetLCDDDRamAddr
         _DelayFor18TCY
           _Delay1TCYx
       _WriteCmdLCD
         _DelayFor18TCY
           _Delay1TCYx
     _WriteCmdLCD
       _DelayFor18TCY
         _Delay1TCYx
   _InitMotorPWM
   _InitPorts
   _LCDInitialDisplay
     _BusyLCD
       _DelayFor18TCY
         _Delay1TCYx
     _SetLCDCGRamAddr
       _DelayFor18TCY
         _Delay1TCYx
     _SetLCDDDRamAddr
       _DelayFor18TCY
         _Delay1TCYx
     _WriteCmdLCD
       _DelayFor18TCY
         _Delay1TCYx
     _WriteDataLCD
       _DelayFor18TCY
         _Delay1TCYx
     _putLCD
       _BusyLCD
         _DelayFor18TCY
           _Delay1TCYx
       _WriteDataLCD
         _DelayFor18TCY
           _Delay1TCYx
   _LCDUpdate
     _BusyLCD
       _DelayFor18TCY
         _Delay1TCYx
     _SetLCDDDRamAddr
       _DelayFor18TCY
         _Delay1TCYx
     _WriteCmdLCD
       _DelayFor18TCY
         _Delay1TCYx
     _putIntLCD
       _putLCD
         _BusyLCD
           _DelayFor18TCY
             _Delay1TCYx
         _WriteDataLCD
           _DelayFor18TCY
             _Delay1TCYx
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _putLCD
       _BusyLCD
         _DelayFor18TCY
           _Delay1TCYx
       _WriteDataLCD
         _DelayFor18TCY
           _Delay1TCYx

 _XC8_LowISR_Handler (ROOT)

 _XC8_HighISR_Handler (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     1D      22       5       21.3%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     36      3C       1       63.2%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      5E      15        0.0%
DATA                 0      0      5E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Apr 22 20:49:05 2015

                   __size_of_WriteCmdLCD 0040                                       bsr 000FE0  
                    ___wmul@multiplicand 0022                             __CFG_CP0$OFF 000000  
                           __CFG_CP1$OFF 000000                             __CFG_CP2$OFF 000000  
                           __CFG_CP3$OFF 000000                                      l357 1A7E  
                                    l472 195A                                      l561 191E  
                                    l810 1A8A                             __CFG_CPB$OFF 000000  
                                    _PR2 000FCB                             __CFG_CPD$OFF 000000  
                                    _RPM 007D                             __CFG_BORV$30 000000  
                  __size_of_WriteDataLCD 0040                                      wreg 000FE8  
             ?_ConvertTimerOverflowToMPH 0001                             __CFG_LVP$OFF 000000  
                   __size_of_ADC_Convert 000E                               _Delay1TCYx 1A88  
                                   l1117 1724                                     l1127 186E  
                                   l4010 11E2                                     l4002 11D2  
                                   l3130 17E4                                     l3310 07DC  
                                   l3302 07C6                                     l3230 0700  
                                   l3222 06EA                                     l3214 06D4  
                                   l3206 06BE                                     l3142 181A  
                                   l3134 17F6                                     l3072 14C6  
                                   l4200 0D60                                     l4026 1202  
                                   l4018 11F2                                     l3090 151C  
                                   l3082 14F8                                     l3074 14D4  
                                   l3138 1808                                     l3154 15C2  
                                   l4210 0DCC                                     l4132 19D2  
                                   l4212 0DF4                                     l4300 1328  
                                   l3510 0A00                                     l3502 09EA  
                                   l3430 0924                                     l3422 0910  
                                   l3414 08FA                                     l3406 08E4  
                                   l3350 084A                                     l3342 0834  
                                   l3334 081E                                     l3326 0808  
                                   l3318 07F2                                     l3270 076E  
                                   l3262 0758                                     l3254 0742  
                                   l3246 072C                                     l3238 0716  
                                   l3190 0692                                     l3182 067C  
                                   l3174 0666                                     l4062 1A5A  
                                   l3094 152E                                     l3086 150A  
                                   l3078 14E6                                     l4150 16F2  
                                   l4222 0E26                                     l4160 1718  
                                   l4152 16FA                                     l4232 0E64  
                                   l4224 0E2C                                     l4312 1398  
                                   l4320 1226                                     l2810 1676  
                                   l4170 1844                                     l4242 0E8C  
                                   l4306 1360                                     l4148 16E8  
                                   l4172 184C                                     l4236 0E6A  
                                   l4228 0E3A                                     l4340 12B6  
                                   l4324 1248                                     l3710 0C26  
                                   l3702 0C10                                     l3630 0B4A  
                                   l3622 0B34                                     l3614 0B1E  
                                   l3606 0B08                                     l3550 0A6E  
                                   l3542 0A58                                     l3534 0A42  
                                   l3526 0A2C                                     l3518 0A16  
                                   l3470 0992                                     l3462 097C  
                                   l3454 0966                                     l3446 0950  
                                   l3438 093A                                     l3390 08B8  
                                   l3382 08A2                                     l3374 088C  
                                   l3366 0876                                     l3358 0860  
                                   l3294 07B0                                     l3286 079A  
                                   l3278 0784                                     l3198 06A8  
                                   l4246 0EC0                                     l4190 0D1E  
                                   l4182 0CF0                                     l4318 1218  
                                   l2816 16AA                                     l4176 1862  
                                   l4168 183A                                     l4280 0F7C  
                                   l4272 0F58                                     l4256 0EF0  
                                   l4264 0F24                                     l4248 0ECC  
                                   l4344 12CE                                     l4336 1294  
                                   l4328 1260                                     l3810 1052  
                                   l3802 1042                                     l2842 1A48  
                                   l4266 0F30                                     l4258 0EFC  
                                   l4290 1002                                     l4194 0D2A  
                                   l4370 1614                                     l4196 0D40  
                                   l4188 0D0C                                     l3750 0C94  
                                   l3742 0C7E                                     l3734 0C68  
                                   l3726 0C52                                     l3718 0C3C  
                                   l3670 0BB8                                     l3662 0BA2  
                                   l3654 0B8C                                     l3646 0B76  
                                   l3638 0B60                                     l3590 0ADC  
                                   l3582 0AC6                                     l3574 0AB0  
                                   l3566 0A9A                                     l3558 0A84  
                                   l3494 09D4                                     l3486 09BE  
                                   l3478 09A8                                     l3398 08CE  
                                   l2846 1A1C                                     l4286 0FD4  
                                   l4278 0F76                                     l4382 164E  
                                   l4288 0FE4                                     l3930 1142  
                                   l3922 1132                                     l3914 1122  
                                   l3906 1112                                     l3850 10A2  
                                   l3842 1092                                     l3834 1082  
                                   l3826 1072                                     l3818 1062  
                                   l3774 0CD6                                     l3766 0CC0  
                                   l3758 0CAA                                     l3694 0BFA  
                                   l3686 0BE4                                     l3678 0BCE  
                                   l3598 0AF2                                     l3970 1192  
                                   l3962 1182                                     l3954 1172  
                                   l3946 1162                                     l3938 1152  
                                   l3890 10F2                                     l3882 10E2  
                                   l3874 10D2                                     l3866 10C2  
                                   l3858 10B2                                     l3794 1032  
                                   l3786 1022                                     l3994 11C2  
                                   l3986 11B2                                     l3978 11A2  
                                   l3898 1102                                     STR_1 060B  
                                   STR_2 061C                                     STR_3 0635  
                                   STR_4 0618                                     STR_5 062D  
                                   STR_6 063C                                     STR_7 0641  
                                   STR_8 0646                                     STR_9 064B  
                                   _LATC 000F8B                                     _LATD 000F8C  
                                   u2085 174A                                     u1840 16A0  
                                   u1850 16CA                                     u1847 1696  
                                   u1857 16C0                                     u1875 179E  
                                   u3817 1A22                                     u3827 1A4A  
                                   u3837 1A5C                                     i1l74 0064  
                                   i1l78 007A                                     i2l71 144A  
                                   _main 15E0                    SetLCDDDRamAddr@DDaddr 0024  
                                   fsr0h 000FEA                                     fsr1h 000FE2  
                                   indf0 000FEF                                     fsr0l 000FE9  
                                   fsr2h 000FDA                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                                   pclat 000FFA                                     prodh 000FF4  
                                   prodl 000FF3                                     start 00C0  
                     __size_of_LCDUpdate 00E8                            __CFG_IESO$OFF 000000  
                           ___param_bank 000010                          __end_of_BusyLCD 1970  
                        __end_of_InitLCD 182C                            ?_InitMotorPWM 0001  
                        __end_of_OpenLCD 1542                             _WriteDataLCD 1878  
                            _Delay1KTCYx 1A58                                    ?_main 0001  
                  __size_of_Delay100TCYx 0012                                    _ANSEL 000F7E  
                                  _T0CON 000FD5                                    _T2CON 000FCA  
                        __end_of___lwdiv 172E                          __end_of___lwmod 1878  
                                  _TMR0H 000FD7                                    _TMR0L 000FD6  
                                  _PORTB 000F81                                    _PORTD 000F83  
                                  _TRISA 000F92                                    _TRISB 000F93  
                                  _TRISD 000F95                    __size_of_Delay10KTCYx 0018  
                          __CFG_PWRT$OFF 000000                            __CFG_WRT0$OFF 000000  
                          __CFG_WRT1$OFF 000000                            __CFG_WRT2$OFF 000000  
                          __CFG_WRT3$OFF 000000                           __CFG_EBTR0$OFF 000000  
                         __CFG_FCMEN$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                           __CFG_EBTR3$OFF 000000  
                                  _Speed 0080                            __CFG_WRTB$OFF 000000  
                          __CFG_WRTC$OFF 000000                            __CFG_WRTD$OFF 000000  
      __end_of_ConvertTimerOverflowToMPH 1208                           __CFG_EBTRB$OFF 000000  
                        __end_of_dpowers 060B                          __end_of_isdigit 19DC  
                                  tablat 000FF5                                    status 000FD8  
                        __end_of_sprintf 1012                           __CFG_PBADEN$ON 000000  
                      ??_SetLCDDDRamAddr 0021                           __CFG_MCLRE$OFF 000000  
                      ??_SetLCDCGRamAddr 0021                          __initialization 1998  
                           _Delay100TCYx 1A46                           ??_InitMotorPWM 0020  
                           __end_of_main 1672                           _InitInterrupts 19FC  
                       __end_of_BusyXLCD 1934                           WriteCmdLCD@cmd 0021  
                           _Delay10KTCYx 1A1A                                   ??_main 0037  
                          __activetblptr 000002                        __end_of_LCDUpdate 12F0  
                                 _ADCON0 000FC2                                   _ADCON1 000FC1  
                                 _ADCON2 000FC0                                   _ADRESH 000FC4  
                            ?_Delay1TCYx 0001                                   _CCPR1L 000FBE  
                                 _ANSELH 000F7F                                   i2l4112 1414  
                                 i2l4122 1442                           __CFG_WDTEN$OFF 000000  
                           LCDUpdate@RPM 0079                             LCDUpdate@PWM 007C  
                     __size_of_InitPorts 0020                                ??_BusyLCD 0021  
                              ??_InitLCD 0026                                ??_OpenLCD 0025  
                 __end_of_InitInterrupts 1A1A                           __CFG_XINST$OFF 000000  
                             _PortBValue 003B                                   ___wmul 1970  
                         __CFG_STVREN$ON 000000                                ??___lwdiv 0024  
                              ??___lwmod 002B               __end_of_InitAnalogueInputs 1A46  
             __end_of_XC8_LowISR_Handler 00C0                                   _putLCD 1672  
                    putIntLCD@result_954 0071                      putIntLCD@result_956 006D  
                    putIntLCD@result_958 0074                                ??_isdigit 0020  
                           __mediumconst 0000                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
                              ??_sprintf 0032                               __accesstop 0060  
                __end_of__initialization 19B0                            ___rparam_used 000001  
                        ?_InitInterrupts 0001                           __pcstackCOMRAM 0001  
                    __size_of_Delay1TCYx 000C                        __end_of_InitPorts 19FC  
            ??_ConvertTimerOverflowToMPH 0020              __end_of_XC8_HighISR_Handler 1484  
                        __CFG_LPT1OSC$ON 000000                     __end_of_InitMotorPWM 1A7A  
                 __size_of_DelayFor18TCY 0008                             sprintf@width 0066  
                             __pbssBANK0 007D                                ?_BusyXLCD 0001  
                 _TimerCounterAtOverflow 0037                    SetLCDCGRamAddr@CGaddr 0024  
                          ??_WriteCmdLCD 0021                                  ?___wmul 0020  
                                _CCP1CON 000FBD                             ?_Delay1KTCYx 0001  
                                ?_putLCD 0022                       __size_of_putIntLCD 00D4  
                          ??_ADC_Convert 0020                          _SetLCDDDRamAddr 1788  
                        _SetLCDCGRamAddr 172E                               ??_BusyXLCD 0021  
                                _BusyLCD 1934                                  _InitLCD 17DC  
                                _OpenLCD 1484                                  __Hparam 0000  
              _ConvertTimerOverflowToMPH 1012                                  __Lparam 0000  
                          _DelayFor18TCY 1A94                          __size_of___wmul 0028  
                                ___lwdiv 16D2                                  ___lwmod 182C  
                           __psmallconst 0600                                  __pcinit 1998  
                                __ramtop 0600                          __size_of_putLCD 0060  
                                __ptext0 15E0                                  __ptext1 1208  
                                __ptext2 12F0                                  __ptext3 0CE2  
                                __ptext4 19BA                                  __ptext5 1970  
                                __ptext6 182C                                  __ptext7 16D2  
                                __ptext8 1542                                  __ptext9 1672  
                    __end_of_WriteCmdLCD 18F8                                _T0CONbits 000FD5  
                                _dpowers 0601                                  _isdigit 19BA  
                           ??_Delay1TCYx 0020                                  _sprintf 0CE2  
                              _LCDUpdate 1208                           __pintcode_body 13C4  
                   end_of_initialization 19B0                      __end_of_ADC_Convert 1A88  
 __end_of_ConvertTimerOverflowToWheelRPM 0CE2  __size_of_ConvertTimerOverflowToWheelRPM 0692  
         _ConvertTimerOverflowToWheelRPM 0650                        _LCDInitialDisplay 1542  
                          __Lmediumconst 0000                                  int_func 13C4  
                     ?_LCDInitialDisplay 0001                        __end_of_putIntLCD 13C4  
                         ?_DelayFor18TCY 0001                                  postdec2 000FDD  
                                postinc2 000FDE                      ??_LCDInitialDisplay 0025  
                     __end_of_Delay1TCYx 1A94                  __end_of_SetLCDDDRamAddr 17DC  
                  __size_of_InitMotorPWM 0010                  __end_of_SetLCDCGRamAddr 1788  
                              _TRISAbits 000F92                                _TRISCbits 000F94  
                              _TRISEbits 000F96                       _InitAnalogueInputs 1A32  
                     _XC8_LowISR_Handler 0018                               ?_LCDUpdate 0079  
              __end_of_LCDInitialDisplay 15E0                         ??_InitInterrupts 0020  
                    ?_InitAnalogueInputs 0001                      ?_XC8_LowISR_Handler 0001  
                       Delay100TCYx@unit 0020                              _WriteCmdLCD 18B8  
                           _InitMotorPWM 1A6A                           __end_of___wmul 1998  
                   ??_InitAnalogueInputs 0020                     ??_XC8_LowISR_Handler 0001  
                   __size_of_Delay1KTCYx 0012                           __end_of_putLCD 16D2  
                    start_initialization 1998                              _ADC_Convert 1A7A  
                              _InitPorts 19DC                        __size_of_BusyXLCD 003C  
                        ??_DelayFor18TCY 0021                                 ??___wmul 0024  
                          ?_WriteDataLCD 0001                        _CanCalculateSpeed 007F  
                               ??_putLCD 0024       __size_of_ConvertTimerOverflowToMPH 01F6  
                         OpenLCD@lcdtype 0025                         ?_SetLCDDDRamAddr 0001  
                       ?_SetLCDCGRamAddr 0001                              __pbssCOMRAM 0037  
                          __pcstackBANK0 0060                               ?_InitPorts 0001  
                       WriteDataLCD@data 0021                             _isdigit$1370 0021  
                            ??_LCDUpdate 0036               __size_of_LCDInitialDisplay 009E  
                        Delay1KTCYx@unit 0020                              sprintf@flag 0065  
           __size_of_XC8_HighISR_Handler 147C                              sprintf@prec 0062  
                               ?_BusyLCD 0001                                 ?_InitLCD 0001  
                               ?_OpenLCD 0001                         ___lwdiv@dividend 0020  
                      __CFG_CCP2MX$PORTC 000000                            ?_Delay100TCYx 0001  
                              __pintcode 0008                           ??_WriteDataLCD 0021  
                          ?_Delay10KTCYx 0001                                 ?___lwdiv 0020  
                               ?___lwmod 0027                              __pintcodelo 0018  
                            __smallconst 0600                                 ?_isdigit 0001  
                       ___lwdiv@quotient 0025                                 ?_sprintf 002C  
                         ___wmul@product 0024                                 _LATBbits 000F8A  
                   _TimerOverflowCounter 0039                                 _LATDbits 000F8C  
                               _LATEbits 000F8D                           LCDUpdate@Speed 0036  
                         ??_Delay100TCYx 0020                                 _RCONbits 000FD0  
                       __CFG_WDTPS$32768 000000                           ??_Delay10KTCYx 0020  
                              _putIntLCD 12F0         ??_ConvertTimerOverflowToWheelRPM 0022  
        ?_ConvertTimerOverflowToWheelRPM 0020                               putIntLCD@n 0069  
                             _ADCON0bits 000FC2                        ___wmul@multiplier 0020  
                           putLCD@buffer 0022                                 _WPUBbits 000F7C  
                       Delay10KTCYx@unit 0021                              ??_InitPorts 0020  
                            _INTCON2bits 000FF1                              _INTCON3bits 000FF0  
                               _BusyXLCD 18F8                         __size_of_BusyLCD 003C  
                       __size_of_InitLCD 0050                                 __Hrparam 0000  
                       __size_of_OpenLCD 00BE                                 __Lrparam 0000  
                     __CFG_BOREN$SBORDIS 000000                             ?_WriteCmdLCD 0001  
                             ?_putIntLCD 0069                                 _Throttle 0081  
                       __size_of___lwdiv 005C                         __size_of___lwmod 004C  
                             sprintf@val 0063                             ?_ADC_Convert 0001  
                      LCDUpdate@Throttle 007B                         __size_of_isdigit 0022  
                        ___lwdiv@divisor 0022                          ___lwdiv@counter 0024  
                               __ptext10 1878                                 __ptext11 172E  
                               __ptext20 18F8                                 __ptext12 19DC  
                               __ptext21 1934                                 __ptext13 1A6A  
                               __ptext22 1A94                                 __ptext14 17DC  
                               __ptext23 1A88                                 __ptext15 1484  
                               __ptext24 19FC                                 __ptext16 18B8  
                               __ptext25 1A32                                 __ptext17 1788  
                               __ptext26 1A58                                 __ptext18 1A1A  
                               __ptext27 0650                                 __ptext19 1A46  
                               __ptext28 1012                                 __ptext29 1A7A  
                   __end_of_WriteDataLCD 18B8                         __size_of_sprintf 0330  
                          __size_of_main 0092                           Delay1TCYx@unit 0020  
                          ??_Delay1KTCYx 0020                      _XC8_HighISR_Handler 0008  
            __size_of_InitAnalogueInputs 0014              __size_of_XC8_LowISR_Handler 00A8  
                             _INTCONbits 000FF2                     __end_of_Delay100TCYx 1A58  
                               isdigit@c 0022                     __end_of_Delay10KTCYx 1A32  
                               intlevel1 0000                                 intlevel2 0000  
                              sprintf@ap 0060                                sprintf@sp 002C  
                   ?_XC8_HighISR_Handler 0001                         ___lwmod@dividend 0027  
                  __end_of_DelayFor18TCY 1A9C                              ??_putIntLCD 0036  
                __size_of_InitInterrupts 001E                     _TimerValueAtOverflow 003C  
                        putIntLCD@result 0077                                 sprintf@c 0068  
                               sprintf@f 002E                          ___lwmod@divisor 0029  
                    __end_of_Delay1KTCYx 1A6A                          ___lwmod@counter 002B  
               __size_of_SetLCDDDRamAddr 0054                    ??_XC8_HighISR_Handler 0012  
               __size_of_SetLCDCGRamAddr 005A                        __CFG_FOSC$INTIO67 000000  
                           putIntLCD@pad 006B  
