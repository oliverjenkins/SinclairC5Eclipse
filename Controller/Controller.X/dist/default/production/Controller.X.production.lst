

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Apr 21 20:21:54 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F45K20
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    40                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    42                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    43                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    44  0000                     
    45                           	psect	smallconst
    46  000600                     __psmallconst:
    47                           	opt stack 0
    48  000600  00                 	db	0
    49  000601                     _dpowers:
    50                           	opt stack 0
    51  000601  0001               	dw	1
    52  000603  000A               	dw	10
    53  000605  0064               	dw	100
    54  000607  03E8               	dw	1000
    55  000609  2710               	dw	10000
    56  00060B                     __end_of_dpowers:
    57                           	opt stack 0
    58  0000                     _ADCON0	set	4034
    59  0000                     _ADCON0bits	set	4034
    60  0000                     _ADCON1	set	4033
    61  0000                     _ADCON2	set	4032
    62  0000                     _ADRESH	set	4036
    63  0000                     _ANSEL	set	3966
    64  0000                     _ANSELH	set	3967
    65  0000                     _CCP1CON	set	4029
    66  0000                     _CCPR1L	set	4030
    67  0000                     _INTCON2bits	set	4081
    68  0000                     _INTCON3bits	set	4080
    69  0000                     _INTCONbits	set	4082
    70  0000                     _LATBbits	set	3978
    71  0000                     _LATC	set	3979
    72  0000                     _LATD	set	3980
    73  0000                     _LATDbits	set	3980
    74  0000                     _LATEbits	set	3981
    75  0000                     _PORTB	set	3969
    76  0000                     _PORTD	set	3971
    77  0000                     _PR2	set	4043
    78  0000                     _RCONbits	set	4048
    79  0000                     _T2CON	set	4042
    80  0000                     _TRISA	set	3986
    81  0000                     _TRISAbits	set	3986
    82  0000                     _TRISB	set	3987
    83  0000                     _TRISCbits	set	3988
    84  0000                     _TRISD	set	3989
    85  0000                     _TRISEbits	set	3990
    86  0000                     _WPUBbits	set	3964
    87  00060B                     STR_1:
    88  00060B  20                 	db	32
    89  00060C  30                 	db	48	;'0'
    90  00060D  30                 	db	48	;'0'
    91  00060E  6D                 	db	109	;'m'
    92  00060F  70                 	db	112	;'p'
    93  000610  68                 	db	104	;'h'
    94  000611  20                 	db	32
    95  000612  20                 	db	32
    96  000613  20                 	db	32
    97  000614  30                 	db	48	;'0'
    98  000615  30                 	db	48	;'0'
    99  000616  30                 	db	48	;'0'
   100  000617  30                 	db	48	;'0'
   101  000618  72                 	db	114	;'r'
   102  000619  70                 	db	112	;'p'
   103  00061A  6D                 	db	109	;'m'
   104  00061B  00                 	db	0
   105  00061C                     STR_2:
   106  00061C  30                 	db	48	;'0'
   107  00061D  30                 	db	48	;'0'
   108  00061E  30                 	db	48	;'0'
   109  00061F  70                 	db	112	;'p'
   110  000620  77                 	db	119	;'w'
   111  000621  72                 	db	114	;'r'
   112  000622  20                 	db	32
   113  000623  20                 	db	32
   114  000624  20                 	db	32
   115  000625  30                 	db	48	;'0'
   116  000626  30                 	db	48	;'0'
   117  000627  30                 	db	48	;'0'
   118  000628  20                 	db	32
   119  000629  70                 	db	112	;'p'
   120  00062A  77                 	db	119	;'w'
   121  00062B  6D                 	db	109	;'m'
   122  00062C  00                 	db	0
   123  00062D                     STR_3:
   124  00062D  25                 	db	37
   125  00062E  30                 	db	48	;'0'
   126  00062F  32                 	db	50	;'2'
   127  000630  64                 	db	100	;'d'
   128  000631  00                 	db	0
   129  000632                     STR_4:
   130  000632  25                 	db	37
   131  000633  30                 	db	48	;'0'
   132  000634  33                 	db	51	;'3'
   133  000635  64                 	db	100	;'d'
   134  000636  00                 	db	0
   135  000637                     STR_5:
   136  000637  25                 	db	37
   137  000638  30                 	db	48	;'0'
   138  000639  34                 	db	52	;'4'
   139  00063A  64                 	db	100	;'d'
   140  00063B  00                 	db	0
   141  00063C                     STR_6:
   142  00063C  25                 	db	37
   143  00063D  64                 	db	100	;'d'
   144  00063E  00                 	db	0
   145                           
   146                           ; #config settings
   147  00063F  00                 	db	0	; dummy byte at the end
   148  0000                     
   149                           	psect	cinit
   150  001010                     __pcinit:
   151                           	opt stack 0
   152  001010                     start_initialization:
   153                           	opt stack 0
   154  001010                     __initialization:
   155                           	opt stack 0
   156                           
   157                           ; Clear objects allocated to BANK0 (4 bytes)
   158  001010  0100               	movlb	0
   159  001012  6B77               	clrf	(__pbssBANK0+3)& (0+255),b
   160  001014  6B76               	clrf	(__pbssBANK0+2)& (0+255),b
   161  001016  6B75               	clrf	(__pbssBANK0+1)& (0+255),b
   162  001018  6B74               	clrf	__pbssBANK0& (0+255),b
   163                           
   164                           ; Clear objects allocated to COMRAM (1 bytes)
   165  00101A  6A40               	clrf	__pbssCOMRAM& (0+255),c
   166  00101C                     end_of_initialization:
   167                           	opt stack 0
   168  00101C                     __end_of__initialization:
   169                           	opt stack 0
   170  00101C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   171  00101E  6EF8               	movwf	tblptru,c
   172  001020  0100               	movlb	0
   173  001022  EFD7  F005         	goto	_main	;jump to C main() function
   174                           tblptru	equ	0xFF8
   175                           
   176                           	psect	bssCOMRAM
   177  000040                     __pbssCOMRAM:
   178                           	opt stack 0
   179  000040                     _PortBValue:
   180                           	opt stack 0
   181  000040                     	ds	1
   182                           tblptru	equ	0xFF8
   183                           
   184                           	psect	bssBANK0
   185  000074                     __pbssBANK0:
   186                           	opt stack 0
   187  000074                     _RPM:
   188                           	opt stack 0
   189  000074                     	ds	2
   190  000076                     _Speed:
   191                           	opt stack 0
   192  000076                     	ds	1
   193  000077                     _Throttle:
   194                           	opt stack 0
   195  000077                     	ds	1
   196                           tblptru	equ	0xFF8
   197                           
   198                           	psect	cstackBANK0
   199  000060                     __pcstackBANK0:
   200                           	opt stack 0
   201  000060                     putIntLCD@n:
   202                           	opt stack 0
   203                           
   204                           ; 2 bytes @ 0x0
   205  000060                     	ds	2
   206  000062                     putIntLCD@pad:
   207                           	opt stack 0
   208                           
   209                           ; 2 bytes @ 0x2
   210  000062                     	ds	2
   211  000064                     putIntLCD@result_889:
   212                           	opt stack 0
   213                           
   214                           ; 4 bytes @ 0x4
   215  000064                     	ds	4
   216  000068                     putIntLCD@result_887:
   217                           	opt stack 0
   218                           
   219                           ; 3 bytes @ 0x8
   220  000068                     	ds	3
   221  00006B                     putIntLCD@result_891:
   222                           	opt stack 0
   223                           
   224                           ; 3 bytes @ 0xB
   225  00006B                     	ds	3
   226  00006E                     putIntLCD@result:
   227                           	opt stack 0
   228                           
   229                           ; 2 bytes @ 0xE
   230  00006E                     	ds	2
   231  000070                     LCDUpdate@RPM:
   232                           	opt stack 0
   233                           
   234                           ; 2 bytes @ 0x10
   235  000070                     	ds	2
   236  000072                     LCDUpdate@Throttle:
   237                           	opt stack 0
   238                           
   239                           ; 1 bytes @ 0x12
   240  000072                     	ds	1
   241  000073                     LCDUpdate@PWM:
   242                           	opt stack 0
   243                           
   244                           ; 1 bytes @ 0x13
   245  000073                     	ds	1
   246                           tblptru	equ	0xFF8
   247                           
   248                           	psect	cstackCOMRAM
   249  000001                     __pcstackCOMRAM:
   250                           	opt stack 0
   251  000001                     ??_XC8_LowISR_Handler:
   252  000001                     
   253                           ; 1 bytes @ 0x0
   254  000001                     	ds	17
   255  000012                     ??_XC8_HighISR_Handler:
   256                           
   257                           ; 0 bytes @ 0x11
   258  000012                     	ds	14
   259  000020                     ??_Delay10KTCYx:
   260  000020                     ??_isdigit:
   261  000020                     ?___wmul:
   262                           	opt stack 0
   263  000020                     ?___lwdiv:
   264                           	opt stack 0
   265  000020                     Delay100TCYx@unit:
   266                           	opt stack 0
   267  000020                     Delay1KTCYx@unit:
   268                           	opt stack 0
   269  000020                     Delay1TCYx@unit:
   270                           	opt stack 0
   271  000020                     ___wmul@multiplier:
   272                           	opt stack 0
   273  000020                     ___lwdiv@dividend:
   274                           	opt stack 0
   275                           
   276                           ; 2 bytes @ 0x1F
   277  000020                     	ds	1
   278  000021                     ??_SetLCDCGRamAddr:
   279  000021                     ??_SetLCDDDRamAddr:
   280  000021                     WriteCmdLCD@cmd:
   281                           	opt stack 0
   282  000021                     WriteDataLCD@data:
   283                           	opt stack 0
   284  000021                     Delay10KTCYx@unit:
   285                           	opt stack 0
   286  000021                     _isdigit$1303:
   287                           	opt stack 0
   288                           
   289                           ; 1 bytes @ 0x20
   290  000021                     	ds	1
   291  000022                     isdigit@c:
   292                           	opt stack 0
   293  000022                     putLCD@buffer:
   294                           	opt stack 0
   295  000022                     ___wmul@multiplicand:
   296                           	opt stack 0
   297  000022                     ___lwdiv@divisor:
   298                           	opt stack 0
   299                           
   300                           ; 2 bytes @ 0x21
   301  000022                     	ds	2
   302  000024                     SetLCDDDRamAddr@DDaddr:
   303                           	opt stack 0
   304  000024                     SetLCDCGRamAddr@CGaddr:
   305                           	opt stack 0
   306  000024                     ___wmul@product:
   307                           	opt stack 0
   308  000024                     ___lwdiv@quotient:
   309                           	opt stack 0
   310                           
   311                           ; 2 bytes @ 0x23
   312  000024                     	ds	1
   313  000025                     OpenLCD@lcdtype:
   314                           	opt stack 0
   315                           
   316                           ; 1 bytes @ 0x24
   317  000025                     	ds	1
   318  000026                     ___lwdiv@counter:
   319                           	opt stack 0
   320                           
   321                           ; 1 bytes @ 0x25
   322  000026                     	ds	1
   323  000027                     ?___lwmod:
   324                           	opt stack 0
   325  000027                     ___lwmod@dividend:
   326                           	opt stack 0
   327                           
   328                           ; 2 bytes @ 0x26
   329  000027                     	ds	2
   330  000029                     ___lwmod@divisor:
   331                           	opt stack 0
   332                           
   333                           ; 2 bytes @ 0x28
   334  000029                     	ds	2
   335  00002B                     ___lwmod@counter:
   336                           	opt stack 0
   337                           
   338                           ; 1 bytes @ 0x2A
   339  00002B                     	ds	1
   340  00002C                     ?_sprintf:
   341                           	opt stack 0
   342  00002C                     sprintf@sp:
   343                           	opt stack 0
   344                           
   345                           ; 2 bytes @ 0x2B
   346  00002C                     	ds	2
   347  00002E                     sprintf@f:
   348                           	opt stack 0
   349                           
   350                           ; 2 bytes @ 0x2D
   351  00002E                     	ds	4
   352  000032                     ??_sprintf:
   353                           
   354                           ; 0 bytes @ 0x31
   355  000032                     	ds	4
   356  000036                     sprintf@ap:
   357                           	opt stack 0
   358                           
   359                           ; 2 bytes @ 0x35
   360  000036                     	ds	2
   361  000038                     sprintf@prec:
   362                           	opt stack 0
   363                           
   364                           ; 1 bytes @ 0x37
   365  000038                     	ds	1
   366  000039                     sprintf@val:
   367                           	opt stack 0
   368                           
   369                           ; 2 bytes @ 0x38
   370  000039                     	ds	2
   371  00003B                     sprintf@flag:
   372                           	opt stack 0
   373                           
   374                           ; 1 bytes @ 0x3A
   375  00003B                     	ds	1
   376  00003C                     sprintf@width:
   377                           	opt stack 0
   378                           
   379                           ; 2 bytes @ 0x3B
   380  00003C                     	ds	2
   381  00003E                     sprintf@c:
   382                           	opt stack 0
   383                           
   384                           ; 1 bytes @ 0x3D
   385  00003E                     	ds	1
   386  00003F                     LCDUpdate@Speed:
   387                           	opt stack 0
   388                           
   389                           ; 1 bytes @ 0x3E
   390  00003F                     	ds	1
   391  000040                     tblptru	equ	0xFF8
   392                           
   393                           ; 0 bytes @ 0x3F
   394 ;;
   395 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   396 ;;
   397 ;; *************** function _main *****************
   398 ;; Defined at:
   399 ;;		line 64 in file "main.c"
   400 ;; Parameters:    Size  Location     Type
   401 ;;		None
   402 ;; Auto vars:     Size  Location     Type
   403 ;;		None
   404 ;; Return value:  Size  Location     Type
   405 ;;		None               void
   406 ;; Registers used:
   407 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   408 ;; Tracked objects:
   409 ;;		On entry : 0/0
   410 ;;		On exit  : 0/0
   411 ;;		Unchanged: 0/0
   412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   413 ;;      Params:         0       0       0       0       0       0       0
   414 ;;      Locals:         0       0       0       0       0       0       0
   415 ;;      Temps:          0       0       0       0       0       0       0
   416 ;;      Totals:         0       0       0       0       0       0       0
   417 ;;Total ram usage:        0 bytes
   418 ;; Hardware stack levels required when called:    8
   419 ;; This function calls:
   420 ;;		_ADC_Convert
   421 ;;		_Delay1KTCYx
   422 ;;		_InitAnalogueInputs
   423 ;;		_InitInterrupts
   424 ;;		_InitLCD
   425 ;;		_InitMotorPWM
   426 ;;		_InitPorts
   427 ;;		_LCDInitialDisplay
   428 ;;		_LCDUpdate
   429 ;; This function is called by:
   430 ;;		Startup code after reset
   431 ;; This function uses a non-reentrant model
   432 ;;
   433                           
   434                           	psect	text0
   435  000BAE                     __ptext0:
   436                           	opt stack 0
   437  000BAE                     _main:
   438                           	opt stack 23
   439                           
   440                           ;main.c: 66: InitPorts();
   441                           
   442                           ;incstack = 0
   443  000BAE  ECEC  F007         	call	_InitPorts	;wreg free
   444                           
   445                           ;main.c: 67: InitInterrupts();
   446  000BB2  EC37  F008         	call	_InitInterrupts	;wreg free
   447                           
   448                           ;main.c: 68: InitMotorPWM();
   449  000BB6  EC2F  F008         	call	_InitMotorPWM	;wreg free
   450                           
   451                           ;main.c: 69: InitLCD();
   452  000BBA  ECFD  F006         	call	_InitLCD	;wreg free
   453                           
   454                           ;main.c: 70: InitAnalogueInputs();
   455  000BBE  EC13  F008         	call	_InitAnalogueInputs	;wreg free
   456                           
   457                           ;main.c: 71: LCDInitialDisplay();
   458  000BC2  EC51  F005         	call	_LCDInitialDisplay	;wreg free
   459                           
   460                           ;main.c: 73: CCPR1L = 16;
   461  000BC6  0E10               	movlw	16
   462  000BC8  6EBE               	movwf	4030,c	;volatile
   463                           
   464                           ;main.c: 76: LATD = 0;
   465  000BCA  0E00               	movlw	0
   466  000BCC  6E8C               	movwf	3980,c	;volatile
   467                           
   468                           ;main.c: 77: LATC = 0;
   469  000BCE  0E00               	movlw	0
   470  000BD0  6E8B               	movwf	3979,c	;volatile
   471                           
   472                           ;main.c: 80: Speed = 22;
   473  000BD2  0E16               	movlw	22
   474  000BD4  0100               	movlb	0	; () banked
   475  000BD6  6F76               	movwf	_Speed& (0+255),b
   476                           
   477                           ; BSR set to: 0
   478                           ;main.c: 81: RPM = 1234;
   479  000BD8  0E04               	movlw	4
   480  000BDA  0100               	movlb	0	; () banked
   481  000BDC  6F75               	movwf	(_RPM+1)& (0+255),b
   482  000BDE  0ED2               	movlw	210
   483  000BE0  6F74               	movwf	_RPM& (0+255),b
   484  000BE2  D000               	goto	l1995
   485  000BE4                     l1995:
   486                           
   487                           ;main.c: 84: {
   488                           ;main.c: 86: CCPR1L = CCPR1L + 1;
   489  000BE4  28BE               	incf	4030,w,c	;volatile
   490  000BE6  6EBE               	movwf	4030,c	;volatile
   491                           
   492                           ;main.c: 87: Throttle = ADC_Convert();
   493  000BE8  EC3E  F008         	call	_ADC_Convert	;wreg free
   494  000BEC  0100               	movlb	0	; () banked
   495  000BEE  6F77               	movwf	_Throttle& (0+255),b
   496                           
   497                           ; BSR set to: 0
   498                           ;main.c: 88: Throttle = Throttle >> 4;
   499  000BF0  0100               	movlb	0	; () banked
   500  000BF2  3977               	swapf	_Throttle& (0+255),w,b
   501  000BF4  0B0F               	andlw	15
   502  000BF6  0100               	movlb	0	; () banked
   503  000BF8  6F77               	movwf	_Throttle& (0+255),b
   504                           
   505                           ; BSR set to: 0
   506                           ;main.c: 91: LCDUpdate(Speed, RPM, Throttle, CCPR1L);
   507  000BFA  C074  F070         	movff	_RPM,LCDUpdate@RPM
   508  000BFE  C075  F071         	movff	_RPM+1,LCDUpdate@RPM+1
   509  000C02  C077  F072         	movff	_Throttle,LCDUpdate@Throttle
   510  000C06  CFBE F073          	movff	4030,LCDUpdate@PWM	;volatile
   511  000C0A  0100               	movlb	0	; () banked
   512  000C0C  5176               	movf	_Speed& (0+255),w,b
   513  000C0E  EC9A  F005         	call	_LCDUpdate
   514                           
   515                           ;main.c: 94: LATDbits.LATD7 = ~LATDbits.LATD7;
   516  000C12  7E8C               	btg	3980,7,c	;volatile
   517                           
   518                           ;main.c: 95: Delay1KTCYx(5);
   519  000C14  0E05               	movlw	5
   520  000C16  EC26  F008         	call	_Delay1KTCYx
   521  000C1A  D7E4               	goto	l1995
   522  000C1C  EF60  F000         	goto	start
   523  000C20                     __end_of_main:
   524                           	opt stack 0
   525                           tblptru	equ	0xFF8
   526                           
   527 ;; *************** function _LCDUpdate *****************
   528 ;; Defined at:
   529 ;;		line 46 in file "lcddisplay.c"
   530 ;; Parameters:    Size  Location     Type
   531 ;;  Speed           1    wreg     unsigned char 
   532 ;;  RPM             2   16[BANK0 ] unsigned short 
   533 ;;  Throttle        1   18[BANK0 ] unsigned char 
   534 ;;  PWM             1   19[BANK0 ] unsigned char 
   535 ;; Auto vars:     Size  Location     Type
   536 ;;  Speed           1   62[COMRAM] unsigned char 
   537 ;; Return value:  Size  Location     Type
   538 ;;		None               void
   539 ;; Registers used:
   540 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   541 ;; Tracked objects:
   542 ;;		On entry : 0/0
   543 ;;		On exit  : 0/0
   544 ;;		Unchanged: 0/0
   545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   546 ;;      Params:         0       4       0       0       0       0       0
   547 ;;      Locals:         1       0       0       0       0       0       0
   548 ;;      Temps:          0       0       0       0       0       0       0
   549 ;;      Totals:         1       4       0       0       0       0       0
   550 ;;Total ram usage:        5 bytes
   551 ;; Hardware stack levels used:    1
   552 ;; Hardware stack levels required when called:    7
   553 ;; This function calls:
   554 ;;		_SetLCDDDRamAddr
   555 ;;		_WriteCmdLCD
   556 ;;		_putIntLCD
   557 ;; This function is called by:
   558 ;;		_main
   559 ;; This function uses a non-reentrant model
   560 ;;
   561                           
   562                           	psect	text1
   563  000B34                     __ptext1:
   564                           	opt stack 0
   565  000B34                     _LCDUpdate:
   566                           	opt stack 23
   567                           
   568                           ;incstack = 0
   569                           ;LCDUpdate@Speed stored from wreg
   570  000B34  6E3F               	movwf	LCDUpdate@Speed,c
   571                           
   572                           ;lcddisplay.c: 47: WriteCmdLCD(0x02);
   573  000B36  0E02               	movlw	2
   574  000B38  EC6B  F007         	call	_WriteCmdLCD
   575                           
   576                           ;lcddisplay.c: 50: SetLCDDDRamAddr(0x01);
   577  000B3C  0E01               	movlw	1
   578  000B3E  ECD3  F006         	call	_SetLCDDDRamAddr
   579                           
   580                           ;lcddisplay.c: 51: putIntLCD(Speed,2);
   581  000B42  C03F  F060         	movff	LCDUpdate@Speed,putIntLCD@n
   582  000B46  0100               	movlb	0	; () banked
   583  000B48  6B61               	clrf	(putIntLCD@n+1)& (0+255),b
   584  000B4A  0E00               	movlw	0
   585  000B4C  0100               	movlb	0	; () banked
   586  000B4E  6F63               	movwf	(putIntLCD@pad+1)& (0+255),b
   587  000B50  0E02               	movlw	2
   588  000B52  6F62               	movwf	putIntLCD@pad& (0+255),b
   589  000B54  EC88  F004         	call	_putIntLCD	;wreg free
   590                           
   591                           ;lcddisplay.c: 54: SetLCDDDRamAddr(0x09);
   592  000B58  0E09               	movlw	9
   593  000B5A  ECD3  F006         	call	_SetLCDDDRamAddr
   594                           
   595                           ;lcddisplay.c: 55: putIntLCD(RPM,4);
   596  000B5E  C070  F060         	movff	LCDUpdate@RPM,putIntLCD@n
   597  000B62  C071  F061         	movff	LCDUpdate@RPM+1,putIntLCD@n+1
   598  000B66  0E00               	movlw	0
   599  000B68  0100               	movlb	0	; () banked
   600  000B6A  6F63               	movwf	(putIntLCD@pad+1)& (0+255),b
   601  000B6C  0E04               	movlw	4
   602  000B6E  6F62               	movwf	putIntLCD@pad& (0+255),b
   603  000B70  EC88  F004         	call	_putIntLCD	;wreg free
   604                           
   605                           ;lcddisplay.c: 58: SetLCDDDRamAddr(0x040);
   606  000B74  0E40               	movlw	64
   607  000B76  ECD3  F006         	call	_SetLCDDDRamAddr
   608                           
   609                           ;lcddisplay.c: 59: putIntLCD(Throttle,3);
   610  000B7A  C072  F060         	movff	LCDUpdate@Throttle,putIntLCD@n
   611  000B7E  0100               	movlb	0	; () banked
   612  000B80  6B61               	clrf	(putIntLCD@n+1)& (0+255),b
   613  000B82  0E00               	movlw	0
   614  000B84  0100               	movlb	0	; () banked
   615  000B86  6F63               	movwf	(putIntLCD@pad+1)& (0+255),b
   616  000B88  0E03               	movlw	3
   617  000B8A  6F62               	movwf	putIntLCD@pad& (0+255),b
   618  000B8C  EC88  F004         	call	_putIntLCD	;wreg free
   619                           
   620                           ;lcddisplay.c: 62: SetLCDDDRamAddr(0x49);
   621  000B90  0E49               	movlw	73
   622  000B92  ECD3  F006         	call	_SetLCDDDRamAddr
   623                           
   624                           ;lcddisplay.c: 63: putIntLCD(PWM,3);
   625  000B96  C073  F060         	movff	LCDUpdate@PWM,putIntLCD@n
   626  000B9A  0100               	movlb	0	; () banked
   627  000B9C  6B61               	clrf	(putIntLCD@n+1)& (0+255),b
   628  000B9E  0E00               	movlw	0
   629  000BA0  0100               	movlb	0	; () banked
   630  000BA2  6F63               	movwf	(putIntLCD@pad+1)& (0+255),b
   631  000BA4  0E03               	movlw	3
   632  000BA6  6F62               	movwf	putIntLCD@pad& (0+255),b
   633  000BA8  EC88  F004         	call	_putIntLCD	;wreg free
   634  000BAC  0012               	return		;funcret
   635  000BAE                     __end_of_LCDUpdate:
   636                           	opt stack 0
   637                           tblptru	equ	0xFF8
   638                           
   639 ;; *************** function _putIntLCD *****************
   640 ;; Defined at:
   641 ;;		line 401 in file "lcddisplay.c"
   642 ;; Parameters:    Size  Location     Type
   643 ;;  n               2    0[BANK0 ] short 
   644 ;;  pad             2    2[BANK0 ] short 
   645 ;; Auto vars:     Size  Location     Type
   646 ;;  result          3   11[BANK0 ] unsigned char [3]
   647 ;;  result          4    4[BANK0 ] unsigned char [4]
   648 ;;  result          3    8[BANK0 ] unsigned char [3]
   649 ;;  result          2   14[BANK0 ] unsigned char [2]
   650 ;; Return value:  Size  Location     Type
   651 ;;		None               void
   652 ;; Registers used:
   653 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   654 ;; Tracked objects:
   655 ;;		On entry : 0/0
   656 ;;		On exit  : 0/0
   657 ;;		Unchanged: 0/0
   658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   659 ;;      Params:         0       4       0       0       0       0       0
   660 ;;      Locals:         0      12       0       0       0       0       0
   661 ;;      Temps:          0       0       0       0       0       0       0
   662 ;;      Totals:         0      16       0       0       0       0       0
   663 ;;Total ram usage:       16 bytes
   664 ;; Hardware stack levels used:    1
   665 ;; Hardware stack levels required when called:    6
   666 ;; This function calls:
   667 ;;		_putLCD
   668 ;;		_sprintf
   669 ;; This function is called by:
   670 ;;		_LCDUpdate
   671 ;; This function uses a non-reentrant model
   672 ;;
   673                           
   674                           	psect	text2
   675  000910                     __ptext2:
   676                           	opt stack 0
   677  000910                     _putIntLCD:
   678                           	opt stack 23
   679                           
   680                           ;lcddisplay.c: 403: if (pad == 2) {
   681                           
   682                           ;incstack = 0
   683  000910  0E02               	movlw	2
   684  000912  0100               	movlb	0	; () banked
   685  000914  1962               	xorwf	putIntLCD@pad& (0+255),w,b
   686  000916  0100               	movlb	0	; () banked
   687  000918  1163               	iorwf	(putIntLCD@pad+1)& (0+255),w,b
   688  00091A  A4D8               	btfss	status,2,c
   689  00091C  D015               	goto	l1839
   690                           
   691                           ; BSR set to: 0
   692                           ;lcddisplay.c: 404: unsigned char result[2];
   693                           ;lcddisplay.c: 405: sprintf(result, "%02d", n);
   694  00091E  0E6E               	movlw	low putIntLCD@result
   695  000920  6E2C               	movwf	sprintf@sp,c
   696  000922  0E00               	movlw	high putIntLCD@result
   697  000924  6E2D               	movwf	sprintf@sp+1,c
   698  000926  0E2D               	movlw	low STR_3
   699  000928  6E2E               	movwf	sprintf@f,c
   700  00092A  0E06               	movlw	high STR_3
   701  00092C  6E2F               	movwf	sprintf@f+1,c
   702  00092E  C060  F030         	movff	putIntLCD@n,?_sprintf+4
   703  000932  C061  F031         	movff	putIntLCD@n+1,?_sprintf+5
   704  000936  EC20  F003         	call	_sprintf	;wreg free
   705                           
   706                           ;lcddisplay.c: 406: putLCD(result);
   707  00093A  0E6E               	movlw	low putIntLCD@result
   708  00093C  6E22               	movwf	putLCD@buffer,c
   709  00093E  0E00               	movlw	high putIntLCD@result
   710  000940  6E23               	movwf	putLCD@buffer+1,c
   711  000942  EC48  F006         	call	_putLCD	;wreg free
   712                           
   713                           ;lcddisplay.c: 407: } else if (pad == 3) {
   714  000946  0012               	return	
   715  000948                     l1839:
   716  000948  0E03               	movlw	3
   717  00094A  0100               	movlb	0	; () banked
   718  00094C  1962               	xorwf	putIntLCD@pad& (0+255),w,b
   719  00094E  0100               	movlb	0	; () banked
   720  000950  1163               	iorwf	(putIntLCD@pad+1)& (0+255),w,b
   721  000952  A4D8               	btfss	status,2,c
   722  000954  D015               	goto	l1845
   723                           
   724                           ; BSR set to: 0
   725                           ;lcddisplay.c: 408: unsigned char result[3];
   726                           ;lcddisplay.c: 409: sprintf(result, "%03d", n);
   727  000956  0E68               	movlw	low putIntLCD@result_887
   728  000958  6E2C               	movwf	sprintf@sp,c
   729  00095A  0E00               	movlw	high putIntLCD@result_887
   730  00095C  6E2D               	movwf	sprintf@sp+1,c
   731  00095E  0E32               	movlw	low STR_4
   732  000960  6E2E               	movwf	sprintf@f,c
   733  000962  0E06               	movlw	high STR_4
   734  000964  6E2F               	movwf	sprintf@f+1,c
   735  000966  C060  F030         	movff	putIntLCD@n,?_sprintf+4
   736  00096A  C061  F031         	movff	putIntLCD@n+1,?_sprintf+5
   737  00096E  EC20  F003         	call	_sprintf	;wreg free
   738                           
   739                           ;lcddisplay.c: 410: putLCD(result);
   740  000972  0E68               	movlw	low putIntLCD@result_887
   741  000974  6E22               	movwf	putLCD@buffer,c
   742  000976  0E00               	movlw	high putIntLCD@result_887
   743  000978  6E23               	movwf	putLCD@buffer+1,c
   744  00097A  EC48  F006         	call	_putLCD	;wreg free
   745                           
   746                           ;lcddisplay.c: 411: } else if (pad == 4) {
   747  00097E  0012               	return	
   748  000980                     l1845:
   749  000980  0E04               	movlw	4
   750  000982  0100               	movlb	0	; () banked
   751  000984  1962               	xorwf	putIntLCD@pad& (0+255),w,b
   752  000986  0100               	movlb	0	; () banked
   753  000988  1163               	iorwf	(putIntLCD@pad+1)& (0+255),w,b
   754  00098A  A4D8               	btfss	status,2,c
   755  00098C  D015               	goto	l1851
   756                           
   757                           ; BSR set to: 0
   758                           ;lcddisplay.c: 412: unsigned char result[4];
   759                           ;lcddisplay.c: 413: sprintf(result, "%04d", n);
   760  00098E  0E64               	movlw	low putIntLCD@result_889
   761  000990  6E2C               	movwf	sprintf@sp,c
   762  000992  0E00               	movlw	high putIntLCD@result_889
   763  000994  6E2D               	movwf	sprintf@sp+1,c
   764  000996  0E37               	movlw	low STR_5
   765  000998  6E2E               	movwf	sprintf@f,c
   766  00099A  0E06               	movlw	high STR_5
   767  00099C  6E2F               	movwf	sprintf@f+1,c
   768  00099E  C060  F030         	movff	putIntLCD@n,?_sprintf+4
   769  0009A2  C061  F031         	movff	putIntLCD@n+1,?_sprintf+5
   770  0009A6  EC20  F003         	call	_sprintf	;wreg free
   771                           
   772                           ;lcddisplay.c: 414: putLCD(result);
   773  0009AA  0E64               	movlw	low putIntLCD@result_889
   774  0009AC  6E22               	movwf	putLCD@buffer,c
   775  0009AE  0E00               	movlw	high putIntLCD@result_889
   776  0009B0  6E23               	movwf	putLCD@buffer+1,c
   777  0009B2  EC48  F006         	call	_putLCD	;wreg free
   778                           
   779                           ;lcddisplay.c: 415: } else {
   780  0009B6  0012               	return	
   781  0009B8                     l1851:
   782                           
   783                           ;lcddisplay.c: 416: unsigned char result[3];
   784                           ;lcddisplay.c: 417: sprintf(result, "%d", n);
   785  0009B8  0E6B               	movlw	low putIntLCD@result_891
   786  0009BA  6E2C               	movwf	sprintf@sp,c
   787  0009BC  0E00               	movlw	high putIntLCD@result_891
   788  0009BE  6E2D               	movwf	sprintf@sp+1,c
   789  0009C0  0E3C               	movlw	low STR_6
   790  0009C2  6E2E               	movwf	sprintf@f,c
   791  0009C4  0E06               	movlw	high STR_6
   792  0009C6  6E2F               	movwf	sprintf@f+1,c
   793  0009C8  C060  F030         	movff	putIntLCD@n,?_sprintf+4
   794  0009CC  C061  F031         	movff	putIntLCD@n+1,?_sprintf+5
   795  0009D0  EC20  F003         	call	_sprintf	;wreg free
   796                           
   797                           ;lcddisplay.c: 418: putLCD(result);
   798  0009D4  0E6B               	movlw	low putIntLCD@result_891
   799  0009D6  6E22               	movwf	putLCD@buffer,c
   800  0009D8  0E00               	movlw	high putIntLCD@result_891
   801  0009DA  6E23               	movwf	putLCD@buffer+1,c
   802  0009DC  EC48  F006         	call	_putLCD	;wreg free
   803  0009E0  0012               	return	
   804  0009E2  0012               	return		;funcret
   805  0009E4                     __end_of_putIntLCD:
   806                           	opt stack 0
   807                           tblptru	equ	0xFF8
   808                           status	equ	0xFD8
   809                           
   810 ;; *************** function _sprintf *****************
   811 ;; Defined at:
   812 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
   813 ;; Parameters:    Size  Location     Type
   814 ;;  sp              2   43[COMRAM] PTR unsigned char 
   815 ;;		 -> putIntLCD@result_891(3), putIntLCD@result_889(4), putIntLCD@result_887(3), putIntLCD@result(2), 
   816 ;;  f               2   45[COMRAM] PTR const unsigned char 
   817 ;;		 -> STR_6(3), STR_5(5), STR_4(5), STR_3(5), 
   818 ;; Auto vars:     Size  Location     Type
   819 ;;  tmpval          4    0        struct .
   820 ;;  cp              3    0        PTR const unsigned char 
   821 ;;  width           2   59[COMRAM] int 
   822 ;;  val             2   56[COMRAM] unsigned int 
   823 ;;  ap              2   53[COMRAM] PTR void [1]
   824 ;;		 -> ?_sprintf(2), 
   825 ;;  len             2    0        unsigned int 
   826 ;;  c               1   61[COMRAM] char 
   827 ;;  flag            1   58[COMRAM] unsigned char 
   828 ;;  prec            1   55[COMRAM] char 
   829 ;; Return value:  Size  Location     Type
   830 ;;                  2   43[COMRAM] int 
   831 ;; Registers used:
   832 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   833 ;; Tracked objects:
   834 ;;		On entry : 0/0
   835 ;;		On exit  : 0/0
   836 ;;		Unchanged: 0/0
   837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   838 ;;      Params:         6       0       0       0       0       0       0
   839 ;;      Locals:         9       0       0       0       0       0       0
   840 ;;      Temps:          4       0       0       0       0       0       0
   841 ;;      Totals:        19       0       0       0       0       0       0
   842 ;;Total ram usage:       19 bytes
   843 ;; Hardware stack levels used:    1
   844 ;; Hardware stack levels required when called:    3
   845 ;; This function calls:
   846 ;;		___lwdiv
   847 ;;		___lwmod
   848 ;;		___wmul
   849 ;;		_isdigit
   850 ;; This function is called by:
   851 ;;		_putIntLCD
   852 ;; This function uses a non-reentrant model
   853 ;;
   854                           
   855                           	psect	text3
   856  000640                     __ptext3:
   857                           	opt stack 0
   858  000640                     _sprintf:
   859                           	opt stack 25
   860                           
   861                           ;doprnt.c: 494: va_list ap;
   862                           ;doprnt.c: 499: signed char c;
   863                           ;doprnt.c: 501: int width;
   864                           ;doprnt.c: 506: signed char prec;
   865                           ;doprnt.c: 508: unsigned char flag;
   866                           ;doprnt.c: 523: union {
   867                           ;doprnt.c: 524: unsigned long vd;
   868                           ;doprnt.c: 525: double integ;
   869                           ;doprnt.c: 526: } tmpval;
   870                           ;doprnt.c: 528: unsigned int val;
   871                           ;doprnt.c: 529: unsigned len;
   872                           ;doprnt.c: 530: const char * cp;
   873                           ;doprnt.c: 533: *ap = __va_start();
   874                           
   875                           ;incstack = 0
   876  000640  0E30               	movlw	low (?_sprintf+4)
   877  000642  6E36               	movwf	sprintf@ap,c
   878  000644  0E00               	movlw	high (?_sprintf+4)
   879  000646  6E37               	movwf	sprintf@ap+1,c
   880                           
   881                           ;doprnt.c: 536: while(c = *f++) {
   882  000648  D14D               	goto	l1803
   883  00064A                     l1697:
   884                           
   885                           ;doprnt.c: 538: if(c != '%')
   886  00064A  0E25               	movlw	37
   887  00064C  183E               	xorwf	sprintf@c,w,c
   888  00064E  B4D8               	btfsc	status,2,c
   889  000650  D009               	goto	l1703
   890                           
   891                           ;doprnt.c: 540: {
   892                           ;doprnt.c: 541: ((*sp++ = (c)));
   893  000652  C02C  FFD9         	movff	sprintf@sp,fsr2l
   894  000656  C02D  FFDA         	movff	sprintf@sp+1,fsr2h
   895  00065A  C03E  FFDF         	movff	sprintf@c,indf2
   896  00065E  4A2C               	infsnz	sprintf@sp,f,c
   897  000660  2A2D               	incf	sprintf@sp+1,f,c
   898                           
   899                           ;doprnt.c: 542: continue;
   900  000662  D140               	goto	l1803
   901  000664                     l1703:
   902                           
   903                           ;doprnt.c: 543: }
   904                           ;doprnt.c: 546: width = 0;
   905  000664  0E00               	movlw	0
   906  000666  6E3D               	movwf	sprintf@width+1,c
   907  000668  0E00               	movlw	0
   908  00066A  6E3C               	movwf	sprintf@width,c
   909                           
   910                           ;doprnt.c: 548: flag = 0;
   911  00066C  0E00               	movlw	0
   912  00066E  6E3B               	movwf	sprintf@flag,c
   913                           
   914                           ;doprnt.c: 551: switch(*f) {
   915                           
   916                           ;doprnt.c: 550: for(;;) {
   917  000670  D005               	goto	l1709
   918  000672                     l1705:
   919                           
   920                           ;doprnt.c: 580: flag |= 0x04;
   921  000672  843B               	bsf	sprintf@flag,2,c
   922                           
   923                           ;doprnt.c: 581: f++;
   924  000674  4A2E               	infsnz	sprintf@f,f,c
   925  000676  2A2F               	incf	sprintf@f+1,f,c
   926                           
   927                           ;doprnt.c: 582: continue;
   928  000678  D001               	goto	l1709
   929                           
   930                           ;doprnt.c: 584: }
   931  00067A  D00B               	goto	l1711
   932  00067C                     l1709:
   933  00067C  C02E  FFF6         	movff	sprintf@f,tblptrl
   934  000680  C02F  FFF7         	movff	sprintf@f+1,tblptrh
   935  000684                     	if	0	;tblptru may be non-zero
   936  000684                     	endif
   937  000684                     	if	0	;tblptru may be non-zero
   938  000684                     	endif
   939  000684  0008               	tblrd		*
   940  000686  50F5               	movf	tablat,w,c
   941                           
   942                           ; Switch size 1, requested type "space"
   943                           ; Number of cases is 1, Range of values is 48 to 48
   944                           ; switch strategies available:
   945                           ; Name         Instructions Cycles
   946                           ; simple_byte            4     3 (average)
   947                           ;	Chosen strategy is simple_byte
   948  000688  0A30               	xorlw	48	; case 48
   949  00068A  B4D8               	btfsc	status,2,c
   950  00068C  D7F2               	goto	l1705
   951                           
   952                           ;doprnt.c: 585: break;
   953  00068E  D001               	goto	l1711
   954                           
   955                           ;doprnt.c: 586: }
   956  000690  D7F5               	goto	l1709
   957  000692                     l1711:
   958                           
   959                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
   960  000692  C02E  FFF6         	movff	sprintf@f,tblptrl
   961  000696  C02F  FFF7         	movff	sprintf@f+1,tblptrh
   962  00069A                     	if	0	;tblptru may be non-zero
   963  00069A                     	endif
   964  00069A                     	if	0	;tblptru may be non-zero
   965  00069A                     	endif
   966  00069A  0008               	tblrd		*
   967  00069C  50F5               	movf	tablat,w,c
   968  00069E  ECDB  F007         	call	_isdigit
   969  0006A2  A0D8               	btfss	status,0,c
   970  0006A4  D039               	goto	l1725
   971                           
   972                           ;doprnt.c: 598: width = 0;
   973  0006A6  0E00               	movlw	0
   974  0006A8  6E3D               	movwf	sprintf@width+1,c
   975  0006AA  0E00               	movlw	0
   976  0006AC  6E3C               	movwf	sprintf@width,c
   977  0006AE  D000               	goto	l1715
   978  0006B0                     l1715:
   979                           
   980                           ;doprnt.c: 600: width *= 10;
   981  0006B0  C03C  F020         	movff	sprintf@width,___wmul@multiplier
   982  0006B4  C03D  F021         	movff	sprintf@width+1,___wmul@multiplier+1
   983  0006B8  0E00               	movlw	0
   984  0006BA  6E23               	movwf	___wmul@multiplicand+1,c
   985  0006BC  0E0A               	movlw	10
   986  0006BE  6E22               	movwf	___wmul@multiplicand,c
   987  0006C0  ECC7  F007         	call	___wmul	;wreg free
   988  0006C4  C020  F03C         	movff	?___wmul,sprintf@width
   989  0006C8  C021  F03D         	movff	?___wmul+1,sprintf@width+1
   990                           
   991                           ;doprnt.c: 601: width += *f++ - '0';
   992  0006CC  0ED0               	movlw	208
   993  0006CE  6E32               	movwf	??_sprintf& (0+255),c
   994  0006D0  0EFF               	movlw	255
   995  0006D2  6E33               	movwf	(??_sprintf+1)& (0+255),c
   996  0006D4  C02E  FFF6         	movff	sprintf@f,tblptrl
   997  0006D8  C02F  FFF7         	movff	sprintf@f+1,tblptrh
   998  0006DC                     	if	0	;tblptru may be non-zero
   999  0006DC                     	endif
  1000  0006DC                     	if	0	;tblptru may be non-zero
  1001  0006DC                     	endif
  1002  0006DC  0008               	tblrd		*
  1003  0006DE  50F5               	movf	tablat,w,c
  1004  0006E0  6E34               	movwf	(??_sprintf+2)& (0+255),c
  1005  0006E2  6A35               	clrf	(??_sprintf+3)& (0+255),c
  1006  0006E4  5032               	movf	??_sprintf,w,c
  1007  0006E6  2634               	addwf	??_sprintf+2,f,c
  1008  0006E8  5033               	movf	??_sprintf+1,w,c
  1009  0006EA  2235               	addwfc	??_sprintf+3,f,c
  1010  0006EC  5034               	movf	??_sprintf+2,w,c
  1011  0006EE  263C               	addwf	sprintf@width,f,c
  1012  0006F0  5035               	movf	??_sprintf+3,w,c
  1013  0006F2  223D               	addwfc	sprintf@width+1,f,c
  1014  0006F4  4A2E               	infsnz	sprintf@f,f,c
  1015  0006F6  2A2F               	incf	sprintf@f+1,f,c
  1016                           
  1017                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1018  0006F8  C02E  FFF6         	movff	sprintf@f,tblptrl
  1019  0006FC  C02F  FFF7         	movff	sprintf@f+1,tblptrh
  1020  000700                     	if	0	;tblptru may be non-zero
  1021  000700                     	endif
  1022  000700                     	if	0	;tblptru may be non-zero
  1023  000700                     	endif
  1024  000700  0008               	tblrd		*
  1025  000702  50F5               	movf	tablat,w,c
  1026  000704  ECDB  F007         	call	_isdigit
  1027  000708  A0D8               	btfss	status,0,c
  1028  00070A  D006               	goto	l1725
  1029  00070C  D7D1               	goto	l1715
  1030                           
  1031                           ;doprnt.c: 608: }
  1032                           ;doprnt.c: 635: switch(c = *f++) {
  1033  00070E  D004               	goto	l1725
  1034                           
  1035                           ;doprnt.c: 638: goto alldone;
  1036                           
  1037                           ;doprnt.c: 637: case 0:
  1038  000710  D0F7               	goto	l1805
  1039                           
  1040                           ;doprnt.c: 698: case 'i':
  1041                           ;doprnt.c: 699: break;
  1042                           
  1043                           ;doprnt.c: 697: case 'd':
  1044  000712  D015               	goto	l1727
  1045                           
  1046                           ;doprnt.c: 813: continue;
  1047                           
  1048                           ;doprnt.c: 802: default:
  1049  000714  D0E7               	goto	l1803
  1050                           
  1051                           ;doprnt.c: 822: }
  1052  000716  D013               	goto	l1727
  1053  000718                     l1725:
  1054  000718  C02E  FFF6         	movff	sprintf@f,tblptrl
  1055  00071C  C02F  FFF7         	movff	sprintf@f+1,tblptrh
  1056  000720  4A2E               	infsnz	sprintf@f,f,c
  1057  000722  2A2F               	incf	sprintf@f+1,f,c
  1058  000724                     	if	0	;tblptru may be non-zero
  1059  000724                     	endif
  1060  000724                     	if	0	;tblptru may be non-zero
  1061  000724                     	endif
  1062  000724  0008               	tblrd		*
  1063  000726  CFF5 F03E          	movff	tablat,sprintf@c
  1064  00072A  503E               	movf	sprintf@c,w,c
  1065                           
  1066                           ; Switch size 1, requested type "space"
  1067                           ; Number of cases is 3, Range of values is 0 to 105
  1068                           ; switch strategies available:
  1069                           ; Name         Instructions Cycles
  1070                           ; simple_byte           10     6 (average)
  1071                           ;	Chosen strategy is simple_byte
  1072  00072C  0A00               	xorlw	0	; case 0
  1073  00072E  B4D8               	btfsc	status,2,c
  1074  000730  D0E7               	goto	l1805
  1075  000732  0A64               	xorlw	100	; case 100
  1076  000734  B4D8               	btfsc	status,2,c
  1077  000736  D003               	goto	l1727
  1078  000738  0A0D               	xorlw	13	; case 105
  1079  00073A  A4D8               	btfss	status,2,c
  1080  00073C  D0D3               	goto	l1803
  1081  00073E                     l1727:
  1082                           
  1083                           ;doprnt.c: 1253: {
  1084                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1085  00073E  C036  FFD9         	movff	sprintf@ap,fsr2l
  1086  000742  C037  FFDA         	movff	sprintf@ap+1,fsr2h
  1087  000746  CFDE F039          	movff	postinc2,sprintf@val
  1088  00074A  CFDD F03A          	movff	postdec2,sprintf@val+1
  1089  00074E  0E02               	movlw	2
  1090  000750  2636               	addwf	sprintf@ap,f,c
  1091  000752  0E00               	movlw	0
  1092  000754  2237               	addwfc	sprintf@ap+1,f,c
  1093                           
  1094                           ;doprnt.c: 1261: if((int)val < 0) {
  1095  000756  AE3A               	btfss	sprintf@val+1,7,c
  1096  000758  D007               	goto	l1737
  1097                           
  1098                           ;doprnt.c: 1262: flag |= 0x03;
  1099  00075A  0E03               	movlw	3
  1100  00075C  123B               	iorwf	sprintf@flag,f,c
  1101                           
  1102                           ;doprnt.c: 1263: val = -val;
  1103  00075E  6C39               	negf	sprintf@val,c
  1104  000760  1E3A               	comf	sprintf@val+1,f,c
  1105  000762  B0D8               	btfsc	status,0,c
  1106  000764  2A3A               	incf	sprintf@val+1,f,c
  1107  000766  D000               	goto	l1737
  1108  000768                     l1737:
  1109                           
  1110                           ;doprnt.c: 1264: }
  1111                           ;doprnt.c: 1266: }
  1112                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1113  000768  0E01               	movlw	1
  1114  00076A  6E3E               	movwf	sprintf@c,c
  1115  00076C                     l1739:
  1116  00076C  0E05               	movlw	5
  1117  00076E  183E               	xorwf	sprintf@c,w,c
  1118  000770  B4D8               	btfsc	status,2,c
  1119  000772  D016               	goto	l1751
  1120  000774  D001               	goto	l1743
  1121  000776  D014               	goto	l1751
  1122  000778                     l1743:
  1123                           
  1124                           ;doprnt.c: 1306: if(val < dpowers[c])
  1125  000778  503E               	movf	sprintf@c,w,c
  1126  00077A  0D02               	mullw	2
  1127  00077C  0E01               	movlw	low _dpowers
  1128  00077E  24F3               	addwf	prodl,w,c
  1129  000780  6EF6               	movwf	tblptrl,c
  1130  000782  0E06               	movlw	high _dpowers
  1131  000784  20F4               	addwfc	prodh,w,c
  1132  000786  6EF7               	movwf	tblptrh,c
  1133  000788                     	if	0	;There are less than 3 active tblptr bytes
  1134  000788                     	endif
  1135  000788  0009               	tblrd		*+
  1136  00078A  50F5               	movf	tablat,w,c
  1137  00078C  5C39               	subwf	sprintf@val,w,c
  1138  00078E  0009               	tblrd		*+
  1139  000790  50F5               	movf	tablat,w,c
  1140  000792  583A               	subwfb	sprintf@val+1,w,c
  1141  000794  A0D8               	btfss	status,0,c
  1142  000796  D004               	goto	l1751
  1143  000798  D001               	goto	l1747
  1144                           
  1145                           ;doprnt.c: 1307: break;
  1146  00079A  D002               	goto	l1751
  1147  00079C                     l1747:
  1148  00079C  2A3E               	incf	sprintf@c,f,c
  1149  00079E  D7E6               	goto	l1739
  1150  0007A0                     l1751:
  1151                           
  1152                           ;doprnt.c: 1345: if(width && flag & 0x03)
  1153  0007A0  503C               	movf	sprintf@width,w,c
  1154  0007A2  103D               	iorwf	sprintf@width+1,w,c
  1155  0007A4  B4D8               	btfsc	status,2,c
  1156  0007A6  D00A               	goto	l1757
  1157  0007A8  C03B  F032         	movff	sprintf@flag,??_sprintf
  1158  0007AC  0E03               	movlw	3
  1159  0007AE  1632               	andwf	??_sprintf,f,c
  1160  0007B0  B4D8               	btfsc	status,2,c
  1161  0007B2  D004               	goto	l1757
  1162                           
  1163                           ;doprnt.c: 1346: width--;
  1164  0007B4  063C               	decf	sprintf@width,f,c
  1165  0007B6  A0D8               	btfss	status,0,c
  1166  0007B8  063D               	decf	sprintf@width+1,f,c
  1167  0007BA  D000               	goto	l1757
  1168  0007BC                     l1757:
  1169                           
  1170                           ;doprnt.c: 1381: if(width > c)
  1171  0007BC  0E80               	movlw	128
  1172  0007BE  BE3E               	btfsc	sprintf@c,7,c
  1173  0007C0  0E7F               	movlw	127
  1174  0007C2  6E32               	movwf	??_sprintf& (0+255),c
  1175  0007C4  503C               	movf	sprintf@width,w,c
  1176  0007C6  5C3E               	subwf	sprintf@c,w,c
  1177  0007C8  503D               	movf	sprintf@width+1,w,c
  1178  0007CA  0A80               	xorlw	128
  1179  0007CC  5832               	subwfb	??_sprintf& (0+255),w,c
  1180  0007CE  B0D8               	btfsc	status,0,c
  1181  0007D0  D007               	goto	l1761
  1182                           
  1183                           ;doprnt.c: 1382: width -= c;
  1184  0007D2  503E               	movf	sprintf@c,w,c
  1185  0007D4  5E3C               	subwf	sprintf@width,f,c
  1186  0007D6  0E00               	movlw	0
  1187  0007D8  BE3E               	btfsc	sprintf@c,7,c
  1188  0007DA  0EFF               	movlw	255
  1189  0007DC  5A3D               	subwfb	sprintf@width+1,f,c
  1190  0007DE  D005               	goto	l1763
  1191  0007E0                     l1761:
  1192                           
  1193                           ;doprnt.c: 1383: else
  1194                           ;doprnt.c: 1384: width = 0;
  1195  0007E0  0E00               	movlw	0
  1196  0007E2  6E3D               	movwf	sprintf@width+1,c
  1197  0007E4  0E00               	movlw	0
  1198  0007E6  6E3C               	movwf	sprintf@width,c
  1199  0007E8  D000               	goto	l1763
  1200  0007EA                     l1763:
  1201                           
  1202                           ;doprnt.c: 1387: if(flag & 0x04) {
  1203  0007EA  A43B               	btfss	sprintf@flag,2,c
  1204  0007EC  D024               	goto	l1779
  1205                           
  1206                           ;doprnt.c: 1392: if(flag & 0x03)
  1207  0007EE  C03B  F032         	movff	sprintf@flag,??_sprintf
  1208  0007F2  0E03               	movlw	3
  1209  0007F4  1632               	andwf	??_sprintf,f,c
  1210  0007F6  B4D8               	btfsc	status,2,c
  1211  0007F8  D009               	goto	l1771
  1212                           
  1213                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  1214  0007FA  C02C  FFD9         	movff	sprintf@sp,fsr2l
  1215  0007FE  C02D  FFDA         	movff	sprintf@sp+1,fsr2h
  1216  000802  0E2D               	movlw	45
  1217  000804  6EDF               	movwf	indf2,c
  1218  000806  4A2C               	infsnz	sprintf@sp,f,c
  1219  000808  2A2D               	incf	sprintf@sp+1,f,c
  1220  00080A  D000               	goto	l1771
  1221  00080C                     l1771:
  1222                           
  1223                           ;doprnt.c: 1415: if(width)
  1224  00080C  503C               	movf	sprintf@width,w,c
  1225  00080E  103D               	iorwf	sprintf@width+1,w,c
  1226  000810  B4D8               	btfsc	status,2,c
  1227  000812  D035               	goto	l1793
  1228  000814                     l1773:
  1229                           
  1230                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  1231  000814  C02C  FFD9         	movff	sprintf@sp,fsr2l
  1232  000818  C02D  FFDA         	movff	sprintf@sp+1,fsr2h
  1233  00081C  0E30               	movlw	48
  1234  00081E  6EDF               	movwf	indf2,c
  1235  000820  4A2C               	infsnz	sprintf@sp,f,c
  1236  000822  2A2D               	incf	sprintf@sp+1,f,c
  1237                           
  1238                           ;doprnt.c: 1418: while(--width);
  1239  000824  063C               	decf	sprintf@width,f,c
  1240  000826  A0D8               	btfss	status,0,c
  1241  000828  063D               	decf	sprintf@width+1,f,c
  1242  00082A  503C               	movf	sprintf@width,w,c
  1243  00082C  103D               	iorwf	sprintf@width+1,w,c
  1244  00082E  B4D8               	btfsc	status,2,c
  1245  000830  D026               	goto	l1793
  1246  000832  D7F0               	goto	l1773
  1247                           
  1248                           ;doprnt.c: 1420: } else
  1249  000834  D024               	goto	l1793
  1250  000836                     l1779:
  1251                           
  1252                           ;doprnt.c: 1422: {
  1253                           ;doprnt.c: 1424: if(width
  1254                           ;doprnt.c: 1428: )
  1255  000836  503C               	movf	sprintf@width,w,c
  1256  000838  103D               	iorwf	sprintf@width+1,w,c
  1257  00083A  B4D8               	btfsc	status,2,c
  1258  00083C  D011               	goto	l1787
  1259  00083E                     l1781:
  1260                           
  1261                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  1262  00083E  C02C  FFD9         	movff	sprintf@sp,fsr2l
  1263  000842  C02D  FFDA         	movff	sprintf@sp+1,fsr2h
  1264  000846  0E20               	movlw	32
  1265  000848  6EDF               	movwf	indf2,c
  1266  00084A  4A2C               	infsnz	sprintf@sp,f,c
  1267  00084C  2A2D               	incf	sprintf@sp+1,f,c
  1268                           
  1269                           ;doprnt.c: 1431: while(--width);
  1270  00084E  063C               	decf	sprintf@width,f,c
  1271  000850  A0D8               	btfss	status,0,c
  1272  000852  063D               	decf	sprintf@width+1,f,c
  1273  000854  503C               	movf	sprintf@width,w,c
  1274  000856  103D               	iorwf	sprintf@width+1,w,c
  1275  000858  B4D8               	btfsc	status,2,c
  1276  00085A  D002               	goto	l1787
  1277  00085C  D7F0               	goto	l1781
  1278  00085E  D000               	goto	l1787
  1279  000860                     l1787:
  1280                           
  1281                           ;doprnt.c: 1438: if(flag & 0x03)
  1282  000860  C03B  F032         	movff	sprintf@flag,??_sprintf
  1283  000864  0E03               	movlw	3
  1284  000866  1632               	andwf	??_sprintf,f,c
  1285  000868  B4D8               	btfsc	status,2,c
  1286  00086A  D009               	goto	l1793
  1287                           
  1288                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  1289  00086C  C02C  FFD9         	movff	sprintf@sp,fsr2l
  1290  000870  C02D  FFDA         	movff	sprintf@sp+1,fsr2h
  1291  000874  0E2D               	movlw	45
  1292  000876  6EDF               	movwf	indf2,c
  1293  000878  4A2C               	infsnz	sprintf@sp,f,c
  1294  00087A  2A2D               	incf	sprintf@sp+1,f,c
  1295  00087C  D000               	goto	l1793
  1296  00087E                     l1793:
  1297                           
  1298                           ;doprnt.c: 1469: }
  1299                           ;doprnt.c: 1472: prec = c;
  1300  00087E  C03E  F038         	movff	sprintf@c,sprintf@prec
  1301                           
  1302                           ;doprnt.c: 1474: while(prec--) {
  1303  000882  D02A               	goto	l1801
  1304  000884                     l1795:
  1305                           
  1306                           ;doprnt.c: 1478: {
  1307                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1308  000884  5038               	movf	sprintf@prec,w,c
  1309  000886  0D02               	mullw	2
  1310  000888  0E01               	movlw	low _dpowers
  1311  00088A  24F3               	addwf	prodl,w,c
  1312  00088C  6EF6               	movwf	tblptrl,c
  1313  00088E  0E06               	movlw	high _dpowers
  1314  000890  20F4               	addwfc	prodh,w,c
  1315  000892  6EF7               	movwf	tblptrh,c
  1316  000894                     	if	0	;There are less than 3 active tblptr bytes
  1317  000894                     	endif
  1318  000894  0009               	tblrd		*+
  1319  000896  CFF5 F022          	movff	tablat,___lwdiv@divisor
  1320  00089A  000A               	tblrd		*-
  1321  00089C  CFF5 F023          	movff	tablat,___lwdiv@divisor+1
  1322  0008A0  C039  F020         	movff	sprintf@val,___lwdiv@dividend
  1323  0008A4  C03A  F021         	movff	sprintf@val+1,___lwdiv@dividend+1
  1324  0008A8  EC78  F006         	call	___lwdiv	;wreg free
  1325  0008AC  C020  F027         	movff	?___lwdiv,___lwmod@dividend
  1326  0008B0  C021  F028         	movff	?___lwdiv+1,___lwmod@dividend+1
  1327  0008B4  0E00               	movlw	0
  1328  0008B6  6E2A               	movwf	___lwmod@divisor+1,c
  1329  0008B8  0E0A               	movlw	10
  1330  0008BA  6E29               	movwf	___lwmod@divisor,c
  1331  0008BC  EC25  F007         	call	___lwmod	;wreg free
  1332  0008C0  5027               	movf	?___lwmod,w,c
  1333  0008C2  0F30               	addlw	48
  1334  0008C4  6E3E               	movwf	sprintf@c,c
  1335                           
  1336                           ;doprnt.c: 1523: }
  1337                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1338  0008C6  C02C  FFD9         	movff	sprintf@sp,fsr2l
  1339  0008CA  C02D  FFDA         	movff	sprintf@sp+1,fsr2h
  1340  0008CE  C03E  FFDF         	movff	sprintf@c,indf2
  1341  0008D2  4A2C               	infsnz	sprintf@sp,f,c
  1342  0008D4  2A2D               	incf	sprintf@sp+1,f,c
  1343  0008D6  D000               	goto	l1801
  1344  0008D8                     l1801:
  1345  0008D8  0638               	decf	sprintf@prec,f,c
  1346  0008DA  2838               	incf	sprintf@prec,w,c
  1347  0008DC  B4D8               	btfsc	status,2,c
  1348  0008DE  D002               	goto	l1803
  1349  0008E0  D7D1               	goto	l1795
  1350  0008E2  D000               	goto	l1803
  1351  0008E4                     l1803:
  1352  0008E4  C02E  FFF6         	movff	sprintf@f,tblptrl
  1353  0008E8  C02F  FFF7         	movff	sprintf@f+1,tblptrh
  1354  0008EC  4A2E               	infsnz	sprintf@f,f,c
  1355  0008EE  2A2F               	incf	sprintf@f+1,f,c
  1356  0008F0                     	if	0	;tblptru may be non-zero
  1357  0008F0                     	endif
  1358  0008F0                     	if	0	;tblptru may be non-zero
  1359  0008F0                     	endif
  1360  0008F0  0008               	tblrd		*
  1361  0008F2  CFF5 F03E          	movff	tablat,sprintf@c
  1362  0008F6  503E               	movf	sprintf@c,w,c
  1363  0008F8  B4D8               	btfsc	status,2,c
  1364  0008FA  D002               	goto	l1805
  1365  0008FC  D6A6               	goto	l1697
  1366  0008FE  D000               	goto	l1805
  1367  000900                     l1805:
  1368                           
  1369                           ;doprnt.c: 1538: *sp = 0;
  1370  000900  C02C  FFD9         	movff	sprintf@sp,fsr2l
  1371  000904  C02D  FFDA         	movff	sprintf@sp+1,fsr2h
  1372  000908  0E00               	movlw	0
  1373  00090A  6EDF               	movwf	indf2,c
  1374  00090C  0012               	return	
  1375                           
  1376                           ;doprnt.c: 1540: return 0;
  1377                           ;	Return value of _sprintf is never used
  1378  00090E  0012               	return		;funcret
  1379  000910                     __end_of_sprintf:
  1380                           	opt stack 0
  1381                           tblptru	equ	0xFF8
  1382                           tblptrh	equ	0xFF7
  1383                           tblptrl	equ	0xFF6
  1384                           tablat	equ	0xFF5
  1385                           prodh	equ	0xFF4
  1386                           prodl	equ	0xFF3
  1387                           indf2	equ	0xFDF
  1388                           postinc2	equ	0xFDE
  1389                           postdec2	equ	0xFDD
  1390                           fsr2h	equ	0xFDA
  1391                           fsr2l	equ	0xFD9
  1392                           status	equ	0xFD8
  1393                           
  1394 ;; *************** function _isdigit *****************
  1395 ;; Defined at:
  1396 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  1397 ;; Parameters:    Size  Location     Type
  1398 ;;  c               1    wreg     unsigned char 
  1399 ;; Auto vars:     Size  Location     Type
  1400 ;;  c               1   33[COMRAM] unsigned char 
  1401 ;; Return value:  Size  Location     Type
  1402 ;;		None               void
  1403 ;; Registers used:
  1404 ;;		wreg, status,2, status,0
  1405 ;; Tracked objects:
  1406 ;;		On entry : 0/0
  1407 ;;		On exit  : 0/0
  1408 ;;		Unchanged: 0/0
  1409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1410 ;;      Params:         0       0       0       0       0       0       0
  1411 ;;      Locals:         2       0       0       0       0       0       0
  1412 ;;      Temps:          1       0       0       0       0       0       0
  1413 ;;      Totals:         3       0       0       0       0       0       0
  1414 ;;Total ram usage:        3 bytes
  1415 ;; Hardware stack levels used:    1
  1416 ;; Hardware stack levels required when called:    2
  1417 ;; This function calls:
  1418 ;;		Nothing
  1419 ;; This function is called by:
  1420 ;;		_sprintf
  1421 ;; This function uses a non-reentrant model
  1422 ;;
  1423                           
  1424                           	psect	text4
  1425  000FB6                     __ptext4:
  1426                           	opt stack 0
  1427  000FB6                     _isdigit:
  1428                           	opt stack 25
  1429                           
  1430                           ;incstack = 0
  1431                           ;isdigit@c stored from wreg
  1432  000FB6  6E22               	movwf	isdigit@c,c
  1433  000FB8  0E00               	movlw	0
  1434  000FBA  6E21               	movwf	_isdigit$1303,c
  1435  000FBC  0E3A               	movlw	58
  1436  000FBE  6022               	cpfslt	isdigit@c,c
  1437  000FC0  D006               	goto	l1545
  1438  000FC2  0E2F               	movlw	47
  1439  000FC4  6422               	cpfsgt	isdigit@c,c
  1440  000FC6  D003               	goto	l1545
  1441  000FC8  0E01               	movlw	1
  1442  000FCA  6E21               	movwf	_isdigit$1303,c
  1443  000FCC  D000               	goto	l1545
  1444  000FCE                     l1545:
  1445  000FCE  C021  F020         	movff	_isdigit$1303,??_isdigit
  1446  000FD2  3020               	rrcf	??_isdigit,w,c
  1447  000FD4  0012               	return	
  1448  000FD6  0012               	return		;funcret
  1449  000FD8                     __end_of_isdigit:
  1450                           	opt stack 0
  1451                           tblptru	equ	0xFF8
  1452                           tblptrh	equ	0xFF7
  1453                           tblptrl	equ	0xFF6
  1454                           tablat	equ	0xFF5
  1455                           prodh	equ	0xFF4
  1456                           prodl	equ	0xFF3
  1457                           indf2	equ	0xFDF
  1458                           postinc2	equ	0xFDE
  1459                           postdec2	equ	0xFDD
  1460                           fsr2h	equ	0xFDA
  1461                           fsr2l	equ	0xFD9
  1462                           status	equ	0xFD8
  1463                           
  1464 ;; *************** function ___wmul *****************
  1465 ;; Defined at:
  1466 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  1467 ;; Parameters:    Size  Location     Type
  1468 ;;  multiplier      2   31[COMRAM] unsigned int 
  1469 ;;  multiplicand    2   33[COMRAM] unsigned int 
  1470 ;; Auto vars:     Size  Location     Type
  1471 ;;  product         2   35[COMRAM] unsigned int 
  1472 ;; Return value:  Size  Location     Type
  1473 ;;                  2   31[COMRAM] unsigned int 
  1474 ;; Registers used:
  1475 ;;		wreg, status,2, status,0, prodl, prodh
  1476 ;; Tracked objects:
  1477 ;;		On entry : 0/0
  1478 ;;		On exit  : 0/0
  1479 ;;		Unchanged: 0/0
  1480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1481 ;;      Params:         4       0       0       0       0       0       0
  1482 ;;      Locals:         2       0       0       0       0       0       0
  1483 ;;      Temps:          0       0       0       0       0       0       0
  1484 ;;      Totals:         6       0       0       0       0       0       0
  1485 ;;Total ram usage:        6 bytes
  1486 ;; Hardware stack levels used:    1
  1487 ;; Hardware stack levels required when called:    2
  1488 ;; This function calls:
  1489 ;;		Nothing
  1490 ;; This function is called by:
  1491 ;;		_sprintf
  1492 ;; This function uses a non-reentrant model
  1493 ;;
  1494                           
  1495                           	psect	text5
  1496  000F8E                     __ptext5:
  1497                           	opt stack 0
  1498  000F8E                     ___wmul:
  1499                           	opt stack 25
  1500                           
  1501                           ;incstack = 0
  1502  000F8E  5020               	movf	___wmul@multiplier,w,c
  1503  000F90  0222               	mulwf	___wmul@multiplicand,c
  1504  000F92  CFF3 F024          	movff	prodl,___wmul@product
  1505  000F96  CFF4 F025          	movff	prodh,___wmul@product+1
  1506  000F9A  5020               	movf	___wmul@multiplier,w,c
  1507  000F9C  0223               	mulwf	___wmul@multiplicand+1,c
  1508  000F9E  50F3               	movf	prodl,w,c
  1509  000FA0  2625               	addwf	___wmul@product+1,f,c
  1510  000FA2  5021               	movf	___wmul@multiplier+1,w,c
  1511  000FA4  0222               	mulwf	___wmul@multiplicand,c
  1512  000FA6  50F3               	movf	prodl,w,c
  1513  000FA8  2625               	addwf	___wmul@product+1,f,c
  1514  000FAA  C024  F020         	movff	___wmul@product,?___wmul
  1515  000FAE  C025  F021         	movff	___wmul@product+1,?___wmul+1
  1516  000FB2  0012               	return	
  1517  000FB4  0012               	return		;funcret
  1518  000FB6                     __end_of___wmul:
  1519                           	opt stack 0
  1520                           tblptru	equ	0xFF8
  1521                           tblptrh	equ	0xFF7
  1522                           tblptrl	equ	0xFF6
  1523                           tablat	equ	0xFF5
  1524                           prodh	equ	0xFF4
  1525                           prodl	equ	0xFF3
  1526                           indf2	equ	0xFDF
  1527                           postinc2	equ	0xFDE
  1528                           postdec2	equ	0xFDD
  1529                           fsr2h	equ	0xFDA
  1530                           fsr2l	equ	0xFD9
  1531                           status	equ	0xFD8
  1532                           
  1533 ;; *************** function ___lwmod *****************
  1534 ;; Defined at:
  1535 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  1536 ;; Parameters:    Size  Location     Type
  1537 ;;  dividend        2   38[COMRAM] unsigned int 
  1538 ;;  divisor         2   40[COMRAM] unsigned int 
  1539 ;; Auto vars:     Size  Location     Type
  1540 ;;  counter         1   42[COMRAM] unsigned char 
  1541 ;; Return value:  Size  Location     Type
  1542 ;;                  2   38[COMRAM] unsigned int 
  1543 ;; Registers used:
  1544 ;;		wreg, status,2, status,0
  1545 ;; Tracked objects:
  1546 ;;		On entry : 0/0
  1547 ;;		On exit  : 0/0
  1548 ;;		Unchanged: 0/0
  1549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1550 ;;      Params:         4       0       0       0       0       0       0
  1551 ;;      Locals:         1       0       0       0       0       0       0
  1552 ;;      Temps:          0       0       0       0       0       0       0
  1553 ;;      Totals:         5       0       0       0       0       0       0
  1554 ;;Total ram usage:        5 bytes
  1555 ;; Hardware stack levels used:    1
  1556 ;; Hardware stack levels required when called:    2
  1557 ;; This function calls:
  1558 ;;		Nothing
  1559 ;; This function is called by:
  1560 ;;		_sprintf
  1561 ;; This function uses a non-reentrant model
  1562 ;;
  1563                           
  1564                           	psect	text6
  1565  000E4A                     __ptext6:
  1566                           	opt stack 0
  1567  000E4A                     ___lwmod:
  1568                           	opt stack 25
  1569                           
  1570                           ;incstack = 0
  1571  000E4A  5029               	movf	___lwmod@divisor,w,c
  1572  000E4C  102A               	iorwf	___lwmod@divisor+1,w,c
  1573  000E4E  B4D8               	btfsc	status,2,c
  1574  000E50  D01D               	goto	l858
  1575  000E52  0E01               	movlw	1
  1576  000E54  6E2B               	movwf	___lwmod@counter,c
  1577  000E56  D005               	goto	l1583
  1578  000E58                     l1581:
  1579  000E58  90D8               	bcf	status,0,c
  1580  000E5A  3629               	rlcf	___lwmod@divisor,f,c
  1581  000E5C  362A               	rlcf	___lwmod@divisor+1,f,c
  1582  000E5E  2A2B               	incf	___lwmod@counter,f,c
  1583  000E60  D000               	goto	l1583
  1584  000E62                     l1583:
  1585  000E62  BE2A               	btfsc	___lwmod@divisor+1,7,c
  1586  000E64  D002               	goto	l1585
  1587  000E66  D7F8               	goto	l1581
  1588  000E68  D000               	goto	l1585
  1589  000E6A                     l1585:
  1590  000E6A  5029               	movf	___lwmod@divisor,w,c
  1591  000E6C  5C27               	subwf	___lwmod@dividend,w,c
  1592  000E6E  502A               	movf	___lwmod@divisor+1,w,c
  1593  000E70  5828               	subwfb	___lwmod@dividend+1,w,c
  1594  000E72  A0D8               	btfss	status,0,c
  1595  000E74  D005               	goto	l1589
  1596  000E76  5029               	movf	___lwmod@divisor,w,c
  1597  000E78  5E27               	subwf	___lwmod@dividend,f,c
  1598  000E7A  502A               	movf	___lwmod@divisor+1,w,c
  1599  000E7C  5A28               	subwfb	___lwmod@dividend+1,f,c
  1600  000E7E  D000               	goto	l1589
  1601  000E80                     l1589:
  1602  000E80  90D8               	bcf	status,0,c
  1603  000E82  322A               	rrcf	___lwmod@divisor+1,f,c
  1604  000E84  3229               	rrcf	___lwmod@divisor,f,c
  1605  000E86  2E2B               	decfsz	___lwmod@counter,f,c
  1606  000E88  D7F0               	goto	l1585
  1607  000E8A  D000               	goto	l858
  1608  000E8C                     l858:
  1609  000E8C  C027  F027         	movff	___lwmod@dividend,?___lwmod
  1610  000E90  C028  F028         	movff	___lwmod@dividend+1,?___lwmod+1
  1611  000E94  0012               	return		;funcret
  1612  000E96                     __end_of___lwmod:
  1613                           	opt stack 0
  1614                           tblptru	equ	0xFF8
  1615                           tblptrh	equ	0xFF7
  1616                           tblptrl	equ	0xFF6
  1617                           tablat	equ	0xFF5
  1618                           prodh	equ	0xFF4
  1619                           prodl	equ	0xFF3
  1620                           indf2	equ	0xFDF
  1621                           postinc2	equ	0xFDE
  1622                           postdec2	equ	0xFDD
  1623                           fsr2h	equ	0xFDA
  1624                           fsr2l	equ	0xFD9
  1625                           status	equ	0xFD8
  1626                           
  1627 ;; *************** function ___lwdiv *****************
  1628 ;; Defined at:
  1629 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  1630 ;; Parameters:    Size  Location     Type
  1631 ;;  dividend        2   31[COMRAM] unsigned int 
  1632 ;;  divisor         2   33[COMRAM] unsigned int 
  1633 ;; Auto vars:     Size  Location     Type
  1634 ;;  quotient        2   35[COMRAM] unsigned int 
  1635 ;;  counter         1   37[COMRAM] unsigned char 
  1636 ;; Return value:  Size  Location     Type
  1637 ;;                  2   31[COMRAM] unsigned int 
  1638 ;; Registers used:
  1639 ;;		wreg, status,2, status,0
  1640 ;; Tracked objects:
  1641 ;;		On entry : 0/0
  1642 ;;		On exit  : 0/0
  1643 ;;		Unchanged: 0/0
  1644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1645 ;;      Params:         4       0       0       0       0       0       0
  1646 ;;      Locals:         3       0       0       0       0       0       0
  1647 ;;      Temps:          0       0       0       0       0       0       0
  1648 ;;      Totals:         7       0       0       0       0       0       0
  1649 ;;Total ram usage:        7 bytes
  1650 ;; Hardware stack levels used:    1
  1651 ;; Hardware stack levels required when called:    2
  1652 ;; This function calls:
  1653 ;;		Nothing
  1654 ;; This function is called by:
  1655 ;;		_sprintf
  1656 ;; This function uses a non-reentrant model
  1657 ;;
  1658                           
  1659                           	psect	text7
  1660  000CF0                     __ptext7:
  1661                           	opt stack 0
  1662  000CF0                     ___lwdiv:
  1663                           	opt stack 25
  1664                           
  1665                           ;incstack = 0
  1666  000CF0  0E00               	movlw	0
  1667  000CF2  6E25               	movwf	___lwdiv@quotient+1,c
  1668  000CF4  0E00               	movlw	0
  1669  000CF6  6E24               	movwf	___lwdiv@quotient,c
  1670  000CF8  5022               	movf	___lwdiv@divisor,w,c
  1671  000CFA  1023               	iorwf	___lwdiv@divisor+1,w,c
  1672  000CFC  B4D8               	btfsc	status,2,c
  1673  000CFE  D021               	goto	l848
  1674  000D00  0E01               	movlw	1
  1675  000D02  6E26               	movwf	___lwdiv@counter,c
  1676  000D04  D005               	goto	l1563
  1677  000D06                     l1561:
  1678  000D06  90D8               	bcf	status,0,c
  1679  000D08  3622               	rlcf	___lwdiv@divisor,f,c
  1680  000D0A  3623               	rlcf	___lwdiv@divisor+1,f,c
  1681  000D0C  2A26               	incf	___lwdiv@counter,f,c
  1682  000D0E  D000               	goto	l1563
  1683  000D10                     l1563:
  1684  000D10  BE23               	btfsc	___lwdiv@divisor+1,7,c
  1685  000D12  D002               	goto	l1565
  1686  000D14  D7F8               	goto	l1561
  1687  000D16  D000               	goto	l1565
  1688  000D18                     l1565:
  1689  000D18  90D8               	bcf	status,0,c
  1690  000D1A  3624               	rlcf	___lwdiv@quotient,f,c
  1691  000D1C  3625               	rlcf	___lwdiv@quotient+1,f,c
  1692  000D1E  5022               	movf	___lwdiv@divisor,w,c
  1693  000D20  5C20               	subwf	___lwdiv@dividend,w,c
  1694  000D22  5023               	movf	___lwdiv@divisor+1,w,c
  1695  000D24  5821               	subwfb	___lwdiv@dividend+1,w,c
  1696  000D26  A0D8               	btfss	status,0,c
  1697  000D28  D006               	goto	l1573
  1698  000D2A  5022               	movf	___lwdiv@divisor,w,c
  1699  000D2C  5E20               	subwf	___lwdiv@dividend,f,c
  1700  000D2E  5023               	movf	___lwdiv@divisor+1,w,c
  1701  000D30  5A21               	subwfb	___lwdiv@dividend+1,f,c
  1702  000D32  8024               	bsf	___lwdiv@quotient,0,c
  1703  000D34  D000               	goto	l1573
  1704  000D36                     l1573:
  1705  000D36  90D8               	bcf	status,0,c
  1706  000D38  3223               	rrcf	___lwdiv@divisor+1,f,c
  1707  000D3A  3222               	rrcf	___lwdiv@divisor,f,c
  1708  000D3C  2E26               	decfsz	___lwdiv@counter,f,c
  1709  000D3E  D7EC               	goto	l1565
  1710  000D40  D000               	goto	l848
  1711  000D42                     l848:
  1712  000D42  C024  F020         	movff	___lwdiv@quotient,?___lwdiv
  1713  000D46  C025  F021         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1714  000D4A  0012               	return		;funcret
  1715  000D4C                     __end_of___lwdiv:
  1716                           	opt stack 0
  1717                           tblptru	equ	0xFF8
  1718                           tblptrh	equ	0xFF7
  1719                           tblptrl	equ	0xFF6
  1720                           tablat	equ	0xFF5
  1721                           prodh	equ	0xFF4
  1722                           prodl	equ	0xFF3
  1723                           indf2	equ	0xFDF
  1724                           postinc2	equ	0xFDE
  1725                           postdec2	equ	0xFDD
  1726                           fsr2h	equ	0xFDA
  1727                           fsr2l	equ	0xFD9
  1728                           status	equ	0xFD8
  1729                           
  1730 ;; *************** function _LCDInitialDisplay *****************
  1731 ;; Defined at:
  1732 ;;		line 10 in file "lcddisplay.c"
  1733 ;; Parameters:    Size  Location     Type
  1734 ;;		None
  1735 ;; Auto vars:     Size  Location     Type
  1736 ;;		None
  1737 ;; Return value:  Size  Location     Type
  1738 ;;		None               void
  1739 ;; Registers used:
  1740 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1741 ;; Tracked objects:
  1742 ;;		On entry : 0/0
  1743 ;;		On exit  : 0/0
  1744 ;;		Unchanged: 0/0
  1745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1746 ;;      Params:         0       0       0       0       0       0       0
  1747 ;;      Locals:         0       0       0       0       0       0       0
  1748 ;;      Temps:          0       0       0       0       0       0       0
  1749 ;;      Totals:         0       0       0       0       0       0       0
  1750 ;;Total ram usage:        0 bytes
  1751 ;; Hardware stack levels used:    1
  1752 ;; Hardware stack levels required when called:    6
  1753 ;; This function calls:
  1754 ;;		_SetLCDCGRamAddr
  1755 ;;		_SetLCDDDRamAddr
  1756 ;;		_WriteCmdLCD
  1757 ;;		_WriteDataLCD
  1758 ;;		_putLCD
  1759 ;; This function is called by:
  1760 ;;		_main
  1761 ;; This function uses a non-reentrant model
  1762 ;;
  1763                           
  1764                           	psect	text8
  1765  000AA2                     __ptext8:
  1766                           	opt stack 0
  1767  000AA2                     _LCDInitialDisplay:
  1768                           	opt stack 24
  1769                           
  1770                           ;lcddisplay.c: 13: SetLCDCGRamAddr(0x00);
  1771                           
  1772                           ;incstack = 0
  1773  000AA2  0E00               	movlw	0
  1774  000AA4  ECA6  F006         	call	_SetLCDCGRamAddr
  1775                           
  1776                           ;lcddisplay.c: 14: WriteDataLCD(0b00000);
  1777  000AA8  0E00               	movlw	0
  1778  000AAA  EC4B  F007         	call	_WriteDataLCD
  1779                           
  1780                           ;lcddisplay.c: 15: WriteDataLCD(0b01111);
  1781  000AAE  0E0F               	movlw	15
  1782  000AB0  EC4B  F007         	call	_WriteDataLCD
  1783                           
  1784                           ;lcddisplay.c: 16: WriteDataLCD(0b10001);
  1785  000AB4  0E11               	movlw	17
  1786  000AB6  EC4B  F007         	call	_WriteDataLCD
  1787                           
  1788                           ;lcddisplay.c: 17: WriteDataLCD(0b10001);
  1789  000ABA  0E11               	movlw	17
  1790  000ABC  EC4B  F007         	call	_WriteDataLCD
  1791                           
  1792                           ;lcddisplay.c: 18: WriteDataLCD(0b10001);
  1793  000AC0  0E11               	movlw	17
  1794  000AC2  EC4B  F007         	call	_WriteDataLCD
  1795                           
  1796                           ;lcddisplay.c: 19: WriteDataLCD(0b01111);
  1797  000AC6  0E0F               	movlw	15
  1798  000AC8  EC4B  F007         	call	_WriteDataLCD
  1799                           
  1800                           ;lcddisplay.c: 20: WriteDataLCD(0b00111);
  1801  000ACC  0E07               	movlw	7
  1802  000ACE  EC4B  F007         	call	_WriteDataLCD
  1803                           
  1804                           ;lcddisplay.c: 21: WriteDataLCD(0b00111);
  1805  000AD2  0E07               	movlw	7
  1806  000AD4  EC4B  F007         	call	_WriteDataLCD
  1807                           
  1808                           ;lcddisplay.c: 24: SetLCDCGRamAddr(0x08);
  1809  000AD8  0E08               	movlw	8
  1810  000ADA  ECA6  F006         	call	_SetLCDCGRamAddr
  1811                           
  1812                           ;lcddisplay.c: 25: WriteDataLCD(0b11111);
  1813  000ADE  0E1F               	movlw	31
  1814  000AE0  EC4B  F007         	call	_WriteDataLCD
  1815                           
  1816                           ;lcddisplay.c: 26: WriteDataLCD(0b10001);
  1817  000AE4  0E11               	movlw	17
  1818  000AE6  EC4B  F007         	call	_WriteDataLCD
  1819                           
  1820                           ;lcddisplay.c: 27: WriteDataLCD(0b10001);
  1821  000AEA  0E11               	movlw	17
  1822  000AEC  EC4B  F007         	call	_WriteDataLCD
  1823                           
  1824                           ;lcddisplay.c: 28: WriteDataLCD(0b10101);
  1825  000AF0  0E15               	movlw	21
  1826  000AF2  EC4B  F007         	call	_WriteDataLCD
  1827                           
  1828                           ;lcddisplay.c: 29: WriteDataLCD(0b10001);
  1829  000AF6  0E11               	movlw	17
  1830  000AF8  EC4B  F007         	call	_WriteDataLCD
  1831                           
  1832                           ;lcddisplay.c: 30: WriteDataLCD(0b10001);
  1833  000AFC  0E11               	movlw	17
  1834  000AFE  EC4B  F007         	call	_WriteDataLCD
  1835                           
  1836                           ;lcddisplay.c: 31: WriteDataLCD(0b10001);
  1837  000B02  0E11               	movlw	17
  1838  000B04  EC4B  F007         	call	_WriteDataLCD
  1839                           
  1840                           ;lcddisplay.c: 32: WriteDataLCD(0b11111);
  1841  000B08  0E1F               	movlw	31
  1842  000B0A  EC4B  F007         	call	_WriteDataLCD
  1843                           
  1844                           ;lcddisplay.c: 34: WriteCmdLCD(0b00000010);
  1845  000B0E  0E02               	movlw	2
  1846  000B10  EC6B  F007         	call	_WriteCmdLCD
  1847                           
  1848                           ;lcddisplay.c: 35: putLCD( (unsigned char *)" 00mph   0000rpm");
  1849  000B14  0E0B               	movlw	low STR_1
  1850  000B16  6E22               	movwf	putLCD@buffer,c
  1851  000B18  0E06               	movlw	high STR_1
  1852  000B1A  6E23               	movwf	putLCD@buffer+1,c
  1853  000B1C  EC48  F006         	call	_putLCD	;wreg free
  1854                           
  1855                           ;lcddisplay.c: 39: SetLCDDDRamAddr(0x040);
  1856  000B20  0E40               	movlw	64
  1857  000B22  ECD3  F006         	call	_SetLCDDDRamAddr
  1858                           
  1859                           ;lcddisplay.c: 40: putLCD( (unsigned char *)"000pwr   000 pwm");
  1860  000B26  0E1C               	movlw	low STR_2
  1861  000B28  6E22               	movwf	putLCD@buffer,c
  1862  000B2A  0E06               	movlw	high STR_2
  1863  000B2C  6E23               	movwf	putLCD@buffer+1,c
  1864  000B2E  EC48  F006         	call	_putLCD	;wreg free
  1865  000B32  0012               	return		;funcret
  1866  000B34                     __end_of_LCDInitialDisplay:
  1867                           	opt stack 0
  1868                           tblptru	equ	0xFF8
  1869                           tblptrh	equ	0xFF7
  1870                           tblptrl	equ	0xFF6
  1871                           tablat	equ	0xFF5
  1872                           prodh	equ	0xFF4
  1873                           prodl	equ	0xFF3
  1874                           indf2	equ	0xFDF
  1875                           postinc2	equ	0xFDE
  1876                           postdec2	equ	0xFDD
  1877                           fsr2h	equ	0xFDA
  1878                           fsr2l	equ	0xFD9
  1879                           status	equ	0xFD8
  1880                           
  1881 ;; *************** function _putLCD *****************
  1882 ;; Defined at:
  1883 ;;		line 428 in file "lcddisplay.c"
  1884 ;; Parameters:    Size  Location     Type
  1885 ;;  buffer          2   33[COMRAM] PTR unsigned char 
  1886 ;;		 -> putIntLCD@result_891(3), putIntLCD@result_889(4), putIntLCD@result_887(3), putIntLCD@result(2), 
  1887 ;;		 -> STR_2(17), STR_1(17), 
  1888 ;; Auto vars:     Size  Location     Type
  1889 ;;		None
  1890 ;; Return value:  Size  Location     Type
  1891 ;;		None               void
  1892 ;; Registers used:
  1893 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1894 ;; Tracked objects:
  1895 ;;		On entry : 0/0
  1896 ;;		On exit  : 0/0
  1897 ;;		Unchanged: 0/0
  1898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1899 ;;      Params:         2       0       0       0       0       0       0
  1900 ;;      Locals:         0       0       0       0       0       0       0
  1901 ;;      Temps:          0       0       0       0       0       0       0
  1902 ;;      Totals:         2       0       0       0       0       0       0
  1903 ;;Total ram usage:        2 bytes
  1904 ;; Hardware stack levels used:    1
  1905 ;; Hardware stack levels required when called:    5
  1906 ;; This function calls:
  1907 ;;		_BusyLCD
  1908 ;;		_WriteDataLCD
  1909 ;; This function is called by:
  1910 ;;		_LCDInitialDisplay
  1911 ;;		_putIntLCD
  1912 ;; This function uses a non-reentrant model
  1913 ;;
  1914                           
  1915                           	psect	text9
  1916  000C90                     __ptext9:
  1917                           	opt stack 0
  1918  000C90                     _putLCD:
  1919                           	opt stack 23
  1920                           
  1921                           ;lcddisplay.c: 430: while(*buffer)
  1922                           
  1923                           ;incstack = 0
  1924  000C90  D01B               	goto	l1625
  1925                           
  1926                           ;lcddisplay.c: 431: {
  1927                           ;lcddisplay.c: 432: while(BusyLCD());
  1928  000C92  D000               	goto	l1619
  1929  000C94                     l1619:
  1930  000C94  ECA9  F007         	call	_BusyLCD	;wreg free
  1931  000C98  0900               	iorlw	0
  1932  000C9A  A4D8               	btfss	status,2,c
  1933  000C9C  D7FB               	goto	l1619
  1934                           
  1935                           ;lcddisplay.c: 433: WriteDataLCD(*buffer);
  1936  000C9E  C022  FFF6         	movff	putLCD@buffer,tblptrl
  1937  000CA2  C023  FFF7         	movff	putLCD@buffer+1,tblptrh
  1938  000CA6  6AF8               	clrf	tblptru,c
  1939  000CA8  0E05               	movlw	(high __ramtop+-1)
  1940  000CAA  64F7               	cpfsgt	tblptrh,c
  1941  000CAC  D003               	bra	u667
  1942  000CAE  0008               	tblrd		*
  1943  000CB0  50F5               	movf	tablat,w,c
  1944  000CB2  D005               	bra	u660
  1945  000CB4                     u667:
  1946  000CB4  CFF6 FFE9          	movff	tblptrl,fsr0l
  1947  000CB8  CFF7 FFEA          	movff	tblptrh,fsr0h
  1948  000CBC  50EF               	movf	indf0,w,c
  1949  000CBE                     u660:
  1950  000CBE  EC4B  F007         	call	_WriteDataLCD
  1951                           
  1952                           ;lcddisplay.c: 434: buffer++;
  1953  000CC2  4A22               	infsnz	putLCD@buffer,f,c
  1954  000CC4  2A23               	incf	putLCD@buffer+1,f,c
  1955  000CC6  D000               	goto	l1625
  1956  000CC8                     l1625:
  1957  000CC8  C022  FFF6         	movff	putLCD@buffer,tblptrl
  1958  000CCC  C023  FFF7         	movff	putLCD@buffer+1,tblptrh
  1959  000CD0  6AF8               	clrf	tblptru,c
  1960  000CD2  0E05               	movlw	(high __ramtop+-1)
  1961  000CD4  64F7               	cpfsgt	tblptrh,c
  1962  000CD6  D003               	bra	u677
  1963  000CD8  0008               	tblrd		*
  1964  000CDA  50F5               	movf	tablat,w,c
  1965  000CDC  D005               	bra	u670
  1966  000CDE                     u677:
  1967  000CDE  CFF6 FFE9          	movff	tblptrl,fsr0l
  1968  000CE2  CFF7 FFEA          	movff	tblptrh,fsr0h
  1969  000CE6  50EF               	movf	indf0,w,c
  1970  000CE8                     u670:
  1971  000CE8  0900               	iorlw	0
  1972  000CEA  A4D8               	btfss	status,2,c
  1973  000CEC  D7D3               	goto	l1619
  1974                           
  1975                           ;lcddisplay.c: 435: }
  1976                           ;lcddisplay.c: 436: return;
  1977  000CEE  0012               	return		;funcret
  1978  000CF0                     __end_of_putLCD:
  1979                           	opt stack 0
  1980                           tblptru	equ	0xFF8
  1981                           tblptrh	equ	0xFF7
  1982                           tblptrl	equ	0xFF6
  1983                           tablat	equ	0xFF5
  1984                           prodh	equ	0xFF4
  1985                           prodl	equ	0xFF3
  1986                           indf0	equ	0xFEF
  1987                           fsr0h	equ	0xFEA
  1988                           fsr0l	equ	0xFE9
  1989                           indf2	equ	0xFDF
  1990                           postinc2	equ	0xFDE
  1991                           postdec2	equ	0xFDD
  1992                           fsr2h	equ	0xFDA
  1993                           fsr2l	equ	0xFD9
  1994                           status	equ	0xFD8
  1995                           
  1996 ;; *************** function _WriteDataLCD *****************
  1997 ;; Defined at:
  1998 ;;		line 439 in file "lcddisplay.c"
  1999 ;; Parameters:    Size  Location     Type
  2000 ;;  data            1    wreg     unsigned char 
  2001 ;; Auto vars:     Size  Location     Type
  2002 ;;  data            1   32[COMRAM] unsigned char 
  2003 ;; Return value:  Size  Location     Type
  2004 ;;		None               void
  2005 ;; Registers used:
  2006 ;;		wreg, status,2, status,0, cstack
  2007 ;; Tracked objects:
  2008 ;;		On entry : 0/0
  2009 ;;		On exit  : 0/0
  2010 ;;		Unchanged: 0/0
  2011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2012 ;;      Params:         0       0       0       0       0       0       0
  2013 ;;      Locals:         1       0       0       0       0       0       0
  2014 ;;      Temps:          0       0       0       0       0       0       0
  2015 ;;      Totals:         1       0       0       0       0       0       0
  2016 ;;Total ram usage:        1 bytes
  2017 ;; Hardware stack levels used:    1
  2018 ;; Hardware stack levels required when called:    4
  2019 ;; This function calls:
  2020 ;;		_DelayFor18TCY
  2021 ;; This function is called by:
  2022 ;;		_LCDInitialDisplay
  2023 ;;		_putLCD
  2024 ;; This function uses a non-reentrant model
  2025 ;;
  2026                           
  2027                           	psect	text10
  2028  000E96                     __ptext10:
  2029                           	opt stack 0
  2030  000E96                     _WriteDataLCD:
  2031                           	opt stack 23
  2032                           
  2033                           ;incstack = 0
  2034                           ;WriteDataLCD@data stored from wreg
  2035  000E96  6E21               	movwf	WriteDataLCD@data,c
  2036                           
  2037                           ;lcddisplay.c: 458: TRISD &= 0xf0;
  2038  000E98  0EF0               	movlw	240
  2039  000E9A  1695               	andwf	3989,f,c	;volatile
  2040                           
  2041                           ;lcddisplay.c: 459: PORTD &= 0xf0;
  2042  000E9C  0EF0               	movlw	240
  2043  000E9E  1683               	andwf	3971,f,c	;volatile
  2044                           
  2045                           ;lcddisplay.c: 460: PORTD |= ((data>>4)&0x0f);
  2046  000EA0  3821               	swapf	WriteDataLCD@data,w,c
  2047  000EA2  0B0F               	andlw	15
  2048  000EA4  0B0F               	andlw	15
  2049  000EA6  1283               	iorwf	3971,f,c	;volatile
  2050                           
  2051                           ;lcddisplay.c: 462: LATEbits.LATE0 = 1;
  2052  000EA8  808D               	bsf	3981,0,c	;volatile
  2053                           
  2054                           ;lcddisplay.c: 463: LATEbits.LATE1 = 0;
  2055  000EAA  928D               	bcf	3981,1,c	;volatile
  2056                           
  2057                           ;lcddisplay.c: 464: DelayFor18TCY();
  2058  000EAC  EC4B  F008         	call	_DelayFor18TCY	;wreg free
  2059                           
  2060                           ;lcddisplay.c: 465: LATEbits.LATE2 = 1;
  2061  000EB0  848D               	bsf	3981,2,c	;volatile
  2062                           
  2063                           ;lcddisplay.c: 466: DelayFor18TCY();
  2064  000EB2  EC4B  F008         	call	_DelayFor18TCY	;wreg free
  2065                           
  2066                           ;lcddisplay.c: 467: LATEbits.LATE2 = 0;
  2067  000EB6  948D               	bcf	3981,2,c	;volatile
  2068                           
  2069                           ;lcddisplay.c: 472: PORTD &= 0xf0;
  2070  000EB8  0EF0               	movlw	240
  2071  000EBA  1683               	andwf	3971,f,c	;volatile
  2072                           
  2073                           ;lcddisplay.c: 473: PORTD |= (data&0x0f);
  2074  000EBC  5021               	movf	WriteDataLCD@data,w,c
  2075  000EBE  0B0F               	andlw	15
  2076  000EC0  1283               	iorwf	3971,f,c	;volatile
  2077                           
  2078                           ;lcddisplay.c: 475: DelayFor18TCY();
  2079  000EC2  EC4B  F008         	call	_DelayFor18TCY	;wreg free
  2080                           
  2081                           ;lcddisplay.c: 476: LATEbits.LATE2 = 1;
  2082  000EC6  848D               	bsf	3981,2,c	;volatile
  2083                           
  2084                           ;lcddisplay.c: 477: DelayFor18TCY();
  2085  000EC8  EC4B  F008         	call	_DelayFor18TCY	;wreg free
  2086                           
  2087                           ;lcddisplay.c: 478: LATEbits.LATE2 = 0;
  2088  000ECC  948D               	bcf	3981,2,c	;volatile
  2089                           
  2090                           ;lcddisplay.c: 482: TRISD |= 0x0f;
  2091  000ECE  0E0F               	movlw	15
  2092  000ED0  1295               	iorwf	3989,f,c	;volatile
  2093  000ED2  0012               	return	
  2094                           
  2095                           ;lcddisplay.c: 486: return;
  2096  000ED4  0012               	return		;funcret
  2097  000ED6                     __end_of_WriteDataLCD:
  2098                           	opt stack 0
  2099                           tblptru	equ	0xFF8
  2100                           tblptrh	equ	0xFF7
  2101                           tblptrl	equ	0xFF6
  2102                           tablat	equ	0xFF5
  2103                           prodh	equ	0xFF4
  2104                           prodl	equ	0xFF3
  2105                           indf0	equ	0xFEF
  2106                           fsr0h	equ	0xFEA
  2107                           fsr0l	equ	0xFE9
  2108                           indf2	equ	0xFDF
  2109                           postinc2	equ	0xFDE
  2110                           postdec2	equ	0xFDD
  2111                           fsr2h	equ	0xFDA
  2112                           fsr2l	equ	0xFD9
  2113                           status	equ	0xFD8
  2114                           
  2115 ;; *************** function _SetLCDCGRamAddr *****************
  2116 ;; Defined at:
  2117 ;;		line 350 in file "lcddisplay.c"
  2118 ;; Parameters:    Size  Location     Type
  2119 ;;  CGaddr          1    wreg     unsigned char 
  2120 ;; Auto vars:     Size  Location     Type
  2121 ;;  CGaddr          1   35[COMRAM] unsigned char 
  2122 ;; Return value:  Size  Location     Type
  2123 ;;		None               void
  2124 ;; Registers used:
  2125 ;;		wreg, status,2, status,0, cstack
  2126 ;; Tracked objects:
  2127 ;;		On entry : 0/0
  2128 ;;		On exit  : 0/0
  2129 ;;		Unchanged: 0/0
  2130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2131 ;;      Params:         0       0       0       0       0       0       0
  2132 ;;      Locals:         1       0       0       0       0       0       0
  2133 ;;      Temps:          3       0       0       0       0       0       0
  2134 ;;      Totals:         4       0       0       0       0       0       0
  2135 ;;Total ram usage:        4 bytes
  2136 ;; Hardware stack levels used:    1
  2137 ;; Hardware stack levels required when called:    4
  2138 ;; This function calls:
  2139 ;;		_DelayFor18TCY
  2140 ;; This function is called by:
  2141 ;;		_LCDInitialDisplay
  2142 ;; This function uses a non-reentrant model
  2143 ;;
  2144                           
  2145                           	psect	text11
  2146  000D4C                     __ptext11:
  2147                           	opt stack 0
  2148  000D4C                     _SetLCDCGRamAddr:
  2149                           	opt stack 25
  2150                           
  2151                           ;incstack = 0
  2152                           ;SetLCDCGRamAddr@CGaddr stored from wreg
  2153  000D4C  6E24               	movwf	SetLCDCGRamAddr@CGaddr,c
  2154                           
  2155                           ;lcddisplay.c: 369: TRISD &= 0xf0;
  2156  000D4E  0EF0               	movlw	240
  2157  000D50  1695               	andwf	3989,f,c	;volatile
  2158                           
  2159                           ;lcddisplay.c: 370: PORTD &= 0xf0;
  2160  000D52  0EF0               	movlw	240
  2161  000D54  1683               	andwf	3971,f,c	;volatile
  2162                           
  2163                           ;lcddisplay.c: 371: PORTD |= (((CGaddr |0b01000000)>>4) & 0x0f);
  2164  000D56  5024               	movf	SetLCDCGRamAddr@CGaddr,w,c
  2165  000D58  6E21               	movwf	??_SetLCDCGRamAddr& (0+255),c
  2166  000D5A  6A22               	clrf	(??_SetLCDCGRamAddr+1)& (0+255),c
  2167  000D5C  0E40               	movlw	64
  2168  000D5E  1221               	iorwf	??_SetLCDCGRamAddr,f,c
  2169  000D60  0E00               	movlw	0
  2170  000D62  1222               	iorwf	??_SetLCDCGRamAddr+1,f,c
  2171  000D64  0E04               	movlw	4
  2172  000D66  6E23               	movwf	(??_SetLCDCGRamAddr+2)& (0+255),c
  2173  000D68                     u905:
  2174  000D68  3422               	rlcf	??_SetLCDCGRamAddr+1,w,c
  2175  000D6A  3222               	rrcf	??_SetLCDCGRamAddr+1,f,c
  2176  000D6C  3221               	rrcf	??_SetLCDCGRamAddr,f,c
  2177  000D6E  2E23               	decfsz	(??_SetLCDCGRamAddr+2)& (0+255),f,c
  2178  000D70  D7FB               	goto	u905
  2179  000D72  5021               	movf	??_SetLCDCGRamAddr,w,c
  2180  000D74  0B0F               	andlw	15
  2181  000D76  1283               	iorwf	3971,f,c	;volatile
  2182                           
  2183                           ;lcddisplay.c: 373: LATEbits.LATE1 = 0;
  2184  000D78  928D               	bcf	3981,1,c	;volatile
  2185                           
  2186                           ;lcddisplay.c: 374: LATEbits.LATE0 = 0;
  2187  000D7A  908D               	bcf	3981,0,c	;volatile
  2188                           
  2189                           ;lcddisplay.c: 375: DelayFor18TCY();
  2190  000D7C  EC4B  F008         	call	_DelayFor18TCY	;wreg free
  2191                           
  2192                           ;lcddisplay.c: 376: LATEbits.LATE2 = 1;
  2193  000D80  848D               	bsf	3981,2,c	;volatile
  2194                           
  2195                           ;lcddisplay.c: 377: DelayFor18TCY();
  2196  000D82  EC4B  F008         	call	_DelayFor18TCY	;wreg free
  2197                           
  2198                           ;lcddisplay.c: 378: LATEbits.LATE2 = 0;
  2199  000D86  948D               	bcf	3981,2,c	;volatile
  2200                           
  2201                           ;lcddisplay.c: 383: PORTD &= 0xf0;
  2202  000D88  0EF0               	movlw	240
  2203  000D8A  1683               	andwf	3971,f,c	;volatile
  2204                           
  2205                           ;lcddisplay.c: 384: PORTD |= (CGaddr&0x0f);
  2206  000D8C  5024               	movf	SetLCDCGRamAddr@CGaddr,w,c
  2207  000D8E  0B0F               	andlw	15
  2208  000D90  1283               	iorwf	3971,f,c	;volatile
  2209                           
  2210                           ;lcddisplay.c: 386: DelayFor18TCY();
  2211  000D92  EC4B  F008         	call	_DelayFor18TCY	;wreg free
  2212                           
  2213                           ;lcddisplay.c: 387: LATEbits.LATE2 = 1;
  2214  000D96  848D               	bsf	3981,2,c	;volatile
  2215                           
  2216                           ;lcddisplay.c: 388: DelayFor18TCY();
  2217  000D98  EC4B  F008         	call	_DelayFor18TCY	;wreg free
  2218                           
  2219                           ;lcddisplay.c: 389: LATEbits.LATE2 = 0;
  2220  000D9C  948D               	bcf	3981,2,c	;volatile
  2221                           
  2222                           ;lcddisplay.c: 393: TRISD |= 0x0f;
  2223  000D9E  0E0F               	movlw	15
  2224  000DA0  1295               	iorwf	3989,f,c	;volatile
  2225  000DA2  0012               	return	
  2226                           
  2227                           ;lcddisplay.c: 397: return;
  2228  000DA4  0012               	return		;funcret
  2229  000DA6                     __end_of_SetLCDCGRamAddr:
  2230                           	opt stack 0
  2231                           tblptru	equ	0xFF8
  2232                           tblptrh	equ	0xFF7
  2233                           tblptrl	equ	0xFF6
  2234                           tablat	equ	0xFF5
  2235                           prodh	equ	0xFF4
  2236                           prodl	equ	0xFF3
  2237                           indf0	equ	0xFEF
  2238                           fsr0h	equ	0xFEA
  2239                           fsr0l	equ	0xFE9
  2240                           indf2	equ	0xFDF
  2241                           postinc2	equ	0xFDE
  2242                           postdec2	equ	0xFDD
  2243                           fsr2h	equ	0xFDA
  2244                           fsr2l	equ	0xFD9
  2245                           status	equ	0xFD8
  2246                           
  2247 ;; *************** function _InitPorts *****************
  2248 ;; Defined at:
  2249 ;;		line 42 in file "ports.c"
  2250 ;; Parameters:    Size  Location     Type
  2251 ;;		None
  2252 ;; Auto vars:     Size  Location     Type
  2253 ;;		None
  2254 ;; Return value:  Size  Location     Type
  2255 ;;		None               void
  2256 ;; Registers used:
  2257 ;;		wreg, status,2
  2258 ;; Tracked objects:
  2259 ;;		On entry : 0/0
  2260 ;;		On exit  : 0/0
  2261 ;;		Unchanged: 0/0
  2262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2263 ;;      Params:         0       0       0       0       0       0       0
  2264 ;;      Locals:         0       0       0       0       0       0       0
  2265 ;;      Temps:          0       0       0       0       0       0       0
  2266 ;;      Totals:         0       0       0       0       0       0       0
  2267 ;;Total ram usage:        0 bytes
  2268 ;; Hardware stack levels used:    1
  2269 ;; Hardware stack levels required when called:    2
  2270 ;; This function calls:
  2271 ;;		Nothing
  2272 ;; This function is called by:
  2273 ;;		_main
  2274 ;; This function uses a non-reentrant model
  2275 ;;
  2276                           
  2277                           	psect	text12
  2278  000FD8                     __ptext12:
  2279                           	opt stack 0
  2280  000FD8                     _InitPorts:
  2281                           	opt stack 28
  2282                           
  2283                           ;ports.c: 44: ANSEL = 0;
  2284                           
  2285                           ;incstack = 0
  2286  000FD8  0E00               	movlw	0
  2287  000FDA  6E7E               	movwf	3966,c	;volatile
  2288                           
  2289                           ;ports.c: 45: ANSELH = 0;
  2290  000FDC  0E00               	movlw	0
  2291  000FDE  6E7F               	movwf	3967,c	;volatile
  2292                           
  2293                           ;ports.c: 57: TRISA = 0b11100000;
  2294  000FE0  0EE0               	movlw	224
  2295  000FE2  6E92               	movwf	3986,c	;volatile
  2296                           
  2297                           ;ports.c: 58: ANSEL = 0b11100000;
  2298  000FE4  0EE0               	movlw	224
  2299  000FE6  6E7E               	movwf	3966,c	;volatile
  2300                           
  2301                           ;ports.c: 70: INTCON2bits.RBPU = 0;
  2302  000FE8  9EF1               	bcf	intcon2,7,c	;volatile
  2303                           
  2304                           ;ports.c: 71: WPUBbits.WPUB0 = 1;
  2305  000FEA  807C               	bsf	3964,0,c	;volatile
  2306                           
  2307                           ;ports.c: 73: TRISB = 0b00110111;
  2308  000FEC  0E37               	movlw	55
  2309  000FEE  6E93               	movwf	3987,c	;volatile
  2310                           
  2311                           ;ports.c: 77: TRISCbits.RC2 = 0;
  2312  000FF0  9494               	bcf	3988,2,c	;volatile
  2313                           
  2314                           ;ports.c: 90: TRISD = 0b00010000;
  2315  000FF2  0E10               	movlw	16
  2316  000FF4  6E95               	movwf	3989,c	;volatile
  2317  000FF6  0012               	return		;funcret
  2318  000FF8                     __end_of_InitPorts:
  2319                           	opt stack 0
  2320                           tblptru	equ	0xFF8
  2321                           tblptrh	equ	0xFF7
  2322                           tblptrl	equ	0xFF6
  2323                           tablat	equ	0xFF5
  2324                           prodh	equ	0xFF4
  2325                           prodl	equ	0xFF3
  2326                           intcon2	equ	0xFF1
  2327                           indf0	equ	0xFEF
  2328                           fsr0h	equ	0xFEA
  2329                           fsr0l	equ	0xFE9
  2330                           indf2	equ	0xFDF
  2331                           postinc2	equ	0xFDE
  2332                           postdec2	equ	0xFDD
  2333                           fsr2h	equ	0xFDA
  2334                           fsr2l	equ	0xFD9
  2335                           status	equ	0xFD8
  2336                           
  2337 ;; *************** function _InitMotorPWM *****************
  2338 ;; Defined at:
  2339 ;;		line 106 in file "ports.c"
  2340 ;; Parameters:    Size  Location     Type
  2341 ;;		None
  2342 ;; Auto vars:     Size  Location     Type
  2343 ;;		None
  2344 ;; Return value:  Size  Location     Type
  2345 ;;		None               void
  2346 ;; Registers used:
  2347 ;;		wreg, status,2
  2348 ;; Tracked objects:
  2349 ;;		On entry : 0/0
  2350 ;;		On exit  : 0/0
  2351 ;;		Unchanged: 0/0
  2352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2353 ;;      Params:         0       0       0       0       0       0       0
  2354 ;;      Locals:         0       0       0       0       0       0       0
  2355 ;;      Temps:          0       0       0       0       0       0       0
  2356 ;;      Totals:         0       0       0       0       0       0       0
  2357 ;;Total ram usage:        0 bytes
  2358 ;; Hardware stack levels used:    1
  2359 ;; Hardware stack levels required when called:    2
  2360 ;; This function calls:
  2361 ;;		Nothing
  2362 ;; This function is called by:
  2363 ;;		_main
  2364 ;; This function uses a non-reentrant model
  2365 ;;
  2366                           
  2367                           	psect	text13
  2368  00105E                     __ptext13:
  2369                           	opt stack 0
  2370  00105E                     _InitMotorPWM:
  2371                           	opt stack 28
  2372                           
  2373                           ;ports.c: 108: CCP1CON = 0b00001100;
  2374                           
  2375                           ;incstack = 0
  2376  00105E  0E0C               	movlw	12
  2377  001060  6EBD               	movwf	4029,c	;volatile
  2378                           
  2379                           ;ports.c: 111: PR2 = 255;
  2380  001062  68CB               	setf	4043,c	;volatile
  2381                           
  2382                           ;ports.c: 114: T2CON = 0b00001100;
  2383  001064  0E0C               	movlw	12
  2384  001066  6ECA               	movwf	4042,c	;volatile
  2385                           
  2386                           ;ports.c: 117: CCPR1L = 0;
  2387  001068  0E00               	movlw	0
  2388  00106A  6EBE               	movwf	4030,c	;volatile
  2389  00106C  0012               	return		;funcret
  2390  00106E                     __end_of_InitMotorPWM:
  2391                           	opt stack 0
  2392                           tblptru	equ	0xFF8
  2393                           tblptrh	equ	0xFF7
  2394                           tblptrl	equ	0xFF6
  2395                           tablat	equ	0xFF5
  2396                           prodh	equ	0xFF4
  2397                           prodl	equ	0xFF3
  2398                           intcon2	equ	0xFF1
  2399                           indf0	equ	0xFEF
  2400                           fsr0h	equ	0xFEA
  2401                           fsr0l	equ	0xFE9
  2402                           indf2	equ	0xFDF
  2403                           postinc2	equ	0xFDE
  2404                           postdec2	equ	0xFDD
  2405                           fsr2h	equ	0xFDA
  2406                           fsr2l	equ	0xFD9
  2407                           status	equ	0xFD8
  2408                           
  2409 ;; *************** function _InitLCD *****************
  2410 ;; Defined at:
  2411 ;;		line 70 in file "lcddisplay.c"
  2412 ;; Parameters:    Size  Location     Type
  2413 ;;		None
  2414 ;; Auto vars:     Size  Location     Type
  2415 ;;		None
  2416 ;; Return value:  Size  Location     Type
  2417 ;;		None               void
  2418 ;; Registers used:
  2419 ;;		wreg, status,2, status,0, cstack
  2420 ;; Tracked objects:
  2421 ;;		On entry : 0/0
  2422 ;;		On exit  : 0/0
  2423 ;;		Unchanged: 0/0
  2424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2425 ;;      Params:         0       0       0       0       0       0       0
  2426 ;;      Locals:         0       0       0       0       0       0       0
  2427 ;;      Temps:          0       0       0       0       0       0       0
  2428 ;;      Totals:         0       0       0       0       0       0       0
  2429 ;;Total ram usage:        0 bytes
  2430 ;; Hardware stack levels used:    1
  2431 ;; Hardware stack levels required when called:    6
  2432 ;; This function calls:
  2433 ;;		_BusyLCD
  2434 ;;		_OpenLCD
  2435 ;;		_WriteCmdLCD
  2436 ;; This function is called by:
  2437 ;;		_main
  2438 ;; This function uses a non-reentrant model
  2439 ;;
  2440                           
  2441                           	psect	text14
  2442  000DFA                     __ptext14:
  2443                           	opt stack 0
  2444  000DFA                     _InitLCD:
  2445                           	opt stack 24
  2446                           
  2447                           ;lcddisplay.c: 71: OpenLCD(0b00101100 & 0b00111000);
  2448                           
  2449                           ;incstack = 0
  2450  000DFA  0E28               	movlw	40
  2451  000DFC  ECF2  F004         	call	_OpenLCD
  2452                           
  2453                           ;lcddisplay.c: 72: while(BusyLCD());
  2454  000E00  D000               	goto	l1925
  2455  000E02                     l1925:
  2456  000E02  ECA9  F007         	call	_BusyLCD	;wreg free
  2457  000E06  0900               	iorlw	0
  2458  000E08  A4D8               	btfss	status,2,c
  2459  000E0A  D7FB               	goto	l1925
  2460                           
  2461                           ;lcddisplay.c: 73: WriteCmdLCD(0x06);
  2462  000E0C  0E06               	movlw	6
  2463  000E0E  EC6B  F007         	call	_WriteCmdLCD
  2464                           
  2465                           ;lcddisplay.c: 74: while(BusyLCD());
  2466  000E12  D000               	goto	l1929
  2467  000E14                     l1929:
  2468  000E14  ECA9  F007         	call	_BusyLCD	;wreg free
  2469  000E18  0900               	iorlw	0
  2470  000E1A  A4D8               	btfss	status,2,c
  2471  000E1C  D7FB               	goto	l1929
  2472                           
  2473                           ;lcddisplay.c: 75: WriteCmdLCD(0x0C);
  2474  000E1E  0E0C               	movlw	12
  2475  000E20  EC6B  F007         	call	_WriteCmdLCD
  2476                           
  2477                           ;lcddisplay.c: 76: while(BusyLCD());
  2478  000E24  D000               	goto	l1933
  2479  000E26                     l1933:
  2480  000E26  ECA9  F007         	call	_BusyLCD	;wreg free
  2481  000E2A  0900               	iorlw	0
  2482  000E2C  A4D8               	btfss	status,2,c
  2483  000E2E  D7FB               	goto	l1933
  2484                           
  2485                           ;lcddisplay.c: 77: WriteCmdLCD(0x01);
  2486  000E30  0E01               	movlw	1
  2487  000E32  EC6B  F007         	call	_WriteCmdLCD
  2488                           
  2489                           ;lcddisplay.c: 78: while(BusyLCD());
  2490  000E36  D000               	goto	l1937
  2491  000E38                     l1937:
  2492  000E38  ECA9  F007         	call	_BusyLCD	;wreg free
  2493  000E3C  0900               	iorlw	0
  2494  000E3E  A4D8               	btfss	status,2,c
  2495  000E40  D7FB               	goto	l1937
  2496                           
  2497                           ;lcddisplay.c: 79: WriteCmdLCD(66);
  2498  000E42  0E42               	movlw	66
  2499  000E44  EC6B  F007         	call	_WriteCmdLCD
  2500  000E48  0012               	return		;funcret
  2501  000E4A                     __end_of_InitLCD:
  2502                           	opt stack 0
  2503                           tblptru	equ	0xFF8
  2504                           tblptrh	equ	0xFF7
  2505                           tblptrl	equ	0xFF6
  2506                           tablat	equ	0xFF5
  2507                           prodh	equ	0xFF4
  2508                           prodl	equ	0xFF3
  2509                           intcon2	equ	0xFF1
  2510                           indf0	equ	0xFEF
  2511                           fsr0h	equ	0xFEA
  2512                           fsr0l	equ	0xFE9
  2513                           indf2	equ	0xFDF
  2514                           postinc2	equ	0xFDE
  2515                           postdec2	equ	0xFDD
  2516                           fsr2h	equ	0xFDA
  2517                           fsr2l	equ	0xFD9
  2518                           status	equ	0xFD8
  2519                           
  2520 ;; *************** function _OpenLCD *****************
  2521 ;; Defined at:
  2522 ;;		line 88 in file "lcddisplay.c"
  2523 ;; Parameters:    Size  Location     Type
  2524 ;;  lcdtype         1    wreg     unsigned char 
  2525 ;; Auto vars:     Size  Location     Type
  2526 ;;  lcdtype         1   36[COMRAM] unsigned char 
  2527 ;; Return value:  Size  Location     Type
  2528 ;;		None               void
  2529 ;; Registers used:
  2530 ;;		wreg, status,2, status,0, cstack
  2531 ;; Tracked objects:
  2532 ;;		On entry : 0/0
  2533 ;;		On exit  : 0/0
  2534 ;;		Unchanged: 0/0
  2535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2536 ;;      Params:         0       0       0       0       0       0       0
  2537 ;;      Locals:         1       0       0       0       0       0       0
  2538 ;;      Temps:          0       0       0       0       0       0       0
  2539 ;;      Totals:         1       0       0       0       0       0       0
  2540 ;;Total ram usage:        1 bytes
  2541 ;; Hardware stack levels used:    1
  2542 ;; Hardware stack levels required when called:    5
  2543 ;; This function calls:
  2544 ;;		_BusyLCD
  2545 ;;		_BusyXLCD
  2546 ;;		_Delay100TCYx
  2547 ;;		_Delay10KTCYx
  2548 ;;		_SetLCDDDRamAddr
  2549 ;;		_WriteCmdLCD
  2550 ;; This function is called by:
  2551 ;;		_InitLCD
  2552 ;; This function uses a non-reentrant model
  2553 ;;
  2554                           
  2555                           	psect	text15
  2556  0009E4                     __ptext15:
  2557                           	opt stack 0
  2558  0009E4                     _OpenLCD:
  2559                           	opt stack 24
  2560                           
  2561                           ;incstack = 0
  2562                           ;OpenLCD@lcdtype stored from wreg
  2563  0009E4  6E25               	movwf	OpenLCD@lcdtype,c
  2564                           
  2565                           ;lcddisplay.c: 91: Delay100TCYx(38);
  2566  0009E6  0E26               	movlw	38
  2567  0009E8  EC1D  F008         	call	_Delay100TCYx
  2568                           
  2569                           ;lcddisplay.c: 102: PORTD &= 0xf0;
  2570  0009EC  0EF0               	movlw	240
  2571  0009EE  1683               	andwf	3971,f,c	;volatile
  2572                           
  2573                           ;lcddisplay.c: 103: TRISD &= 0xF0;
  2574  0009F0  0EF0               	movlw	240
  2575  0009F2  1695               	andwf	3989,f,c	;volatile
  2576                           
  2577                           ;lcddisplay.c: 106: TRISEbits.TRISE1 = 0;
  2578  0009F4  9296               	bcf	3990,1,c	;volatile
  2579                           
  2580                           ;lcddisplay.c: 107: TRISEbits.TRISE0 = 0;
  2581  0009F6  9096               	bcf	3990,0,c	;volatile
  2582                           
  2583                           ;lcddisplay.c: 108: TRISEbits.TRISE2 = 0;
  2584  0009F8  9496               	bcf	3990,2,c	;volatile
  2585                           
  2586                           ;lcddisplay.c: 109: LATEbits.LATE1 = 0;
  2587  0009FA  928D               	bcf	3981,1,c	;volatile
  2588                           
  2589                           ;lcddisplay.c: 110: LATEbits.LATE0 = 0;
  2590  0009FC  908D               	bcf	3981,0,c	;volatile
  2591                           
  2592                           ;lcddisplay.c: 111: LATEbits.LATE2 = 0;
  2593  0009FE  948D               	bcf	3981,2,c	;volatile
  2594                           
  2595                           ;lcddisplay.c: 114: Delay100TCYx(38);
  2596  000A00  0E26               	movlw	38
  2597  000A02  EC1D  F008         	call	_Delay100TCYx
  2598                           
  2599                           ;lcddisplay.c: 117: WriteCmdLCD(0x30);
  2600  000A06  0E30               	movlw	48
  2601  000A08  EC6B  F007         	call	_WriteCmdLCD
  2602                           
  2603                           ;lcddisplay.c: 118: Delay10KTCYx(0x05);
  2604  000A0C  0E05               	movlw	5
  2605  000A0E  ECFC  F007         	call	_Delay10KTCYx
  2606                           
  2607                           ;lcddisplay.c: 120: WriteCmdLCD(0x30);
  2608  000A12  0E30               	movlw	48
  2609  000A14  EC6B  F007         	call	_WriteCmdLCD
  2610                           
  2611                           ;lcddisplay.c: 121: Delay10KTCYx(0x01);
  2612  000A18  0E01               	movlw	1
  2613  000A1A  ECFC  F007         	call	_Delay10KTCYx
  2614                           
  2615                           ;lcddisplay.c: 124: WriteCmdLCD(0x32);
  2616  000A1E  0E32               	movlw	50
  2617  000A20  EC6B  F007         	call	_WriteCmdLCD
  2618                           
  2619                           ;lcddisplay.c: 125: while( BusyXLCD() );
  2620  000A24  D000               	goto	l1881
  2621  000A26                     l1881:
  2622  000A26  EC8B  F007         	call	_BusyXLCD	;wreg free
  2623  000A2A  0900               	iorlw	0
  2624  000A2C  B4D8               	btfsc	status,2,c
  2625  000A2E  D002               	goto	l1883
  2626  000A30  D7FA               	goto	l1881
  2627                           
  2628                           ;lcddisplay.c: 130: while(BusyLCD());
  2629  000A32  D000               	goto	l1883
  2630  000A34                     l1883:
  2631  000A34  ECA9  F007         	call	_BusyLCD	;wreg free
  2632  000A38  0900               	iorlw	0
  2633  000A3A  A4D8               	btfss	status,2,c
  2634  000A3C  D7FB               	goto	l1883
  2635                           
  2636                           ;lcddisplay.c: 131: WriteCmdLCD(lcdtype);
  2637  000A3E  5025               	movf	OpenLCD@lcdtype,w,c
  2638  000A40  EC6B  F007         	call	_WriteCmdLCD
  2639                           
  2640                           ;lcddisplay.c: 134: while(BusyLCD());
  2641  000A44  D000               	goto	l1887
  2642  000A46                     l1887:
  2643  000A46  ECA9  F007         	call	_BusyLCD	;wreg free
  2644  000A4A  0900               	iorlw	0
  2645  000A4C  A4D8               	btfss	status,2,c
  2646  000A4E  D7FB               	goto	l1887
  2647                           
  2648                           ;lcddisplay.c: 135: WriteCmdLCD(0b00001011&0b00001101&0b00001110);
  2649  000A50  0E08               	movlw	8
  2650  000A52  EC6B  F007         	call	_WriteCmdLCD
  2651                           
  2652                           ;lcddisplay.c: 136: while(BusyLCD());
  2653  000A56  D000               	goto	l1891
  2654  000A58                     l1891:
  2655  000A58  ECA9  F007         	call	_BusyLCD	;wreg free
  2656  000A5C  0900               	iorlw	0
  2657  000A5E  A4D8               	btfss	status,2,c
  2658  000A60  D7FB               	goto	l1891
  2659                           
  2660                           ;lcddisplay.c: 137: WriteCmdLCD(0b00001111&0b00001111&0b00001111);
  2661  000A62  0E0F               	movlw	15
  2662  000A64  EC6B  F007         	call	_WriteCmdLCD
  2663                           
  2664                           ;lcddisplay.c: 140: while(BusyLCD());
  2665  000A68  D000               	goto	l1895
  2666  000A6A                     l1895:
  2667  000A6A  ECA9  F007         	call	_BusyLCD	;wreg free
  2668  000A6E  0900               	iorlw	0
  2669  000A70  A4D8               	btfss	status,2,c
  2670  000A72  D7FB               	goto	l1895
  2671                           
  2672                           ;lcddisplay.c: 141: WriteCmdLCD(0x01);
  2673  000A74  0E01               	movlw	1
  2674  000A76  EC6B  F007         	call	_WriteCmdLCD
  2675                           
  2676                           ;lcddisplay.c: 144: while(BusyLCD());
  2677  000A7A  D000               	goto	l1899
  2678  000A7C                     l1899:
  2679  000A7C  ECA9  F007         	call	_BusyLCD	;wreg free
  2680  000A80  0900               	iorlw	0
  2681  000A82  A4D8               	btfss	status,2,c
  2682  000A84  D7FB               	goto	l1899
  2683                           
  2684                           ;lcddisplay.c: 145: WriteCmdLCD(0b00000100);
  2685  000A86  0E04               	movlw	4
  2686  000A88  EC6B  F007         	call	_WriteCmdLCD
  2687                           
  2688                           ;lcddisplay.c: 148: while(BusyLCD());
  2689  000A8C  D000               	goto	l1903
  2690  000A8E                     l1903:
  2691  000A8E  ECA9  F007         	call	_BusyLCD	;wreg free
  2692  000A92  0900               	iorlw	0
  2693  000A94  A4D8               	btfss	status,2,c
  2694  000A96  D7FB               	goto	l1903
  2695                           
  2696                           ;lcddisplay.c: 149: SetLCDDDRamAddr(0x80);
  2697  000A98  0E80               	movlw	128
  2698  000A9A  ECD3  F006         	call	_SetLCDDDRamAddr
  2699  000A9E  0012               	return	
  2700                           
  2701                           ;lcddisplay.c: 151: return;
  2702  000AA0  0012               	return		;funcret
  2703  000AA2                     __end_of_OpenLCD:
  2704                           	opt stack 0
  2705                           tblptru	equ	0xFF8
  2706                           tblptrh	equ	0xFF7
  2707                           tblptrl	equ	0xFF6
  2708                           tablat	equ	0xFF5
  2709                           prodh	equ	0xFF4
  2710                           prodl	equ	0xFF3
  2711                           intcon2	equ	0xFF1
  2712                           indf0	equ	0xFEF
  2713                           fsr0h	equ	0xFEA
  2714                           fsr0l	equ	0xFE9
  2715                           indf2	equ	0xFDF
  2716                           postinc2	equ	0xFDE
  2717                           postdec2	equ	0xFDD
  2718                           fsr2h	equ	0xFDA
  2719                           fsr2l	equ	0xFD9
  2720                           status	equ	0xFD8
  2721                           
  2722 ;; *************** function _WriteCmdLCD *****************
  2723 ;; Defined at:
  2724 ;;		line 154 in file "lcddisplay.c"
  2725 ;; Parameters:    Size  Location     Type
  2726 ;;  cmd             1    wreg     unsigned char 
  2727 ;; Auto vars:     Size  Location     Type
  2728 ;;  cmd             1   32[COMRAM] unsigned char 
  2729 ;; Return value:  Size  Location     Type
  2730 ;;		None               void
  2731 ;; Registers used:
  2732 ;;		wreg, status,2, status,0, cstack
  2733 ;; Tracked objects:
  2734 ;;		On entry : 0/0
  2735 ;;		On exit  : 0/0
  2736 ;;		Unchanged: 0/0
  2737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2738 ;;      Params:         0       0       0       0       0       0       0
  2739 ;;      Locals:         1       0       0       0       0       0       0
  2740 ;;      Temps:          0       0       0       0       0       0       0
  2741 ;;      Totals:         1       0       0       0       0       0       0
  2742 ;;Total ram usage:        1 bytes
  2743 ;; Hardware stack levels used:    1
  2744 ;; Hardware stack levels required when called:    4
  2745 ;; This function calls:
  2746 ;;		_DelayFor18TCY
  2747 ;; This function is called by:
  2748 ;;		_LCDInitialDisplay
  2749 ;;		_LCDUpdate
  2750 ;;		_InitLCD
  2751 ;;		_OpenLCD
  2752 ;; This function uses a non-reentrant model
  2753 ;;
  2754                           
  2755                           	psect	text16
  2756  000ED6                     __ptext16:
  2757                           	opt stack 0
  2758  000ED6                     _WriteCmdLCD:
  2759                           	opt stack 25
  2760                           
  2761                           ;incstack = 0
  2762                           ;WriteCmdLCD@cmd stored from wreg
  2763  000ED6  6E21               	movwf	WriteCmdLCD@cmd,c
  2764                           
  2765                           ;lcddisplay.c: 220: TRISD &= 0xf0;
  2766  000ED8  0EF0               	movlw	240
  2767  000EDA  1695               	andwf	3989,f,c	;volatile
  2768                           
  2769                           ;lcddisplay.c: 221: PORTD &= 0xf0;
  2770  000EDC  0EF0               	movlw	240
  2771  000EDE  1683               	andwf	3971,f,c	;volatile
  2772                           
  2773                           ;lcddisplay.c: 222: PORTD |= (cmd>>4)&0x0f;
  2774  000EE0  3821               	swapf	WriteCmdLCD@cmd,w,c
  2775  000EE2  0B0F               	andlw	15
  2776  000EE4  0B0F               	andlw	15
  2777  000EE6  1283               	iorwf	3971,f,c	;volatile
  2778                           
  2779                           ;lcddisplay.c: 224: LATEbits.LATE1 = 0;
  2780  000EE8  928D               	bcf	3981,1,c	;volatile
  2781                           
  2782                           ;lcddisplay.c: 225: LATEbits.LATE0 = 0;
  2783  000EEA  908D               	bcf	3981,0,c	;volatile
  2784                           
  2785                           ;lcddisplay.c: 226: DelayFor18TCY();
  2786  000EEC  EC4B  F008         	call	_DelayFor18TCY	;wreg free
  2787                           
  2788                           ;lcddisplay.c: 227: LATEbits.LATE2 = 1;
  2789  000EF0  848D               	bsf	3981,2,c	;volatile
  2790                           
  2791                           ;lcddisplay.c: 228: DelayFor18TCY();
  2792  000EF2  EC4B  F008         	call	_DelayFor18TCY	;wreg free
  2793                           
  2794                           ;lcddisplay.c: 229: LATEbits.LATE2 = 0;
  2795  000EF6  948D               	bcf	3981,2,c	;volatile
  2796                           
  2797                           ;lcddisplay.c: 234: PORTD &= 0xf0;
  2798  000EF8  0EF0               	movlw	240
  2799  000EFA  1683               	andwf	3971,f,c	;volatile
  2800                           
  2801                           ;lcddisplay.c: 235: PORTD |= cmd&0x0f;
  2802  000EFC  5021               	movf	WriteCmdLCD@cmd,w,c
  2803  000EFE  0B0F               	andlw	15
  2804  000F00  1283               	iorwf	3971,f,c	;volatile
  2805                           
  2806                           ;lcddisplay.c: 237: DelayFor18TCY();
  2807  000F02  EC4B  F008         	call	_DelayFor18TCY	;wreg free
  2808                           
  2809                           ;lcddisplay.c: 238: LATEbits.LATE2 = 1;
  2810  000F06  848D               	bsf	3981,2,c	;volatile
  2811                           
  2812                           ;lcddisplay.c: 239: DelayFor18TCY();
  2813  000F08  EC4B  F008         	call	_DelayFor18TCY	;wreg free
  2814                           
  2815                           ;lcddisplay.c: 240: LATEbits.LATE2 = 0;
  2816  000F0C  948D               	bcf	3981,2,c	;volatile
  2817                           
  2818                           ;lcddisplay.c: 244: TRISD |= 0x0f;
  2819  000F0E  0E0F               	movlw	15
  2820  000F10  1295               	iorwf	3989,f,c	;volatile
  2821  000F12  0012               	return	
  2822                           
  2823                           ;lcddisplay.c: 248: return;
  2824  000F14  0012               	return		;funcret
  2825  000F16                     __end_of_WriteCmdLCD:
  2826                           	opt stack 0
  2827                           tblptru	equ	0xFF8
  2828                           tblptrh	equ	0xFF7
  2829                           tblptrl	equ	0xFF6
  2830                           tablat	equ	0xFF5
  2831                           prodh	equ	0xFF4
  2832                           prodl	equ	0xFF3
  2833                           intcon2	equ	0xFF1
  2834                           indf0	equ	0xFEF
  2835                           fsr0h	equ	0xFEA
  2836                           fsr0l	equ	0xFE9
  2837                           indf2	equ	0xFDF
  2838                           postinc2	equ	0xFDE
  2839                           postdec2	equ	0xFDD
  2840                           fsr2h	equ	0xFDA
  2841                           fsr2l	equ	0xFD9
  2842                           status	equ	0xFD8
  2843                           
  2844 ;; *************** function _SetLCDDDRamAddr *****************
  2845 ;; Defined at:
  2846 ;;		line 300 in file "lcddisplay.c"
  2847 ;; Parameters:    Size  Location     Type
  2848 ;;  DDaddr          1    wreg     unsigned char 
  2849 ;; Auto vars:     Size  Location     Type
  2850 ;;  DDaddr          1   35[COMRAM] unsigned char 
  2851 ;; Return value:  Size  Location     Type
  2852 ;;		None               void
  2853 ;; Registers used:
  2854 ;;		wreg, status,2, status,0, cstack
  2855 ;; Tracked objects:
  2856 ;;		On entry : 0/0
  2857 ;;		On exit  : 0/0
  2858 ;;		Unchanged: 0/0
  2859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2860 ;;      Params:         0       0       0       0       0       0       0
  2861 ;;      Locals:         1       0       0       0       0       0       0
  2862 ;;      Temps:          3       0       0       0       0       0       0
  2863 ;;      Totals:         4       0       0       0       0       0       0
  2864 ;;Total ram usage:        4 bytes
  2865 ;; Hardware stack levels used:    1
  2866 ;; Hardware stack levels required when called:    4
  2867 ;; This function calls:
  2868 ;;		_DelayFor18TCY
  2869 ;; This function is called by:
  2870 ;;		_LCDInitialDisplay
  2871 ;;		_LCDUpdate
  2872 ;;		_OpenLCD
  2873 ;; This function uses a non-reentrant model
  2874 ;;
  2875                           
  2876                           	psect	text17
  2877  000DA6                     __ptext17:
  2878                           	opt stack 0
  2879  000DA6                     _SetLCDDDRamAddr:
  2880                           	opt stack 25
  2881                           
  2882                           ;incstack = 0
  2883                           ;SetLCDDDRamAddr@DDaddr stored from wreg
  2884  000DA6  6E24               	movwf	SetLCDDDRamAddr@DDaddr,c
  2885                           
  2886                           ;lcddisplay.c: 319: TRISD &= 0xf0;
  2887  000DA8  0EF0               	movlw	240
  2888  000DAA  1695               	andwf	3989,f,c	;volatile
  2889                           
  2890                           ;lcddisplay.c: 320: PORTD &= 0xf0;
  2891  000DAC  0EF0               	movlw	240
  2892  000DAE  1683               	andwf	3971,f,c	;volatile
  2893                           
  2894                           ;lcddisplay.c: 321: PORTD |= (((DDaddr | 0b10000000)>>4) & 0x0f);
  2895  000DB0  5024               	movf	SetLCDDDRamAddr@DDaddr,w,c
  2896  000DB2  6E21               	movwf	??_SetLCDDDRamAddr& (0+255),c
  2897  000DB4  6A22               	clrf	(??_SetLCDDDRamAddr+1)& (0+255),c
  2898  000DB6  8E21               	bsf	??_SetLCDDDRamAddr,7,c
  2899  000DB8  0E04               	movlw	4
  2900  000DBA  6E23               	movwf	(??_SetLCDDDRamAddr+2)& (0+255),c
  2901  000DBC                     u695:
  2902  000DBC  3422               	rlcf	??_SetLCDDDRamAddr+1,w,c
  2903  000DBE  3222               	rrcf	??_SetLCDDDRamAddr+1,f,c
  2904  000DC0  3221               	rrcf	??_SetLCDDDRamAddr,f,c
  2905  000DC2  2E23               	decfsz	(??_SetLCDDDRamAddr+2)& (0+255),f,c
  2906  000DC4  D7FB               	goto	u695
  2907  000DC6  5021               	movf	??_SetLCDDDRamAddr,w,c
  2908  000DC8  0B0F               	andlw	15
  2909  000DCA  1283               	iorwf	3971,f,c	;volatile
  2910                           
  2911                           ;lcddisplay.c: 323: LATEbits.LATE1 = 0;
  2912  000DCC  928D               	bcf	3981,1,c	;volatile
  2913                           
  2914                           ;lcddisplay.c: 324: LATEbits.LATE0 = 0;
  2915  000DCE  908D               	bcf	3981,0,c	;volatile
  2916                           
  2917                           ;lcddisplay.c: 325: DelayFor18TCY();
  2918  000DD0  EC4B  F008         	call	_DelayFor18TCY	;wreg free
  2919                           
  2920                           ;lcddisplay.c: 326: LATEbits.LATE2 = 1;
  2921  000DD4  848D               	bsf	3981,2,c	;volatile
  2922                           
  2923                           ;lcddisplay.c: 327: DelayFor18TCY();
  2924  000DD6  EC4B  F008         	call	_DelayFor18TCY	;wreg free
  2925                           
  2926                           ;lcddisplay.c: 328: LATEbits.LATE2 = 0;
  2927  000DDA  948D               	bcf	3981,2,c	;volatile
  2928                           
  2929                           ;lcddisplay.c: 333: PORTD &= 0xf0;
  2930  000DDC  0EF0               	movlw	240
  2931  000DDE  1683               	andwf	3971,f,c	;volatile
  2932                           
  2933                           ;lcddisplay.c: 334: PORTD |= (DDaddr&0x0f);
  2934  000DE0  5024               	movf	SetLCDDDRamAddr@DDaddr,w,c
  2935  000DE2  0B0F               	andlw	15
  2936  000DE4  1283               	iorwf	3971,f,c	;volatile
  2937                           
  2938                           ;lcddisplay.c: 336: DelayFor18TCY();
  2939  000DE6  EC4B  F008         	call	_DelayFor18TCY	;wreg free
  2940                           
  2941                           ;lcddisplay.c: 337: LATEbits.LATE2 = 1;
  2942  000DEA  848D               	bsf	3981,2,c	;volatile
  2943                           
  2944                           ;lcddisplay.c: 338: DelayFor18TCY();
  2945  000DEC  EC4B  F008         	call	_DelayFor18TCY	;wreg free
  2946                           
  2947                           ;lcddisplay.c: 339: LATEbits.LATE2 = 0;
  2948  000DF0  948D               	bcf	3981,2,c	;volatile
  2949                           
  2950                           ;lcddisplay.c: 343: TRISD |= 0x0f;
  2951  000DF2  0E0F               	movlw	15
  2952  000DF4  1295               	iorwf	3989,f,c	;volatile
  2953  000DF6  0012               	return	
  2954                           
  2955                           ;lcddisplay.c: 347: return;
  2956  000DF8  0012               	return		;funcret
  2957  000DFA                     __end_of_SetLCDDDRamAddr:
  2958                           	opt stack 0
  2959                           tblptru	equ	0xFF8
  2960                           tblptrh	equ	0xFF7
  2961                           tblptrl	equ	0xFF6
  2962                           tablat	equ	0xFF5
  2963                           prodh	equ	0xFF4
  2964                           prodl	equ	0xFF3
  2965                           intcon2	equ	0xFF1
  2966                           indf0	equ	0xFEF
  2967                           fsr0h	equ	0xFEA
  2968                           fsr0l	equ	0xFE9
  2969                           indf2	equ	0xFDF
  2970                           postinc2	equ	0xFDE
  2971                           postdec2	equ	0xFDD
  2972                           fsr2h	equ	0xFDA
  2973                           fsr2l	equ	0xFD9
  2974                           status	equ	0xFD8
  2975                           
  2976 ;; *************** function _Delay10KTCYx *****************
  2977 ;; Defined at:
  2978 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d10ktcyx.c"
  2979 ;; Parameters:    Size  Location     Type
  2980 ;;  unit            1    wreg     unsigned char 
  2981 ;; Auto vars:     Size  Location     Type
  2982 ;;  unit            1   32[COMRAM] unsigned char 
  2983 ;; Return value:  Size  Location     Type
  2984 ;;		None               void
  2985 ;; Registers used:
  2986 ;;		wreg
  2987 ;; Tracked objects:
  2988 ;;		On entry : 0/0
  2989 ;;		On exit  : 0/0
  2990 ;;		Unchanged: 0/0
  2991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2992 ;;      Params:         0       0       0       0       0       0       0
  2993 ;;      Locals:         1       0       0       0       0       0       0
  2994 ;;      Temps:          1       0       0       0       0       0       0
  2995 ;;      Totals:         2       0       0       0       0       0       0
  2996 ;;Total ram usage:        2 bytes
  2997 ;; Hardware stack levels used:    1
  2998 ;; Hardware stack levels required when called:    2
  2999 ;; This function calls:
  3000 ;;		Nothing
  3001 ;; This function is called by:
  3002 ;;		_OpenLCD
  3003 ;; This function uses a non-reentrant model
  3004 ;;
  3005                           
  3006                           	psect	text18
  3007  000FF8                     __ptext18:
  3008                           	opt stack 0
  3009  000FF8                     _Delay10KTCYx:
  3010                           	opt stack 26
  3011                           
  3012                           ;incstack = 0
  3013                           ;Delay10KTCYx@unit stored from wreg
  3014  000FF8  6E21               	movwf	Delay10KTCYx@unit,c
  3015  000FFA  0E0D               	movlw	13
  3016  000FFC  6E20               	movwf	??_Delay10KTCYx& (0+255),c
  3017  000FFE  0EFC               	movlw	252
  3018  001000                     u1067:
  3019  001000  2EE8               	decfsz	wreg,f,c
  3020  001002  D7FE               	goto	u1067
  3021  001004  2E20               	decfsz	??_Delay10KTCYx& (0+255),f,c
  3022  001006  D7FC               	goto	u1067
  3023  001008  2E21               	decfsz	Delay10KTCYx@unit,f,c
  3024  00100A  D7F7               	goto	l1655
  3025  00100C  0012               	return	
  3026  00100E  0012               	return		;funcret
  3027  001010                     __end_of_Delay10KTCYx:
  3028                           	opt stack 0
  3029                           tblptru	equ	0xFF8
  3030                           tblptrh	equ	0xFF7
  3031                           tblptrl	equ	0xFF6
  3032                           tablat	equ	0xFF5
  3033                           prodh	equ	0xFF4
  3034                           prodl	equ	0xFF3
  3035                           intcon2	equ	0xFF1
  3036                           indf0	equ	0xFEF
  3037                           fsr0h	equ	0xFEA
  3038                           fsr0l	equ	0xFE9
  3039                           wreg	equ	0xFE8
  3040                           indf2	equ	0xFDF
  3041                           postinc2	equ	0xFDE
  3042                           postdec2	equ	0xFDD
  3043                           fsr2h	equ	0xFDA
  3044                           fsr2l	equ	0xFD9
  3045                           status	equ	0xFD8
  3046                           
  3047 ;; *************** function _Delay100TCYx *****************
  3048 ;; Defined at:
  3049 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d100tcyx.c"
  3050 ;; Parameters:    Size  Location     Type
  3051 ;;  unit            1    wreg     unsigned char 
  3052 ;; Auto vars:     Size  Location     Type
  3053 ;;  unit            1   31[COMRAM] unsigned char 
  3054 ;; Return value:  Size  Location     Type
  3055 ;;		None               void
  3056 ;; Registers used:
  3057 ;;		wreg
  3058 ;; Tracked objects:
  3059 ;;		On entry : 0/0
  3060 ;;		On exit  : 0/0
  3061 ;;		Unchanged: 0/0
  3062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3063 ;;      Params:         0       0       0       0       0       0       0
  3064 ;;      Locals:         1       0       0       0       0       0       0
  3065 ;;      Temps:          0       0       0       0       0       0       0
  3066 ;;      Totals:         1       0       0       0       0       0       0
  3067 ;;Total ram usage:        1 bytes
  3068 ;; Hardware stack levels used:    1
  3069 ;; Hardware stack levels required when called:    2
  3070 ;; This function calls:
  3071 ;;		Nothing
  3072 ;; This function is called by:
  3073 ;;		_OpenLCD
  3074 ;; This function uses a non-reentrant model
  3075 ;;
  3076                           
  3077                           	psect	text19
  3078  00103A                     __ptext19:
  3079                           	opt stack 0
  3080  00103A                     _Delay100TCYx:
  3081                           	opt stack 26
  3082                           
  3083                           ;incstack = 0
  3084                           ;Delay100TCYx@unit stored from wreg
  3085  00103A  6E20               	movwf	Delay100TCYx@unit,c
  3086  00103C  0E21               	movlw	33
  3087  00103E                     u1077:
  3088  00103E  2EE8               	decfsz	wreg,f,c
  3089  001040  D7FE               	goto	u1077
  3090  001042  F000               	nop	
  3091  001044  2E20               	decfsz	Delay100TCYx@unit,f,c
  3092  001046  D7FA               	goto	l1651
  3093  001048  0012               	return	
  3094  00104A  0012               	return		;funcret
  3095  00104C                     __end_of_Delay100TCYx:
  3096                           	opt stack 0
  3097                           tblptru	equ	0xFF8
  3098                           tblptrh	equ	0xFF7
  3099                           tblptrl	equ	0xFF6
  3100                           tablat	equ	0xFF5
  3101                           prodh	equ	0xFF4
  3102                           prodl	equ	0xFF3
  3103                           intcon2	equ	0xFF1
  3104                           indf0	equ	0xFEF
  3105                           fsr0h	equ	0xFEA
  3106                           fsr0l	equ	0xFE9
  3107                           wreg	equ	0xFE8
  3108                           indf2	equ	0xFDF
  3109                           postinc2	equ	0xFDE
  3110                           postdec2	equ	0xFDD
  3111                           fsr2h	equ	0xFDA
  3112                           fsr2l	equ	0xFD9
  3113                           status	equ	0xFD8
  3114                           
  3115 ;; *************** function _BusyXLCD *****************
  3116 ;; Defined at:
  3117 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\XLCD\busyxlcd.c"
  3118 ;; Parameters:    Size  Location     Type
  3119 ;;		None
  3120 ;; Auto vars:     Size  Location     Type
  3121 ;;		None
  3122 ;; Return value:  Size  Location     Type
  3123 ;;                  1    wreg      unsigned char 
  3124 ;; Registers used:
  3125 ;;		wreg, cstack
  3126 ;; Tracked objects:
  3127 ;;		On entry : 0/0
  3128 ;;		On exit  : 0/0
  3129 ;;		Unchanged: 0/0
  3130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3131 ;;      Params:         0       0       0       0       0       0       0
  3132 ;;      Locals:         0       0       0       0       0       0       0
  3133 ;;      Temps:          0       0       0       0       0       0       0
  3134 ;;      Totals:         0       0       0       0       0       0       0
  3135 ;;Total ram usage:        0 bytes
  3136 ;; Hardware stack levels used:    1
  3137 ;; Hardware stack levels required when called:    4
  3138 ;; This function calls:
  3139 ;;		_DelayFor18TCY
  3140 ;; This function is called by:
  3141 ;;		_OpenLCD
  3142 ;; This function uses a non-reentrant model
  3143 ;;
  3144                           
  3145                           	psect	text20
  3146  000F16                     __ptext20:
  3147                           	opt stack 0
  3148  000F16                     _BusyXLCD:
  3149                           	opt stack 24
  3150                           
  3151                           ;incstack = 0
  3152  000F16  8C8A               	bsf	3978,6,c	;volatile
  3153  000F18  9A8A               	bcf	3978,5,c	;volatile
  3154  000F1A  EC4B  F008         	call	_DelayFor18TCY	;wreg free
  3155  000F1E  888A               	bsf	3978,4,c	;volatile
  3156  000F20  EC4B  F008         	call	_DelayFor18TCY	;wreg free
  3157  000F24  A681               	btfss	3969,3,c	;volatile
  3158  000F26  D00A               	goto	l292
  3159  000F28  988A               	bcf	3978,4,c	;volatile
  3160  000F2A  EC4B  F008         	call	_DelayFor18TCY	;wreg free
  3161  000F2E  888A               	bsf	3978,4,c	;volatile
  3162  000F30  EC4B  F008         	call	_DelayFor18TCY	;wreg free
  3163  000F34  988A               	bcf	3978,4,c	;volatile
  3164  000F36  9C8A               	bcf	3978,6,c	;volatile
  3165  000F38  0E01               	movlw	1
  3166  000F3A  0012               	return	
  3167  000F3C                     l292:
  3168  000F3C  988A               	bcf	3978,4,c	;volatile
  3169  000F3E  EC4B  F008         	call	_DelayFor18TCY	;wreg free
  3170  000F42  888A               	bsf	3978,4,c	;volatile
  3171  000F44  EC4B  F008         	call	_DelayFor18TCY	;wreg free
  3172  000F48  988A               	bcf	3978,4,c	;volatile
  3173  000F4A  9C8A               	bcf	3978,6,c	;volatile
  3174  000F4C  0E00               	movlw	0
  3175  000F4E  0012               	return	
  3176  000F50  0012               	return		;funcret
  3177  000F52                     __end_of_BusyXLCD:
  3178                           	opt stack 0
  3179                           tblptru	equ	0xFF8
  3180                           tblptrh	equ	0xFF7
  3181                           tblptrl	equ	0xFF6
  3182                           tablat	equ	0xFF5
  3183                           prodh	equ	0xFF4
  3184                           prodl	equ	0xFF3
  3185                           intcon2	equ	0xFF1
  3186                           indf0	equ	0xFEF
  3187                           fsr0h	equ	0xFEA
  3188                           fsr0l	equ	0xFE9
  3189                           wreg	equ	0xFE8
  3190                           indf2	equ	0xFDF
  3191                           postinc2	equ	0xFDE
  3192                           postdec2	equ	0xFDD
  3193                           fsr2h	equ	0xFDA
  3194                           fsr2l	equ	0xFD9
  3195                           status	equ	0xFD8
  3196                           
  3197 ;; *************** function _BusyLCD *****************
  3198 ;; Defined at:
  3199 ;;		line 251 in file "lcddisplay.c"
  3200 ;; Parameters:    Size  Location     Type
  3201 ;;		None
  3202 ;; Auto vars:     Size  Location     Type
  3203 ;;		None
  3204 ;; Return value:  Size  Location     Type
  3205 ;;                  1    wreg      unsigned char 
  3206 ;; Registers used:
  3207 ;;		wreg, cstack
  3208 ;; Tracked objects:
  3209 ;;		On entry : 0/0
  3210 ;;		On exit  : 0/0
  3211 ;;		Unchanged: 0/0
  3212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3213 ;;      Params:         0       0       0       0       0       0       0
  3214 ;;      Locals:         0       0       0       0       0       0       0
  3215 ;;      Temps:          0       0       0       0       0       0       0
  3216 ;;      Totals:         0       0       0       0       0       0       0
  3217 ;;Total ram usage:        0 bytes
  3218 ;; Hardware stack levels used:    1
  3219 ;; Hardware stack levels required when called:    4
  3220 ;; This function calls:
  3221 ;;		_DelayFor18TCY
  3222 ;; This function is called by:
  3223 ;;		_InitLCD
  3224 ;;		_OpenLCD
  3225 ;;		_putLCD
  3226 ;; This function uses a non-reentrant model
  3227 ;;
  3228                           
  3229                           	psect	text21
  3230  000F52                     __ptext21:
  3231                           	opt stack 0
  3232  000F52                     _BusyLCD:
  3233                           	opt stack 23
  3234                           
  3235                           ;lcddisplay.c: 253: LATEbits.LATE1 = 1;
  3236                           
  3237                           ;incstack = 0
  3238  000F52  828D               	bsf	3981,1,c	;volatile
  3239                           
  3240                           ;lcddisplay.c: 254: LATEbits.LATE0 = 0;
  3241  000F54  908D               	bcf	3981,0,c	;volatile
  3242                           
  3243                           ;lcddisplay.c: 255: DelayFor18TCY();
  3244  000F56  EC4B  F008         	call	_DelayFor18TCY	;wreg free
  3245                           
  3246                           ;lcddisplay.c: 256: LATEbits.LATE2 = 1;
  3247  000F5A  848D               	bsf	3981,2,c	;volatile
  3248                           
  3249                           ;lcddisplay.c: 257: DelayFor18TCY();
  3250  000F5C  EC4B  F008         	call	_DelayFor18TCY	;wreg free
  3251                           
  3252                           ;lcddisplay.c: 275: if(PORTD&0x08)
  3253  000F60  A683               	btfss	3971,3,c	;volatile
  3254  000F62  D00A               	goto	l203
  3255                           
  3256                           ;lcddisplay.c: 277: {
  3257                           ;lcddisplay.c: 278: LATEbits.LATE2 = 0;
  3258  000F64  948D               	bcf	3981,2,c	;volatile
  3259                           
  3260                           ;lcddisplay.c: 279: DelayFor18TCY();
  3261  000F66  EC4B  F008         	call	_DelayFor18TCY	;wreg free
  3262                           
  3263                           ;lcddisplay.c: 280: LATEbits.LATE2 = 1;
  3264  000F6A  848D               	bsf	3981,2,c	;volatile
  3265                           
  3266                           ;lcddisplay.c: 281: DelayFor18TCY();
  3267  000F6C  EC4B  F008         	call	_DelayFor18TCY	;wreg free
  3268                           
  3269                           ;lcddisplay.c: 282: LATEbits.LATE2 = 0;
  3270  000F70  948D               	bcf	3981,2,c	;volatile
  3271                           
  3272                           ;lcddisplay.c: 283: LATEbits.LATE1 = 0;
  3273  000F72  928D               	bcf	3981,1,c	;volatile
  3274                           
  3275                           ;lcddisplay.c: 284: return 1;
  3276  000F74  0E01               	movlw	1
  3277                           
  3278                           ;lcddisplay.c: 285: }
  3279  000F76  0012               	return	
  3280  000F78                     l203:
  3281                           
  3282                           ;lcddisplay.c: 286: else
  3283                           ;lcddisplay.c: 287: {
  3284                           ;lcddisplay.c: 288: LATEbits.LATE2 = 0;
  3285  000F78  948D               	bcf	3981,2,c	;volatile
  3286                           
  3287                           ;lcddisplay.c: 289: DelayFor18TCY();
  3288  000F7A  EC4B  F008         	call	_DelayFor18TCY	;wreg free
  3289                           
  3290                           ;lcddisplay.c: 290: LATEbits.LATE2 = 1;
  3291  000F7E  848D               	bsf	3981,2,c	;volatile
  3292                           
  3293                           ;lcddisplay.c: 291: DelayFor18TCY();
  3294  000F80  EC4B  F008         	call	_DelayFor18TCY	;wreg free
  3295                           
  3296                           ;lcddisplay.c: 292: LATEbits.LATE2 = 0;
  3297  000F84  948D               	bcf	3981,2,c	;volatile
  3298                           
  3299                           ;lcddisplay.c: 293: LATEbits.LATE1 = 0;
  3300  000F86  928D               	bcf	3981,1,c	;volatile
  3301                           
  3302                           ;lcddisplay.c: 294: return 0;
  3303  000F88  0E00               	movlw	0
  3304  000F8A  0012               	return	
  3305  000F8C  0012               	return		;funcret
  3306  000F8E                     __end_of_BusyLCD:
  3307                           	opt stack 0
  3308                           tblptru	equ	0xFF8
  3309                           tblptrh	equ	0xFF7
  3310                           tblptrl	equ	0xFF6
  3311                           tablat	equ	0xFF5
  3312                           prodh	equ	0xFF4
  3313                           prodl	equ	0xFF3
  3314                           intcon2	equ	0xFF1
  3315                           indf0	equ	0xFEF
  3316                           fsr0h	equ	0xFEA
  3317                           fsr0l	equ	0xFE9
  3318                           wreg	equ	0xFE8
  3319                           indf2	equ	0xFDF
  3320                           postinc2	equ	0xFDE
  3321                           postdec2	equ	0xFDD
  3322                           fsr2h	equ	0xFDA
  3323                           fsr2l	equ	0xFD9
  3324                           status	equ	0xFD8
  3325                           
  3326 ;; *************** function _DelayFor18TCY *****************
  3327 ;; Defined at:
  3328 ;;		line 82 in file "lcddisplay.c"
  3329 ;; Parameters:    Size  Location     Type
  3330 ;;		None
  3331 ;; Auto vars:     Size  Location     Type
  3332 ;;		None
  3333 ;; Return value:  Size  Location     Type
  3334 ;;		None               void
  3335 ;; Registers used:
  3336 ;;		wreg, cstack
  3337 ;; Tracked objects:
  3338 ;;		On entry : 0/0
  3339 ;;		On exit  : 0/0
  3340 ;;		Unchanged: 0/0
  3341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3342 ;;      Params:         0       0       0       0       0       0       0
  3343 ;;      Locals:         0       0       0       0       0       0       0
  3344 ;;      Temps:          0       0       0       0       0       0       0
  3345 ;;      Totals:         0       0       0       0       0       0       0
  3346 ;;Total ram usage:        0 bytes
  3347 ;; Hardware stack levels used:    1
  3348 ;; Hardware stack levels required when called:    3
  3349 ;; This function calls:
  3350 ;;		_Delay1TCYx
  3351 ;; This function is called by:
  3352 ;;		_WriteCmdLCD
  3353 ;;		_BusyLCD
  3354 ;;		_SetLCDDDRamAddr
  3355 ;;		_SetLCDCGRamAddr
  3356 ;;		_WriteDataLCD
  3357 ;;		_BusyXLCD
  3358 ;; This function uses a non-reentrant model
  3359 ;;
  3360                           
  3361                           	psect	text22
  3362  001096                     __ptext22:
  3363                           	opt stack 0
  3364  001096                     _DelayFor18TCY:
  3365                           	opt stack 23
  3366                           
  3367                           ;lcddisplay.c: 84: Delay1TCYx(18);
  3368                           
  3369                           ;incstack = 0
  3370  001096  0E12               	movlw	18
  3371  001098  EC45  F008         	call	_Delay1TCYx
  3372  00109C  0012               	return		;funcret
  3373  00109E                     __end_of_DelayFor18TCY:
  3374                           	opt stack 0
  3375                           tblptru	equ	0xFF8
  3376                           tblptrh	equ	0xFF7
  3377                           tblptrl	equ	0xFF6
  3378                           tablat	equ	0xFF5
  3379                           prodh	equ	0xFF4
  3380                           prodl	equ	0xFF3
  3381                           intcon2	equ	0xFF1
  3382                           indf0	equ	0xFEF
  3383                           fsr0h	equ	0xFEA
  3384                           fsr0l	equ	0xFE9
  3385                           wreg	equ	0xFE8
  3386                           indf2	equ	0xFDF
  3387                           postinc2	equ	0xFDE
  3388                           postdec2	equ	0xFDD
  3389                           fsr2h	equ	0xFDA
  3390                           fsr2l	equ	0xFD9
  3391                           status	equ	0xFD8
  3392                           
  3393 ;; *************** function _Delay1TCYx *****************
  3394 ;; Defined at:
  3395 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d1tcyx.c"
  3396 ;; Parameters:    Size  Location     Type
  3397 ;;  unit            1    wreg     unsigned char 
  3398 ;; Auto vars:     Size  Location     Type
  3399 ;;  unit            1   31[COMRAM] unsigned char 
  3400 ;; Return value:  Size  Location     Type
  3401 ;;		None               void
  3402 ;; Registers used:
  3403 ;;		wreg
  3404 ;; Tracked objects:
  3405 ;;		On entry : 0/0
  3406 ;;		On exit  : 0/0
  3407 ;;		Unchanged: 0/0
  3408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3409 ;;      Params:         0       0       0       0       0       0       0
  3410 ;;      Locals:         1       0       0       0       0       0       0
  3411 ;;      Temps:          0       0       0       0       0       0       0
  3412 ;;      Totals:         1       0       0       0       0       0       0
  3413 ;;Total ram usage:        1 bytes
  3414 ;; Hardware stack levels used:    1
  3415 ;; Hardware stack levels required when called:    2
  3416 ;; This function calls:
  3417 ;;		Nothing
  3418 ;; This function is called by:
  3419 ;;		_DelayFor18TCY
  3420 ;; This function uses a non-reentrant model
  3421 ;;
  3422                           
  3423                           	psect	text23
  3424  00108A                     __ptext23:
  3425                           	opt stack 0
  3426  00108A                     _Delay1TCYx:
  3427                           	opt stack 23
  3428                           
  3429                           ;incstack = 0
  3430                           ;Delay1TCYx@unit stored from wreg
  3431  00108A  6E20               	movwf	Delay1TCYx@unit,c
  3432  00108C                     l541:
  3433  00108C  F000               	nop	
  3434  00108E  2E20               	decfsz	Delay1TCYx@unit,f,c
  3435  001090  D7FD               	goto	l541
  3436  001092  0012               	return	
  3437  001094  0012               	return		;funcret
  3438  001096                     __end_of_Delay1TCYx:
  3439                           	opt stack 0
  3440                           tblptru	equ	0xFF8
  3441                           tblptrh	equ	0xFF7
  3442                           tblptrl	equ	0xFF6
  3443                           tablat	equ	0xFF5
  3444                           prodh	equ	0xFF4
  3445                           prodl	equ	0xFF3
  3446                           intcon2	equ	0xFF1
  3447                           indf0	equ	0xFEF
  3448                           fsr0h	equ	0xFEA
  3449                           fsr0l	equ	0xFE9
  3450                           wreg	equ	0xFE8
  3451                           indf2	equ	0xFDF
  3452                           postinc2	equ	0xFDE
  3453                           postdec2	equ	0xFDD
  3454                           fsr2h	equ	0xFDA
  3455                           fsr2l	equ	0xFD9
  3456                           status	equ	0xFD8
  3457                           
  3458 ;; *************** function _InitInterrupts *****************
  3459 ;; Defined at:
  3460 ;;		line 93 in file "ports.c"
  3461 ;; Parameters:    Size  Location     Type
  3462 ;;		None
  3463 ;; Auto vars:     Size  Location     Type
  3464 ;;		None
  3465 ;; Return value:  Size  Location     Type
  3466 ;;		None               void
  3467 ;; Registers used:
  3468 ;;		None
  3469 ;; Tracked objects:
  3470 ;;		On entry : 0/0
  3471 ;;		On exit  : 0/0
  3472 ;;		Unchanged: 0/0
  3473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3474 ;;      Params:         0       0       0       0       0       0       0
  3475 ;;      Locals:         0       0       0       0       0       0       0
  3476 ;;      Temps:          0       0       0       0       0       0       0
  3477 ;;      Totals:         0       0       0       0       0       0       0
  3478 ;;Total ram usage:        0 bytes
  3479 ;; Hardware stack levels used:    1
  3480 ;; Hardware stack levels required when called:    2
  3481 ;; This function calls:
  3482 ;;		Nothing
  3483 ;; This function is called by:
  3484 ;;		_main
  3485 ;; This function uses a non-reentrant model
  3486 ;;
  3487                           
  3488                           	psect	text24
  3489  00106E                     __ptext24:
  3490                           	opt stack 0
  3491  00106E                     _InitInterrupts:
  3492                           	opt stack 28
  3493                           
  3494                           ;ports.c: 96: INTCON2bits.INTEDG0 = 0;
  3495                           
  3496                           ;incstack = 0
  3497  00106E  9CF1               	bcf	intcon2,6,c	;volatile
  3498                           
  3499                           ;ports.c: 97: INTCONbits.INT0IF = 0;
  3500  001070  92F2               	bcf	intcon,1,c	;volatile
  3501                           
  3502                           ;ports.c: 98: INTCONbits.INT0IE = 1;
  3503  001072  88F2               	bsf	intcon,4,c	;volatile
  3504                           
  3505                           ;ports.c: 101: RCONbits.IPEN = 1;
  3506  001074  8ED0               	bsf	4048,7,c	;volatile
  3507                           
  3508                           ;ports.c: 102: INTCONbits.GIEL = 1;
  3509  001076  8CF2               	bsf	intcon,6,c	;volatile
  3510                           
  3511                           ;ports.c: 103: INTCONbits.GIEH = 1;
  3512  001078  8EF2               	bsf	intcon,7,c	;volatile
  3513  00107A  0012               	return		;funcret
  3514  00107C                     __end_of_InitInterrupts:
  3515                           	opt stack 0
  3516                           tblptru	equ	0xFF8
  3517                           tblptrh	equ	0xFF7
  3518                           tblptrl	equ	0xFF6
  3519                           tablat	equ	0xFF5
  3520                           prodh	equ	0xFF4
  3521                           prodl	equ	0xFF3
  3522                           intcon	equ	0xFF2
  3523                           intcon2	equ	0xFF1
  3524                           indf0	equ	0xFEF
  3525                           fsr0h	equ	0xFEA
  3526                           fsr0l	equ	0xFE9
  3527                           wreg	equ	0xFE8
  3528                           indf2	equ	0xFDF
  3529                           postinc2	equ	0xFDE
  3530                           postdec2	equ	0xFDD
  3531                           fsr2h	equ	0xFDA
  3532                           fsr2l	equ	0xFD9
  3533                           status	equ	0xFD8
  3534                           
  3535 ;; *************** function _InitAnalogueInputs *****************
  3536 ;; Defined at:
  3537 ;;		line 120 in file "ports.c"
  3538 ;; Parameters:    Size  Location     Type
  3539 ;;		None
  3540 ;; Auto vars:     Size  Location     Type
  3541 ;;		None
  3542 ;; Return value:  Size  Location     Type
  3543 ;;		None               void
  3544 ;; Registers used:
  3545 ;;		wreg, status,2
  3546 ;; Tracked objects:
  3547 ;;		On entry : 0/0
  3548 ;;		On exit  : 0/0
  3549 ;;		Unchanged: 0/0
  3550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3551 ;;      Params:         0       0       0       0       0       0       0
  3552 ;;      Locals:         0       0       0       0       0       0       0
  3553 ;;      Temps:          0       0       0       0       0       0       0
  3554 ;;      Totals:         0       0       0       0       0       0       0
  3555 ;;Total ram usage:        0 bytes
  3556 ;; Hardware stack levels used:    1
  3557 ;; Hardware stack levels required when called:    2
  3558 ;; This function calls:
  3559 ;;		Nothing
  3560 ;; This function is called by:
  3561 ;;		_main
  3562 ;; This function uses a non-reentrant model
  3563 ;;
  3564                           
  3565                           	psect	text25
  3566  001026                     __ptext25:
  3567                           	opt stack 0
  3568  001026                     _InitAnalogueInputs:
  3569                           	opt stack 28
  3570                           
  3571                           ;ports.c: 123: TRISAbits.TRISA0 = 1;
  3572                           
  3573                           ;incstack = 0
  3574  001026  8092               	bsf	3986,0,c	;volatile
  3575                           
  3576                           ;ports.c: 132: ANSEL = 0b00000001;
  3577  001028  0E01               	movlw	1
  3578  00102A  6E7E               	movwf	3966,c	;volatile
  3579                           
  3580                           ;ports.c: 135: ADCON1 = 0b00000000;
  3581  00102C  0E00               	movlw	0
  3582  00102E  6EC1               	movwf	4033,c	;volatile
  3583                           
  3584                           ;ports.c: 136: ADCON2 = 0b00111000;
  3585  001030  0E38               	movlw	56
  3586  001032  6EC0               	movwf	4032,c	;volatile
  3587                           
  3588                           ;ports.c: 154: ADCON0 = 0b00000001;
  3589  001034  0E01               	movlw	1
  3590  001036  6EC2               	movwf	4034,c	;volatile
  3591  001038  0012               	return		;funcret
  3592  00103A                     __end_of_InitAnalogueInputs:
  3593                           	opt stack 0
  3594                           tblptru	equ	0xFF8
  3595                           tblptrh	equ	0xFF7
  3596                           tblptrl	equ	0xFF6
  3597                           tablat	equ	0xFF5
  3598                           prodh	equ	0xFF4
  3599                           prodl	equ	0xFF3
  3600                           intcon	equ	0xFF2
  3601                           intcon2	equ	0xFF1
  3602                           indf0	equ	0xFEF
  3603                           fsr0h	equ	0xFEA
  3604                           fsr0l	equ	0xFE9
  3605                           wreg	equ	0xFE8
  3606                           indf2	equ	0xFDF
  3607                           postinc2	equ	0xFDE
  3608                           postdec2	equ	0xFDD
  3609                           fsr2h	equ	0xFDA
  3610                           fsr2l	equ	0xFD9
  3611                           status	equ	0xFD8
  3612                           
  3613 ;; *************** function _Delay1KTCYx *****************
  3614 ;; Defined at:
  3615 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d1ktcyx.c"
  3616 ;; Parameters:    Size  Location     Type
  3617 ;;  unit            1    wreg     unsigned char 
  3618 ;; Auto vars:     Size  Location     Type
  3619 ;;  unit            1   31[COMRAM] unsigned char 
  3620 ;; Return value:  Size  Location     Type
  3621 ;;		None               void
  3622 ;; Registers used:
  3623 ;;		wreg
  3624 ;; Tracked objects:
  3625 ;;		On entry : 0/0
  3626 ;;		On exit  : 0/0
  3627 ;;		Unchanged: 0/0
  3628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3629 ;;      Params:         0       0       0       0       0       0       0
  3630 ;;      Locals:         1       0       0       0       0       0       0
  3631 ;;      Temps:          0       0       0       0       0       0       0
  3632 ;;      Totals:         1       0       0       0       0       0       0
  3633 ;;Total ram usage:        1 bytes
  3634 ;; Hardware stack levels used:    1
  3635 ;; Hardware stack levels required when called:    2
  3636 ;; This function calls:
  3637 ;;		Nothing
  3638 ;; This function is called by:
  3639 ;;		_main
  3640 ;; This function uses a non-reentrant model
  3641 ;;
  3642                           
  3643                           	psect	text26
  3644  00104C                     __ptext26:
  3645                           	opt stack 0
  3646  00104C                     _Delay1KTCYx:
  3647                           	opt stack 28
  3648                           
  3649                           ;incstack = 0
  3650                           ;Delay1KTCYx@unit stored from wreg
  3651  00104C  6E20               	movwf	Delay1KTCYx@unit,c
  3652  00104E  0EFA               	movlw	250
  3653  001050                     u1087:
  3654  001050  F000               	nop	
  3655  001052  2EE8               	decfsz	wreg,f,c
  3656  001054  D7FD               	goto	u1087
  3657  001056  2E20               	decfsz	Delay1KTCYx@unit,f,c
  3658  001058  D7FA               	goto	l1969
  3659  00105A  0012               	return	
  3660  00105C  0012               	return		;funcret
  3661  00105E                     __end_of_Delay1KTCYx:
  3662                           	opt stack 0
  3663                           tblptru	equ	0xFF8
  3664                           tblptrh	equ	0xFF7
  3665                           tblptrl	equ	0xFF6
  3666                           tablat	equ	0xFF5
  3667                           prodh	equ	0xFF4
  3668                           prodl	equ	0xFF3
  3669                           intcon	equ	0xFF2
  3670                           intcon2	equ	0xFF1
  3671                           indf0	equ	0xFEF
  3672                           fsr0h	equ	0xFEA
  3673                           fsr0l	equ	0xFE9
  3674                           wreg	equ	0xFE8
  3675                           indf2	equ	0xFDF
  3676                           postinc2	equ	0xFDE
  3677                           postdec2	equ	0xFDD
  3678                           fsr2h	equ	0xFDA
  3679                           fsr2l	equ	0xFD9
  3680                           status	equ	0xFD8
  3681                           
  3682 ;; *************** function _ADC_Convert *****************
  3683 ;; Defined at:
  3684 ;;		line 158 in file "ports.c"
  3685 ;; Parameters:    Size  Location     Type
  3686 ;;		None
  3687 ;; Auto vars:     Size  Location     Type
  3688 ;;		None
  3689 ;; Return value:  Size  Location     Type
  3690 ;;                  1    wreg      unsigned char 
  3691 ;; Registers used:
  3692 ;;		wreg, status,2
  3693 ;; Tracked objects:
  3694 ;;		On entry : 0/0
  3695 ;;		On exit  : 0/0
  3696 ;;		Unchanged: 0/0
  3697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3698 ;;      Params:         0       0       0       0       0       0       0
  3699 ;;      Locals:         0       0       0       0       0       0       0
  3700 ;;      Temps:          0       0       0       0       0       0       0
  3701 ;;      Totals:         0       0       0       0       0       0       0
  3702 ;;Total ram usage:        0 bytes
  3703 ;; Hardware stack levels used:    1
  3704 ;; Hardware stack levels required when called:    2
  3705 ;; This function calls:
  3706 ;;		Nothing
  3707 ;; This function is called by:
  3708 ;;		_main
  3709 ;; This function uses a non-reentrant model
  3710 ;;
  3711                           
  3712                           	psect	text27
  3713  00107C                     __ptext27:
  3714                           	opt stack 0
  3715  00107C                     _ADC_Convert:
  3716                           	opt stack 28
  3717                           
  3718                           ;ports.c: 160: ADCON0bits.GO_DONE = 1;
  3719                           
  3720                           ;incstack = 0
  3721  00107C  82C2               	bsf	4034,1,c	;volatile
  3722                           
  3723                           ;ports.c: 161: while (ADCON0bits.GO_DONE == 1);
  3724  00107E  D000               	goto	l112
  3725  001080                     l112:
  3726  001080  B2C2               	btfsc	4034,1,c	;volatile
  3727  001082  D7FE               	goto	l112
  3728                           
  3729                           ;ports.c: 162: return ADRESH;
  3730  001084  50C4               	movf	4036,w,c	;volatile
  3731  001086  0012               	return	
  3732  001088  0012               	return		;funcret
  3733  00108A                     __end_of_ADC_Convert:
  3734                           	opt stack 0
  3735                           tblptru	equ	0xFF8
  3736                           tblptrh	equ	0xFF7
  3737                           tblptrl	equ	0xFF6
  3738                           tablat	equ	0xFF5
  3739                           prodh	equ	0xFF4
  3740                           prodl	equ	0xFF3
  3741                           intcon	equ	0xFF2
  3742                           intcon2	equ	0xFF1
  3743                           indf0	equ	0xFEF
  3744                           fsr0h	equ	0xFEA
  3745                           fsr0l	equ	0xFE9
  3746                           wreg	equ	0xFE8
  3747                           indf2	equ	0xFDF
  3748                           postinc2	equ	0xFDE
  3749                           postdec2	equ	0xFDD
  3750                           fsr2h	equ	0xFDA
  3751                           fsr2l	equ	0xFD9
  3752                           status	equ	0xFD8
  3753                           
  3754 ;; *************** function _XC8_LowISR_Handler *****************
  3755 ;; Defined at:
  3756 ;;		line 136 in file "main.c"
  3757 ;; Parameters:    Size  Location     Type
  3758 ;;		None
  3759 ;; Auto vars:     Size  Location     Type
  3760 ;;		None
  3761 ;; Return value:  Size  Location     Type
  3762 ;;		None               void
  3763 ;; Registers used:
  3764 ;;		None
  3765 ;; Tracked objects:
  3766 ;;		On entry : 0/0
  3767 ;;		On exit  : 0/0
  3768 ;;		Unchanged: 0/0
  3769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3770 ;;      Params:         0       0       0       0       0       0       0
  3771 ;;      Locals:         0       0       0       0       0       0       0
  3772 ;;      Temps:         17       0       0       0       0       0       0
  3773 ;;      Totals:        17       0       0       0       0       0       0
  3774 ;;Total ram usage:       17 bytes
  3775 ;; Hardware stack levels used:    1
  3776 ;; Hardware stack levels required when called:    1
  3777 ;; This function calls:
  3778 ;;		Nothing
  3779 ;; This function is called by:
  3780 ;;		Interrupt level 1
  3781 ;; This function uses a non-reentrant model
  3782 ;;
  3783                           
  3784                           	psect	intcodelo
  3785  000018                     __pintcodelo:
  3786                           	opt stack 0
  3787  000018                     _XC8_LowISR_Handler:
  3788                           	opt stack 23
  3789                           
  3790                           ;incstack = 0
  3791  000018  CFD8 F001          	movff	status,??_XC8_LowISR_Handler
  3792  00001C  CFE8 F002          	movff	wreg,??_XC8_LowISR_Handler+1
  3793  000020  CFE0 F003          	movff	bsr,??_XC8_LowISR_Handler+2
  3794  000024  CFFA F004          	movff	pclath,??_XC8_LowISR_Handler+3
  3795  000028  CFFB F005          	movff	pclatu,??_XC8_LowISR_Handler+4
  3796  00002C  CFE9 F006          	movff	fsr0l,??_XC8_LowISR_Handler+5
  3797  000030  CFEA F007          	movff	fsr0h,??_XC8_LowISR_Handler+6
  3798  000034  CFE1 F008          	movff	fsr1l,??_XC8_LowISR_Handler+7
  3799  000038  CFE2 F009          	movff	fsr1h,??_XC8_LowISR_Handler+8
  3800  00003C  CFD9 F00A          	movff	fsr2l,??_XC8_LowISR_Handler+9
  3801  000040  CFDA F00B          	movff	fsr2h,??_XC8_LowISR_Handler+10
  3802  000044  CFF3 F00C          	movff	prodl,??_XC8_LowISR_Handler+11
  3803  000048  CFF4 F00D          	movff	prodh,??_XC8_LowISR_Handler+12
  3804  00004C  CFF6 F00E          	movff	tblptrl,??_XC8_LowISR_Handler+13
  3805  000050  CFF7 F00F          	movff	tblptrh,??_XC8_LowISR_Handler+14
  3806  000054  CFF8 F010          	movff	tblptru,??_XC8_LowISR_Handler+15
  3807  000058  CFF5 F011          	movff	tablat,??_XC8_LowISR_Handler+16
  3808                           
  3809                           ;main.c: 140: if (INTCON3bits.INT1IF) {
  3810  00005C  A0F0               	btfss	intcon3,0,c	;volatile
  3811  00005E  D002               	goto	i1l53
  3812                           
  3813                           ;main.c: 141: INTCON3bits.INT1IF = 0;
  3814  000060  90F0               	bcf	intcon3,0,c	;volatile
  3815                           
  3816                           ;main.c: 142: LATDbits.LATD1 = ~LATDbits.LATD1;
  3817  000062  728C               	btg	3980,1,c	;volatile
  3818  000064                     i1l53:
  3819                           
  3820                           ;main.c: 143: }
  3821                           ;main.c: 145: if (INTCONbits.RBIF) {
  3822  000064  A0F2               	btfss	intcon,0,c	;volatile
  3823  000066  D009               	goto	i1l57
  3824                           
  3825                           ;main.c: 146: PortBValue = PORTB;
  3826  000068  CF81 F040          	movff	3969,_PortBValue	;volatile
  3827                           
  3828                           ;main.c: 147: INTCONbits.RBIF = 0;
  3829  00006C  90F2               	bcf	intcon,0,c	;volatile
  3830                           
  3831                           ;main.c: 148: if (PortBValue & 0b00010000) {
  3832  00006E  B840               	btfsc	_PortBValue,4,c
  3833                           
  3834                           ;main.c: 149: LATDbits.LATD4 = ~LATDbits.LATD4;
  3835  000070  788C               	btg	3980,4,c	;volatile
  3836                           
  3837                           ;main.c: 150: }
  3838                           ;main.c: 151: if (PortBValue & 0b00100000) {
  3839  000072  AA40               	btfss	_PortBValue,5,c
  3840  000074  D002               	goto	i1l57
  3841                           
  3842                           ;main.c: 152: LATDbits.LATD5 = ~LATDbits.LATD5;
  3843  000076  7A8C               	btg	3980,5,c	;volatile
  3844  000078  D000               	goto	i1l57
  3845  00007A                     i1l57:
  3846  00007A  C011  FFF5         	movff	??_XC8_LowISR_Handler+16,tablat
  3847  00007E  C010  FFF8         	movff	??_XC8_LowISR_Handler+15,tblptru
  3848  000082  C00F  FFF7         	movff	??_XC8_LowISR_Handler+14,tblptrh
  3849  000086  C00E  FFF6         	movff	??_XC8_LowISR_Handler+13,tblptrl
  3850  00008A  C00D  FFF4         	movff	??_XC8_LowISR_Handler+12,prodh
  3851  00008E  C00C  FFF3         	movff	??_XC8_LowISR_Handler+11,prodl
  3852  000092  C00B  FFDA         	movff	??_XC8_LowISR_Handler+10,fsr2h
  3853  000096  C00A  FFD9         	movff	??_XC8_LowISR_Handler+9,fsr2l
  3854  00009A  C009  FFE2         	movff	??_XC8_LowISR_Handler+8,fsr1h
  3855  00009E  C008  FFE1         	movff	??_XC8_LowISR_Handler+7,fsr1l
  3856  0000A2  C007  FFEA         	movff	??_XC8_LowISR_Handler+6,fsr0h
  3857  0000A6  C006  FFE9         	movff	??_XC8_LowISR_Handler+5,fsr0l
  3858  0000AA  C005  FFFB         	movff	??_XC8_LowISR_Handler+4,pclatu
  3859  0000AE  C004  FFFA         	movff	??_XC8_LowISR_Handler+3,pclath
  3860  0000B2  C003  FFE0         	movff	??_XC8_LowISR_Handler+2,bsr
  3861  0000B6  C002  FFE8         	movff	??_XC8_LowISR_Handler+1,wreg
  3862  0000BA  C001  FFD8         	movff	??_XC8_LowISR_Handler,status
  3863  0000BE  0010               	retfie	
  3864  0000C0                     __end_of_XC8_LowISR_Handler:
  3865                           	opt stack 0
  3866                           pclatu	equ	0xFFB
  3867                           pclath	equ	0xFFA
  3868                           tblptru	equ	0xFF8
  3869                           tblptrh	equ	0xFF7
  3870                           tblptrl	equ	0xFF6
  3871                           tablat	equ	0xFF5
  3872                           prodh	equ	0xFF4
  3873                           prodl	equ	0xFF3
  3874                           intcon	equ	0xFF2
  3875                           intcon2	equ	0xFF1
  3876                           intcon3	equ	0xFF0
  3877                           indf0	equ	0xFEF
  3878                           fsr0h	equ	0xFEA
  3879                           fsr0l	equ	0xFE9
  3880                           wreg	equ	0xFE8
  3881                           fsr1h	equ	0xFE2
  3882                           fsr1l	equ	0xFE1
  3883                           bsr	equ	0xFE0
  3884                           indf2	equ	0xFDF
  3885                           postinc2	equ	0xFDE
  3886                           postdec2	equ	0xFDD
  3887                           fsr2h	equ	0xFDA
  3888                           fsr2l	equ	0xFD9
  3889                           status	equ	0xFD8
  3890                           
  3891 ;; *************** function _XC8_HighISR_Handler *****************
  3892 ;; Defined at:
  3893 ;;		line 104 in file "main.c"
  3894 ;; Parameters:    Size  Location     Type
  3895 ;;		None
  3896 ;; Auto vars:     Size  Location     Type
  3897 ;;		None
  3898 ;; Return value:  Size  Location     Type
  3899 ;;		None               void
  3900 ;; Registers used:
  3901 ;;		None
  3902 ;; Tracked objects:
  3903 ;;		On entry : 0/0
  3904 ;;		On exit  : 0/0
  3905 ;;		Unchanged: 0/0
  3906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3907 ;;      Params:         0       0       0       0       0       0       0
  3908 ;;      Locals:         0       0       0       0       0       0       0
  3909 ;;      Temps:         14       0       0       0       0       0       0
  3910 ;;      Totals:        14       0       0       0       0       0       0
  3911 ;;Total ram usage:       14 bytes
  3912 ;; Hardware stack levels used:    1
  3913 ;; This function calls:
  3914 ;;		Nothing
  3915 ;; This function is called by:
  3916 ;;		Interrupt level 2
  3917 ;; This function uses a non-reentrant model
  3918 ;;
  3919                           
  3920                           	psect	intcode
  3921  000008                     __pintcode:
  3922                           	opt stack 0
  3923  000008                     _XC8_HighISR_Handler:
  3924                           	opt stack 23
  3925                           
  3926                           ;incstack = 0
  3927  000008  CFFA F012          	movff	pclath,??_XC8_HighISR_Handler
  3928  00000C  CFFB F013          	movff	pclatu,??_XC8_HighISR_Handler+1
  3929  000010  CFE9 F014          	movff	fsr0l,??_XC8_HighISR_Handler+2
  3930  000014  EF10  F006         	goto	int_func
  3931                           pclatu	equ	0xFFB
  3932                           pclath	equ	0xFFA
  3933                           tblptru	equ	0xFF8
  3934                           tblptrh	equ	0xFF7
  3935                           tblptrl	equ	0xFF6
  3936                           tablat	equ	0xFF5
  3937                           prodh	equ	0xFF4
  3938                           prodl	equ	0xFF3
  3939                           intcon	equ	0xFF2
  3940                           intcon2	equ	0xFF1
  3941                           intcon3	equ	0xFF0
  3942                           indf0	equ	0xFEF
  3943                           fsr0h	equ	0xFEA
  3944                           fsr0l	equ	0xFE9
  3945                           wreg	equ	0xFE8
  3946                           fsr1h	equ	0xFE2
  3947                           fsr1l	equ	0xFE1
  3948                           bsr	equ	0xFE0
  3949                           indf2	equ	0xFDF
  3950                           postinc2	equ	0xFDE
  3951                           postdec2	equ	0xFDD
  3952                           fsr2h	equ	0xFDA
  3953                           fsr2l	equ	0xFD9
  3954                           status	equ	0xFD8
  3955                           
  3956                           	psect	intcode_body
  3957  000C20                     __pintcode_body:
  3958                           	opt stack 23
  3959  000C20                     int_func:
  3960                           	opt stack 23
  3961  000C20  CFEA F015          	movff	fsr0h,??_XC8_HighISR_Handler+3
  3962  000C24  CFE1 F016          	movff	fsr1l,??_XC8_HighISR_Handler+4
  3963  000C28  CFE2 F017          	movff	fsr1h,??_XC8_HighISR_Handler+5
  3964  000C2C  CFD9 F018          	movff	fsr2l,??_XC8_HighISR_Handler+6
  3965  000C30  CFDA F019          	movff	fsr2h,??_XC8_HighISR_Handler+7
  3966  000C34  CFF3 F01A          	movff	prodl,??_XC8_HighISR_Handler+8
  3967  000C38  CFF4 F01B          	movff	prodh,??_XC8_HighISR_Handler+9
  3968  000C3C  CFF6 F01C          	movff	tblptrl,??_XC8_HighISR_Handler+10
  3969  000C40  CFF7 F01D          	movff	tblptrh,??_XC8_HighISR_Handler+11
  3970  000C44  CFF8 F01E          	movff	tblptru,??_XC8_HighISR_Handler+12
  3971  000C48  CFF5 F01F          	movff	tablat,??_XC8_HighISR_Handler+13
  3972                           
  3973                           ;main.c: 111: if (INTCONbits.INT0IF )
  3974  000C4C  A2F2               	btfss	intcon,1,c	;volatile
  3975  000C4E  D003               	goto	i2l50
  3976                           
  3977                           ;main.c: 112: {
  3978                           ;main.c: 114: INTCONbits.INT0IF = 0;
  3979  000C50  92F2               	bcf	intcon,1,c	;volatile
  3980                           
  3981                           ;main.c: 116: LATDbits.LATD6 = ~LATDbits.LATD6;
  3982  000C52  7C8C               	btg	3980,6,c	;volatile
  3983  000C54  D000               	goto	i2l50
  3984  000C56                     i2l50:
  3985  000C56  C01F  FFF5         	movff	??_XC8_HighISR_Handler+13,tablat
  3986  000C5A  C01E  FFF8         	movff	??_XC8_HighISR_Handler+12,tblptru
  3987  000C5E  C01D  FFF7         	movff	??_XC8_HighISR_Handler+11,tblptrh
  3988  000C62  C01C  FFF6         	movff	??_XC8_HighISR_Handler+10,tblptrl
  3989  000C66  C01B  FFF4         	movff	??_XC8_HighISR_Handler+9,prodh
  3990  000C6A  C01A  FFF3         	movff	??_XC8_HighISR_Handler+8,prodl
  3991  000C6E  C019  FFDA         	movff	??_XC8_HighISR_Handler+7,fsr2h
  3992  000C72  C018  FFD9         	movff	??_XC8_HighISR_Handler+6,fsr2l
  3993  000C76  C017  FFE2         	movff	??_XC8_HighISR_Handler+5,fsr1h
  3994  000C7A  C016  FFE1         	movff	??_XC8_HighISR_Handler+4,fsr1l
  3995  000C7E  C015  FFEA         	movff	??_XC8_HighISR_Handler+3,fsr0h
  3996  000C82  C014  FFE9         	movff	??_XC8_HighISR_Handler+2,fsr0l
  3997  000C86  C013  FFFB         	movff	??_XC8_HighISR_Handler+1,pclatu
  3998  000C8A  C012  FFFA         	movff	??_XC8_HighISR_Handler,pclath
  3999  000C8E  0011               	retfie		f
  4000  000C90                     __end_of_XC8_HighISR_Handler:
  4001                           	opt stack 0
  4002                           pclatu	equ	0xFFB
  4003                           pclath	equ	0xFFA
  4004                           tblptru	equ	0xFF8
  4005                           tblptrh	equ	0xFF7
  4006                           tblptrl	equ	0xFF6
  4007                           tablat	equ	0xFF5
  4008                           prodh	equ	0xFF4
  4009                           prodl	equ	0xFF3
  4010                           intcon	equ	0xFF2
  4011                           intcon2	equ	0xFF1
  4012                           intcon3	equ	0xFF0
  4013                           indf0	equ	0xFEF
  4014                           fsr0h	equ	0xFEA
  4015                           fsr0l	equ	0xFE9
  4016                           wreg	equ	0xFE8
  4017                           fsr1h	equ	0xFE2
  4018                           fsr1l	equ	0xFE1
  4019                           bsr	equ	0xFE0
  4020                           indf2	equ	0xFDF
  4021                           postinc2	equ	0xFDE
  4022                           postdec2	equ	0xFDD
  4023                           fsr2h	equ	0xFDA
  4024                           fsr2l	equ	0xFD9
  4025                           status	equ	0xFD8
  4026                           pclatu	equ	0xFFB
  4027                           pclath	equ	0xFFA
  4028                           tblptru	equ	0xFF8
  4029                           tblptrh	equ	0xFF7
  4030                           tblptrl	equ	0xFF6
  4031                           tablat	equ	0xFF5
  4032                           prodh	equ	0xFF4
  4033                           prodl	equ	0xFF3
  4034                           intcon	equ	0xFF2
  4035                           intcon2	equ	0xFF1
  4036                           intcon3	equ	0xFF0
  4037                           indf0	equ	0xFEF
  4038                           fsr0h	equ	0xFEA
  4039                           fsr0l	equ	0xFE9
  4040                           wreg	equ	0xFE8
  4041                           fsr1h	equ	0xFE2
  4042                           fsr1l	equ	0xFE1
  4043                           bsr	equ	0xFE0
  4044                           indf2	equ	0xFDF
  4045                           postinc2	equ	0xFDE
  4046                           postdec2	equ	0xFDD
  4047                           fsr2h	equ	0xFDA
  4048                           fsr2l	equ	0xFD9
  4049                           status	equ	0xFD8
  4050                           
  4051                           	psect	rparam
  4052  0000                     pclatu	equ	0xFFB
  4053                           pclath	equ	0xFFA
  4054                           tblptru	equ	0xFF8
  4055                           tblptrh	equ	0xFF7
  4056                           tblptrl	equ	0xFF6
  4057                           tablat	equ	0xFF5
  4058                           prodh	equ	0xFF4
  4059                           prodl	equ	0xFF3
  4060                           intcon	equ	0xFF2
  4061                           intcon2	equ	0xFF1
  4062                           intcon3	equ	0xFF0
  4063                           indf0	equ	0xFEF
  4064                           fsr0h	equ	0xFEA
  4065                           fsr0l	equ	0xFE9
  4066                           wreg	equ	0xFE8
  4067                           fsr1h	equ	0xFE2
  4068                           fsr1l	equ	0xFE1
  4069                           bsr	equ	0xFE0
  4070                           indf2	equ	0xFDF
  4071                           postinc2	equ	0xFDE
  4072                           postdec2	equ	0xFDD
  4073                           fsr2h	equ	0xFDA
  4074                           fsr2l	equ	0xFD9
  4075                           status	equ	0xFD8


Data Sizes:
    Strings     52
    Constant    10
    Data        0
    BSS         5
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     63      64
    BANK0           160     20      24
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_6(CODE[3]), STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 4
		 -> putIntLCD@result_891(BANK0[3]), putIntLCD@result_889(BANK0[4]), putIntLCD@result_887(BANK0[3]), putIntLCD@result(BANK0[2]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    putLCD@buffer	PTR unsigned char  size(2) Largest target is 17
		 -> putIntLCD@result_891(BANK0[3]), putIntLCD@result_889(BANK0[4]), putIntLCD@result_887(BANK0[3]), putIntLCD@result(BANK0[2]), 
		 -> STR_2(CODE[17]), STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_LCDUpdate
    _putIntLCD->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _LCDInitialDisplay->_SetLCDCGRamAddr
    _LCDInitialDisplay->_SetLCDDDRamAddr
    _putLCD->_WriteDataLCD
    _InitLCD->_OpenLCD
    _OpenLCD->_SetLCDDDRamAddr
    _DelayFor18TCY->_Delay1TCYx

Critical Paths under _XC8_HighISR_Handler in COMRAM

    None.

Critical Paths under _XC8_LowISR_Handler in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_LCDUpdate
    _LCDUpdate->_putIntLCD

Critical Paths under _XC8_HighISR_Handler in BANK0

    None.

Critical Paths under _XC8_LowISR_Handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _XC8_HighISR_Handler in BANK1

    None.

Critical Paths under _XC8_LowISR_Handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _XC8_HighISR_Handler in BANK2

    None.

Critical Paths under _XC8_LowISR_Handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _XC8_HighISR_Handler in BANK3

    None.

Critical Paths under _XC8_LowISR_Handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _XC8_HighISR_Handler in BANK4

    None.

Critical Paths under _XC8_LowISR_Handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _XC8_HighISR_Handler in BANK5

    None.

Critical Paths under _XC8_LowISR_Handler in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    5320
                        _ADC_Convert
                        _Delay1KTCYx
                 _InitAnalogueInputs
                     _InitInterrupts
                            _InitLCD
                       _InitMotorPWM
                          _InitPorts
                  _LCDInitialDisplay
                          _LCDUpdate
 ---------------------------------------------------------------------------------
 (1) _LCDUpdate                                            5     1      4    4187
                                             62 COMRAM     1     1      0
                                             16 BANK0      4     0      4
                    _SetLCDDDRamAddr
                        _WriteCmdLCD
                          _putIntLCD
 ---------------------------------------------------------------------------------
 (2) _putIntLCD                                           16    12      4    3775
                                              0 BANK0     16    12      4
                             _putLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             28    22      6    2352
                                             43 COMRAM    19    13      6
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                             31 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     287
                                             31 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     287
                                             38 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     290
                                             31 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _LCDInitialDisplay                                    0     0      0     781
                    _SetLCDCGRamAddr
                    _SetLCDDDRamAddr
                        _WriteCmdLCD
                       _WriteDataLCD
                             _putLCD
 ---------------------------------------------------------------------------------
 (3) _putLCD                                               2     0      2     517
                                             33 COMRAM     2     0      2
                            _BusyLCD
                       _WriteDataLCD
 ---------------------------------------------------------------------------------
 (4) _WriteDataLCD                                         1     1      0      66
                                             32 COMRAM     1     1      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (2) _SetLCDCGRamAddr                                      4     4      0      66
                                             32 COMRAM     4     4      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (1) _InitPorts                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitLCD                                              0     0      0     330
                            _BusyLCD
                            _OpenLCD
                        _WriteCmdLCD
 ---------------------------------------------------------------------------------
 (2) _OpenLCD                                              1     1      0     242
                                             36 COMRAM     1     1      0
                            _BusyLCD
                           _BusyXLCD
                       _Delay100TCYx
                       _Delay10KTCYx
                    _SetLCDDDRamAddr
                        _WriteCmdLCD
 ---------------------------------------------------------------------------------
 (2) _WriteCmdLCD                                          1     1      0      66
                                             32 COMRAM     1     1      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (2) _SetLCDDDRamAddr                                      4     4      0      66
                                             32 COMRAM     4     4      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (3) _Delay10KTCYx                                         2     2      0      22
                                             31 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _Delay100TCYx                                         1     1      0      22
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _BusyXLCD                                             0     0      0      22
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (4) _BusyLCD                                              0     0      0      22
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (5) _DelayFor18TCY                                        0     0      0      22
                         _Delay1TCYx
 ---------------------------------------------------------------------------------
 (6) _Delay1TCYx                                           1     1      0      22
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitInterrupts                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitAnalogueInputs                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Delay1KTCYx                                          1     1      0      22
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Convert                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _XC8_LowISR_Handler                                  17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _XC8_HighISR_Handler                                 14    14      0       0
                                             17 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Convert
   _Delay1KTCYx
   _InitAnalogueInputs
   _InitInterrupts
   _InitLCD
     _BusyLCD
       _DelayFor18TCY
         _Delay1TCYx
     _OpenLCD
       _BusyLCD
         _DelayFor18TCY
           _Delay1TCYx
       _BusyXLCD
         _DelayFor18TCY
           _Delay1TCYx
       _Delay100TCYx
       _Delay10KTCYx
       _SetLCDDDRamAddr
         _DelayFor18TCY
           _Delay1TCYx
       _WriteCmdLCD
         _DelayFor18TCY
           _Delay1TCYx
     _WriteCmdLCD
       _DelayFor18TCY
         _Delay1TCYx
   _InitMotorPWM
   _InitPorts
   _LCDInitialDisplay
     _SetLCDCGRamAddr
       _DelayFor18TCY
         _Delay1TCYx
     _SetLCDDDRamAddr
       _DelayFor18TCY
         _Delay1TCYx
     _WriteCmdLCD
       _DelayFor18TCY
         _Delay1TCYx
     _WriteDataLCD
       _DelayFor18TCY
         _Delay1TCYx
     _putLCD
       _BusyLCD
         _DelayFor18TCY
           _Delay1TCYx
       _WriteDataLCD
         _DelayFor18TCY
           _Delay1TCYx
   _LCDUpdate
     _SetLCDDDRamAddr
       _DelayFor18TCY
         _Delay1TCYx
     _WriteCmdLCD
       _DelayFor18TCY
         _Delay1TCYx
     _putIntLCD
       _putLCD
         _BusyLCD
           _DelayFor18TCY
             _Delay1TCYx
         _WriteDataLCD
           _DelayFor18TCY
             _Delay1TCYx
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit

 _XC8_LowISR_Handler (ROOT)

 _XC8_HighISR_Handler (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     14      18       5       15.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     3F      40       1       67.4%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      58      15        0.0%
DATA                 0      0      58       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Apr 21 20:21:54 2015

        __size_of_WriteCmdLCD 0040                            bsr 000FE0           ___wmul@multiplicand 0022  
                __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000  
                __CFG_CP3$OFF 000000                           l112 1080                           l203 0F78  
                         l292 0F3C                           l541 108C                           l848 0D42  
                         l858 0E8C                  __CFG_CPB$OFF 000000                           _PR2 000FCB  
                __CFG_CPD$OFF 000000                           u660 0CBE                           u670 0CE8  
                         u905 0D68                           u667 0CB4                           u677 0CDE  
                         u695 0DBC                           _RPM 0074                  __CFG_BORV$30 000000  
       __size_of_WriteDataLCD 0040                           wreg 000FE8                  __CFG_LVP$OFF 000000  
        __size_of_ADC_Convert 000E                    _Delay1TCYx 108A                          l1711 0692  
                        l1703 0664                          l1625 0CC8                          l1561 0D06  
                        l1545 0FCE                          l1801 08D8                          l1705 0672  
                        l1651 103C                          l1619 0C94                          l1563 0D10  
                        l1715 06B0                          l1803 08E4                          l1573 0D36  
                        l1565 0D18                          l1581 0E58                          l1805 0900  
                        l1725 0718                          l1709 067C                          l1655 0FFA  
                        l1903 0A8E                          l1583 0E62                          l1751 07A0  
                        l1743 0778                          l1727 073E                          l1585 0E6A  
                        l1761 07E0                          l1737 0768                          l1771 080C  
                        l1763 07EA                          l1747 079C                          l1739 076C  
                        l1851 09B8                          l1933 0E26                          l1925 0E02  
                        l1589 0E80                          l1781 083E                          l1773 0814  
                        l1757 07BC                          l1845 0980                          l1839 0948  
                        l1881 0A26                          l1937 0E38                          l1929 0E14  
                        l1793 087E                          l1697 064A                          l1891 0A58  
                        l1883 0A34                          l1795 0884                          l1787 0860  
                        l1779 0836                          l1895 0A6A                          l1887 0A46  
                        l1969 104E                          l1899 0A7C                          l1995 0BE4  
                        STR_1 060B                          STR_2 061C                          STR_3 062D  
                        STR_4 0632                          STR_5 0637                          STR_6 063C  
                        u1067 1000                          u1077 103E                          u1087 1050  
                        _LATC 000F8B                          _LATD 000F8C                          i1l53 0064  
                        i1l57 007A                          i2l50 0C56                          _main 0BAE  
       SetLCDDDRamAddr@DDaddr 0024                          fsr0h 000FEA                          fsr1h 000FE2  
                        indf0 000FEF                          fsr0l 000FE9                          fsr2h 000FDA  
                        fsr1l 000FE1                          indf2 000FDF                          fsr2l 000FD9  
                        pclat 000FFA                          prodh 000FF4                          prodl 000FF3  
                        start 00C0            __size_of_LCDUpdate 007A                 __CFG_IESO$OFF 000000  
                ___param_bank 000010               __end_of_BusyLCD 0F8E               __end_of_InitLCD 0E4A  
               ?_InitMotorPWM 0001               __end_of_OpenLCD 0AA2                  _WriteDataLCD 0E96  
                 _Delay1KTCYx 104C                         ?_main 0001         __size_of_Delay100TCYx 0012  
                       _ANSEL 000F7E                         _T2CON 000FCA               __end_of___lwdiv 0D4C  
             __end_of___lwmod 0E96                         _PORTB 000F81                         _PORTD 000F83  
                       _TRISA 000F92                         _TRISB 000F93                         _TRISD 000F95  
       __size_of_Delay10KTCYx 0018                 __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000  
               __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000  
              __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000  
              __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000                         _Speed 0076  
               __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000  
              __CFG_EBTRB$OFF 000000               __end_of_dpowers 060B               __end_of_isdigit 0FD8  
                       tablat 000FF5                         status 000FD8               __end_of_sprintf 0910  
              __CFG_PBADEN$ON 000000             ??_SetLCDDDRamAddr 0021                __CFG_MCLRE$OFF 000000  
           ??_SetLCDCGRamAddr 0021               __initialization 1010                  _Delay100TCYx 103A  
              ??_InitMotorPWM 0020                  __end_of_main 0C20                _InitInterrupts 106E  
            __end_of_BusyXLCD 0F52                WriteCmdLCD@cmd 0021                  _Delay10KTCYx 0FF8  
                      ??_main 0040                 __activetblptr 000002             __end_of_LCDUpdate 0BAE  
                      _ADCON0 000FC2                        _ADCON1 000FC1                        _ADCON2 000FC0  
                      _ADRESH 000FC4                   ?_Delay1TCYx 0001                        _CCPR1L 000FBE  
                      _ANSELH 000F7F                __CFG_WDTEN$OFF 000000                  LCDUpdate@RPM 0070  
                LCDUpdate@PWM 0073            __size_of_InitPorts 0020                     ??_BusyLCD 0021  
                   ??_InitLCD 0026                     ??_OpenLCD 0025        __end_of_InitInterrupts 107C  
              __CFG_XINST$OFF 000000                    _PortBValue 0040                        ___wmul 0F8E  
              __CFG_STVREN$ON 000000                     ??___lwdiv 0024                     ??___lwmod 002B  
  __end_of_InitAnalogueInputs 103A    __end_of_XC8_LowISR_Handler 00C0                        _putLCD 0C90  
         putIntLCD@result_891 006B           putIntLCD@result_887 0068           putIntLCD@result_889 0064  
                   ??_isdigit 0020                  __mediumconst 0000                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8                     ??_sprintf 0032  
                  __accesstop 0060       __end_of__initialization 101C                 ___rparam_used 000001  
             ?_InitInterrupts 0001                __pcstackCOMRAM 0001           __size_of_Delay1TCYx 000C  
           __end_of_InitPorts 0FF8   __end_of_XC8_HighISR_Handler 0C90               __CFG_LPT1OSC$ON 000000  
        __end_of_InitMotorPWM 106E        __size_of_DelayFor18TCY 0008                  sprintf@width 003C  
                  __pbssBANK0 0074                     ?_BusyXLCD 0001         SetLCDCGRamAddr@CGaddr 0024  
               ??_WriteCmdLCD 0021                       ?___wmul 0020                       _CCP1CON 000FBD  
                ?_Delay1KTCYx 0001                       ?_putLCD 0022            __size_of_putIntLCD 00D4  
               ??_ADC_Convert 0020               _SetLCDDDRamAddr 0DA6               _SetLCDCGRamAddr 0D4C  
                  ??_BusyXLCD 0021                       _BusyLCD 0F52                       _InitLCD 0DFA  
                     _OpenLCD 09E4                       __Hparam 0000                       __Lparam 0000  
               _DelayFor18TCY 1096               __size_of___wmul 0028                       ___lwdiv 0CF0  
                     ___lwmod 0E4A                  __psmallconst 0600                       __pcinit 1010  
                     __ramtop 0600               __size_of_putLCD 0060                       __ptext0 0BAE  
                     __ptext1 0B34                       __ptext2 0910                       __ptext3 0640  
                     __ptext4 0FB6                       __ptext5 0F8E                       __ptext6 0E4A  
                     __ptext7 0CF0                       __ptext8 0AA2                       __ptext9 0C90  
         __end_of_WriteCmdLCD 0F16                       _dpowers 0601                       _isdigit 0FB6  
                ??_Delay1TCYx 0020                       _sprintf 0640                     _LCDUpdate 0B34  
              __pintcode_body 0C20          end_of_initialization 101C           __end_of_ADC_Convert 108A  
           _LCDInitialDisplay 0AA2                 __Lmediumconst 0000                       int_func 0C20  
          ?_LCDInitialDisplay 0001             __end_of_putIntLCD 09E4                ?_DelayFor18TCY 0001  
                     postdec2 000FDD                       postinc2 000FDE           ??_LCDInitialDisplay 0025  
          __end_of_Delay1TCYx 1096       __end_of_SetLCDDDRamAddr 0DFA         __size_of_InitMotorPWM 0010  
     __end_of_SetLCDCGRamAddr 0DA6                     _TRISAbits 000F92                     _TRISCbits 000F94  
                   _TRISEbits 000F96            _InitAnalogueInputs 1026            _XC8_LowISR_Handler 0018  
                  ?_LCDUpdate 0070     __end_of_LCDInitialDisplay 0B34              ??_InitInterrupts 0020  
         ?_InitAnalogueInputs 0001           ?_XC8_LowISR_Handler 0001              Delay100TCYx@unit 0020  
                 _WriteCmdLCD 0ED6                  _InitMotorPWM 105E                __end_of___wmul 0FB6  
        ??_InitAnalogueInputs 0020          ??_XC8_LowISR_Handler 0001          __size_of_Delay1KTCYx 0012  
              __end_of_putLCD 0CF0           start_initialization 1010                   _ADC_Convert 107C  
                   _InitPorts 0FD8             __size_of_BusyXLCD 003C               ??_DelayFor18TCY 0021  
                    ??___wmul 0024                 ?_WriteDataLCD 0001                      ??_putLCD 0024  
              OpenLCD@lcdtype 0025              ?_SetLCDDDRamAddr 0001              ?_SetLCDCGRamAddr 0001  
                 __pbssCOMRAM 0040                 __pcstackBANK0 0060                    ?_InitPorts 0001  
            WriteDataLCD@data 0021                  _isdigit$1303 0021                   ??_LCDUpdate 003F  
  __size_of_LCDInitialDisplay 0092               Delay1KTCYx@unit 0020                   sprintf@flag 003B  
__size_of_XC8_HighISR_Handler 0C88                   sprintf@prec 0038                      ?_BusyLCD 0001  
                    ?_InitLCD 0001                      ?_OpenLCD 0001              ___lwdiv@dividend 0020  
           __CFG_CCP2MX$PORTC 000000                 ?_Delay100TCYx 0001                     __pintcode 0008  
              ??_WriteDataLCD 0021                 ?_Delay10KTCYx 0001                      ?___lwdiv 0020  
                    ?___lwmod 0027                   __pintcodelo 0018                   __smallconst 0600  
                    ?_isdigit 0001              ___lwdiv@quotient 0024                      ?_sprintf 002C  
              ___wmul@product 0024                      _LATBbits 000F8A                      _LATDbits 000F8C  
                    _LATEbits 000F8D                LCDUpdate@Speed 003F                ??_Delay100TCYx 0020  
                    _RCONbits 000FD0              __CFG_WDTPS$32768 000000                ??_Delay10KTCYx 0020  
                   _putIntLCD 0910                    putIntLCD@n 0060                    _ADCON0bits 000FC2  
           ___wmul@multiplier 0020                  putLCD@buffer 0022                      _WPUBbits 000F7C  
            Delay10KTCYx@unit 0021                   ??_InitPorts 0020                   _INTCON2bits 000FF1  
                 _INTCON3bits 000FF0                      _BusyXLCD 0F16              __size_of_BusyLCD 003C  
            __size_of_InitLCD 0050                      __Hrparam 0000              __size_of_OpenLCD 00BE  
                    __Lrparam 0000            __CFG_BOREN$SBORDIS 000000                  ?_WriteCmdLCD 0001  
                  ?_putIntLCD 0060                      _Throttle 0077              __size_of___lwdiv 005C  
            __size_of___lwmod 004C                    sprintf@val 0039                  ?_ADC_Convert 0001  
           LCDUpdate@Throttle 0072              __size_of_isdigit 0022               ___lwdiv@divisor 0022  
             ___lwdiv@counter 0026                      __ptext10 0E96                      __ptext11 0D4C  
                    __ptext20 0F16                      __ptext12 0FD8                      __ptext21 0F52  
                    __ptext13 105E                      __ptext22 1096                      __ptext14 0DFA  
                    __ptext23 108A                      __ptext15 09E4                      __ptext24 106E  
                    __ptext16 0ED6                      __ptext25 1026                      __ptext17 0DA6  
                    __ptext26 104C                      __ptext18 0FF8                      __ptext27 107C  
                    __ptext19 103A          __end_of_WriteDataLCD 0ED6              __size_of_sprintf 02D0  
               __size_of_main 0072                Delay1TCYx@unit 0020                 ??_Delay1KTCYx 0020  
         _XC8_HighISR_Handler 0008   __size_of_InitAnalogueInputs 0014   __size_of_XC8_LowISR_Handler 00A8  
                  _INTCONbits 000FF2          __end_of_Delay100TCYx 104C                      isdigit@c 0022  
        __end_of_Delay10KTCYx 1010                      intlevel1 0000                      intlevel2 0000  
                   sprintf@ap 0036                     sprintf@sp 002C          ?_XC8_HighISR_Handler 0001  
            ___lwmod@dividend 0027         __end_of_DelayFor18TCY 109E                   ??_putIntLCD 003F  
     __size_of_InitInterrupts 000E               putIntLCD@result 006E                      sprintf@c 003E  
                    sprintf@f 002E               ___lwmod@divisor 0029           __end_of_Delay1KTCYx 105E  
             ___lwmod@counter 002B      __size_of_SetLCDDDRamAddr 0054         ??_XC8_HighISR_Handler 0012  
    __size_of_SetLCDCGRamAddr 005A             __CFG_FOSC$INTIO67 000000                  putIntLCD@pad 0062  
